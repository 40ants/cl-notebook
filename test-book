((5137 81915 776845000) :INSERT (0 :NOTEBOOK-NAME "test-book"))
((5137 81915 794555000) :INSERT (1 :CELL NIL))
((5137 81915 794570000) :INSERT (1 :CELL-TYPE :CODE))
((5137 81915 794574000) :INSERT (1 :CONTENTS ""))
((5137 81915 794577000) :INSERT (1 :VALUE ""))
((5137 81990 763180000) :INSERT (2 :CELL NIL))
((5137 81990 763199000) :INSERT (2 :CELL-TYPE :MARKUP))
((5137 81990 763204000) :INSERT (2 :CONTENTS ""))
((5137 81990 763211000) :INSERT (2 :VALUE ""))
((5137 81992 111880000) :INSERT (3 :CELL-ORDER (2 1)))
((5137 81994 545952000) :DELETE (2 :CONTENTS ""))
((5137 81994 546046000) :DELETE (2 :VALUE ""))
((5137 81994 546058000) :INSERT
 (2 :CONTENTS "(:h1 \"Headings!\")

(:h2 \"Smaller headings!\")

(:p \"Paragraphs!\")

(:img :src \"/static/img/derpy-prepares-for-work.gif\" :style \":width 250px\")"))
((5137 81994 546064000) :INSERT
 (2 :VALUE
  ((:RESULT
    . "<h1>Headings!</h1><h2>Smaller headings!</h2><p>Paragraphs!</p><img src='/static/img/derpy-prepares-for-work.gif' style=':width 250px' />"))))
((5137 82004 899274000) :DELETE
 (2 :CONTENTS "(:h1 \"Headings!\")

(:h2 \"Smaller headings!\")

(:p \"Paragraphs!\")

(:img :src \"/static/img/derpy-prepares-for-work.gif\" :style \":width 250px\")"))
((5137 82004 899297000) :DELETE
 (2 :VALUE
  ((:RESULT
    . "<h1>Headings!</h1><h2>Smaller headings!</h2><p>Paragraphs!</p><img src='/static/img/derpy-prepares-for-work.gif' style=':width 250px' />"))))
((5137 82004 899308000) :INSERT
 (2 :CONTENTS "(:h1 \"Headings!\")

(:h2 \"Smaller headings!\")

(:p \"Paragraphs!\")

(:img :src \"/static/img/derpy-prepares-for-work.gif\" :style \"width: 250px;\")"))
((5137 82004 899315000) :INSERT
 (2 :VALUE
  ((:RESULT
    . "<h1>Headings!</h1><h2>Smaller headings!</h2><p>Paragraphs!</p><img src='/static/img/derpy-prepares-for-work.gif' style='width: 250px;' />"))))
((5137 82006 890042000) :INSERT (4 :CELL NIL))
((5137 82006 890054000) :INSERT (4 :CELL-TYPE :MARKUP))
((5137 82006 890060000) :INSERT (4 :CONTENTS ""))
((5137 82006 890065000) :INSERT (4 :VALUE ""))
((5137 82008 465142000) :DELETE (3 :CELL-ORDER (2 1)))
((5137 82008 465186000) :INSERT (5 :CELL-ORDER (2 4 1)))
((5137 82021 302635000) :DELETE (4 :CONTENTS ""))
((5137 82021 302650000) :DELETE (4 :VALUE ""))
((5137 82021 302659000) :INSERT
 (4 :CONTENTS "(:h3 \"Ok, serious notes here...\")

(:b \"Terrain generation\")
(:ul
 (:li (:a :href \"http://en.wikipedia.org/wiki/Maze_generation_algorithm\" \"Maze generation on wikipedia\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Articles#Map\" \"Rogue Basin page\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm\" \"Dungeon Building Algorithm\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python\" \"Dungeon Builder in Python\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels\" \"Cellular Automata for Terrain\"))
 (:li (:a :href \"http://pixelenvy.ca/wa/ca_cave.html\" \"More cellular automata for terrain\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Abstract_Dungeons\" \"Abstract dungeons from RogueBasin\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern\" \"Cavern delving\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation\" \"BSP Dungeon gen\")))

(:br)

(:b \"Clojure\")
(:ul
 (:li (:a :href \"https://github.com/JonyEpsilon/gorilla-repl\" \"Gorilla Repl\"))
 (:li (:a :href \"https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer\" \"core.logic Primer\"))
 (:li (:a :href \"https://github.com/clojure/core.logic\" \"core.logic GitHub\"))
 (:li (:a :href \"http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html\" \"Namespace Primer\"))
 (:li (:a :href \"https://gist.github.com/ghoseb/287710\" \"NS cheat-sheet\")))

(:br)
(:b \"LightTable\")
(:ul
 (:li (:a :href \"https://github.com/darthdeus/LightTable-Ruby\" \"Ruby mode\")))

(:br)
(:b \"Misc...\")
(:ul
 (:li (:a :href \"http://code.google.com/p/key-mon/source/checkout\" \"KeyMon -- tool for showing keystrokes in screencasts\"))
 (:li (:a :href \"http://www.subtext-lang.org/\" \"Subtext Lang\"))
 (:li (:a :href \"http://byorgey.wordpress.com/catsters-guide-2/\" \"The Catsters\"))
 (:li (:a :href \"http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53\" \"Share Elm -- Line of Sight\"))
 (:li (:a :href \"http://codemirror.net/doc/manual.html#overview\" \"CodeMirror manual\"))
 (:li (:a :href \"https://github.com/nkmathew/yasi-sexp-indenter\" \"batch s-exp indenter\")))

(:br)"))
((5137 82021 302684000) :INSERT
 (4 :VALUE
  ((:RESULT
    . "<h3>Ok, serious notes here...</h3><b>Terrain generation</b><ul><li><a href='http://en.wikipedia.org/wiki/Maze_generation_algorithm'>Maze generation on wikipedia</a></li><li><a href='http://www.roguebasin.com/index.php?title=Articles#Map'>Rogue Basin page</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm'>Dungeon Building Algorithm</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python'>Dungeon Builder in Python</a></li><li><a href='http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels'>Cellular Automata for Terrain</a></li><li><a href='http://pixelenvy.ca/wa/ca_cave.html'>More cellular automata for terrain</a></li><li><a href='http://www.roguebasin.com/index.php?title=Abstract_Dungeons'>Abstract dungeons from RogueBasin</a></li><li><a href='http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern'>Cavern delving</a></li><li><a href='http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation'>BSP Dungeon gen</a></li></ul><br /><b>Clojure</b><ul><li><a href='https://github.com/JonyEpsilon/gorilla-repl'>Gorilla Repl</a></li><li><a href='https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer'>core.logic Primer</a></li><li><a href='https://github.com/clojure/core.logic'>core.logic GitHub</a></li><li><a href='http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html'>Namespace Primer</a></li><li><a href='https://gist.github.com/ghoseb/287710'>NS cheat-sheet</a></li></ul><br /><b>LightTable</b><ul><li><a href='https://github.com/darthdeus/LightTable-Ruby'>Ruby mode</a></li></ul><br /><b>Misc...</b><ul><li><a href='http://code.google.com/p/key-mon/source/checkout'>KeyMon -- tool for showing keystrokes in screencasts</a></li><li><a href='http://www.subtext-lang.org/'>Subtext Lang</a></li><li><a href='http://byorgey.wordpress.com/catsters-guide-2/'>The Catsters</a></li><li><a href='http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53'>Share Elm -- Line of Sight</a></li><li><a href='http://codemirror.net/doc/manual.html#overview'>CodeMirror manual</a></li><li><a href='https://github.com/nkmathew/yasi-sexp-indenter'>batch s-exp indenter</a></li></ul><br />"))))
((5137 82030 806603000) :DELETE (5 :CELL-ORDER (2 4 1)))
((5137 82030 806628000) :INSERT (6 :CELL-ORDER (2 1 4)))
((5137 82037 998946000) :DELETE (1 :CONTENTS ""))
((5137 82037 998964000) :DELETE (1 :VALUE ""))
((5137 82037 998972000) :INSERT
 (1 :CONTENTS ";; code!

(+ 2 3 4 5)"))
((5137 82037 998982000) :INSERT
 (1 :VALUE ((:RESULT ((INTEGER "14"))) (:STDOUT . ""))))
((5137 82044 83313000) :INSERT (7 :CELL NIL))
((5137 82044 83323000) :INSERT (7 :CELL-TYPE :CODE))
((5137 82044 83326000) :INSERT (7 :CONTENTS ""))
((5137 82044 83335000) :INSERT (7 :VALUE ""))
((5137 82046 914493000) :DELETE (6 :CELL-ORDER (2 1 4)))
((5137 82046 914511000) :INSERT (8 :CELL-ORDER (2 1 4 7)))
((5137 82051 152379000) :DELETE (8 :CELL-ORDER (2 1 4 7)))
((5137 82051 152399000) :INSERT (9 :CELL-ORDER (2 1 7 4)))
((5137 82063 29256000) :DELETE (7 :CONTENTS ""))
((5137 82063 29271000) :DELETE (7 :VALUE ""))
((5137 82063 29277000) :INSERT
 (7 :CONTENTS ";; errors!

(+ 2 3 4 :test)"))
((5137 82063 29281000) :INSERT
 (7 :VALUE
  ((:RESULT
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 2 3 4 TEST)") (:DATUM . :TEST)
       (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . ""))))
((5137 82067 515719000) :INSERT (10 :CELL NIL))
((5137 82067 515731000) :INSERT (10 :CELL-TYPE :CODE))
((5137 82067 515734000) :INSERT (10 :CONTENTS ""))
((5137 82067 515738000) :INSERT (10 :VALUE ""))
((5137 82071 562068000) :DELETE (9 :CELL-ORDER (2 1 7 4)))
((5137 82071 562083000) :INSERT (11 :CELL-ORDER (2 1 7 10 4)))
((5137 82129 200144000) :DELETE (10 :CONTENTS ""))
((5137 82129 200166000) :DELETE (10 :VALUE ""))
((5137 82129 200175000) :INSERT
 (10 :CONTENTS
  ";; The working forms get evaled when an error happens part-way through!
;; Also, we capture *standard-output*!

(+ 2 3)
(+ 3 4)
(format t \"This is a STDOUT message!\")
(+ 4 5)
(+ 6 :test)"))
((5137 82129 200184000) :INSERT
 (10 :VALUE
  ((:RESULT ((INTEGER "5")) ((INTEGER "7")) ((NULL "NIL")) ((INTEGER "9"))
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 6 TEST)") (:DATUM . :TEST) (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . "This is a STDOUT message!"))))
((5137 82151 791938000) :DELETE
 (10 :CONTENTS
  ";; The working forms get evaled when an error happens part-way through!
;; Also, we capture *standard-output*!

(+ 2 3)
(+ 3 4)
(format t \"This is a STDOUT message!\")
(+ 4 5)
(+ 6 :test)"))
((5137 82151 791962000) :DELETE
 (10 :VALUE
  ((:RESULT ((INTEGER "5")) ((INTEGER "7")) ((NULL "NIL")) ((INTEGER "9"))
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 6 TEST)") (:DATUM . :TEST) (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . "This is a STDOUT message!"))))
((5137 82151 791971000) :INSERT
 (10 :CONTENTS
  ";; The working forms get evaled when an error happens part-way through!
(+ 2 3)
(+ 3 4)
(+ 4 5)
(+ 6 :test)"))
((5137 82151 791979000) :INSERT
 (10 :VALUE
  ((:RESULT ((INTEGER "5")) ((INTEGER "7")) ((INTEGER "9"))
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 6 TEST)") (:DATUM . :TEST) (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . ""))))
((5137 82155 12627000) :INSERT (12 :CELL NIL))
((5137 82155 12637000) :INSERT (12 :CELL-TYPE :MARKUP))
((5137 82155 12640000) :INSERT (12 :CONTENTS ""))
((5137 82155 12642000) :INSERT (12 :VALUE ""))
((5137 82158 276233000) :DELETE (12 :VALUE ""))
((5137 82158 276246000) :DELETE (12 :CONTENTS ""))
((5137 82158 276252000) :DELETE (12 :CELL-TYPE :MARKUP))
((5137 82158 276257000) :DELETE (12 :CELL NIL))
((5137 82160 214971000) :INSERT (13 :CELL NIL))
((5137 82160 214992000) :INSERT (13 :CELL-TYPE :CODE))
((5137 82160 214999000) :INSERT (13 :CONTENTS ""))
((5137 82160 215005000) :INSERT (13 :VALUE ""))
((5137 82162 935333000) :DELETE (11 :CELL-ORDER (2 1 7 10 4)))
((5137 82162 935349000) :INSERT (14 :CELL-ORDER (2 1 7 10 13 4)))
((5137 82226 623914000) :DELETE (13 :CONTENTS ""))
((5137 82226 623933000) :DELETE (13 :VALUE ""))
((5137 82226 623941000) :INSERT
 (13 :CONTENTS ";; We capture *standard-output*!

(format t \"Something something dark side\")"))
((5137 82226 623948000) :INSERT
 (13 :VALUE
  ((:RESULT ((NULL "NIL"))) (:STDOUT . "Something something dark side"))))
((5137 82244 813041000) :DELETE
 (13 :CONTENTS ";; We capture *standard-output*!

(format t \"Something something dark side\")"))
((5137 82244 813058000) :DELETE
 (13 :VALUE
  ((:RESULT ((NULL "NIL"))) (:STDOUT . "Something something dark side"))))
((5137 82244 813065000) :INSERT
 (13 :CONTENTS ";; We capture *standard-output*!

(format t \"Something something ~%dark side~%\")"))
((5137 82244 813070000) :INSERT
 (13 :VALUE
  ((:RESULT ((NULL "NIL")))
   (:STDOUT . "Something something 
dark side
"))))
((5137 82266 647011000) :DELETE
 (13 :CONTENTS ";; We capture *standard-output*!

(format t \"Something something ~%dark side~%\")"))
((5137 82266 647037000) :DELETE
 (13 :VALUE
  ((:RESULT ((NULL "NIL")))
   (:STDOUT . "Something something 
dark side
"))))
((5137 82266 647050000) :INSERT
 (13 :CONTENTS ";; We capture *standard-output*!

(format t \"Something something dark side.~%Also, multilines work.\")"))
((5137 82266 647059000) :INSERT
 (13 :VALUE
  ((:RESULT ((NULL "NIL")))
   (:STDOUT . "Something something dark side.
Also, multilines work."))))
((5137 82288 963853000) :DELETE
 (13 :CONTENTS ";; We capture *standard-output*!

(format t \"Something something dark side.~%Also, multilines work.\")"))
((5137 82288 963870000) :DELETE
 (13 :VALUE
  ((:RESULT ((NULL "NIL")))
   (:STDOUT . "Something something dark side.
Also, multilines work."))))
((5137 82288 963878000) :INSERT
 (13 :CONTENTS ";; We capture *standard-output*!

(format t \"Something something dark side.~%Also, multilines work here.~%Although if you print tons of lines, the output will get long.\")"))
((5137 82288 963885000) :INSERT
 (13 :VALUE
  ((:RESULT ((NULL "NIL")))
   (:STDOUT . "Something something dark side.
Also, multilines work here.
Although if you print tons of lines, the output will get long."))))
((5137 82300 702851000) :DELETE
 (4 :CONTENTS "(:h3 \"Ok, serious notes here...\")

(:b \"Terrain generation\")
(:ul
 (:li (:a :href \"http://en.wikipedia.org/wiki/Maze_generation_algorithm\" \"Maze generation on wikipedia\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Articles#Map\" \"Rogue Basin page\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm\" \"Dungeon Building Algorithm\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python\" \"Dungeon Builder in Python\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels\" \"Cellular Automata for Terrain\"))
 (:li (:a :href \"http://pixelenvy.ca/wa/ca_cave.html\" \"More cellular automata for terrain\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Abstract_Dungeons\" \"Abstract dungeons from RogueBasin\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern\" \"Cavern delving\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation\" \"BSP Dungeon gen\")))

(:br)

(:b \"Clojure\")
(:ul
 (:li (:a :href \"https://github.com/JonyEpsilon/gorilla-repl\" \"Gorilla Repl\"))
 (:li (:a :href \"https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer\" \"core.logic Primer\"))
 (:li (:a :href \"https://github.com/clojure/core.logic\" \"core.logic GitHub\"))
 (:li (:a :href \"http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html\" \"Namespace Primer\"))
 (:li (:a :href \"https://gist.github.com/ghoseb/287710\" \"NS cheat-sheet\")))

(:br)
(:b \"LightTable\")
(:ul
 (:li (:a :href \"https://github.com/darthdeus/LightTable-Ruby\" \"Ruby mode\")))

(:br)
(:b \"Misc...\")
(:ul
 (:li (:a :href \"http://code.google.com/p/key-mon/source/checkout\" \"KeyMon -- tool for showing keystrokes in screencasts\"))
 (:li (:a :href \"http://www.subtext-lang.org/\" \"Subtext Lang\"))
 (:li (:a :href \"http://byorgey.wordpress.com/catsters-guide-2/\" \"The Catsters\"))
 (:li (:a :href \"http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53\" \"Share Elm -- Line of Sight\"))
 (:li (:a :href \"http://codemirror.net/doc/manual.html#overview\" \"CodeMirror manual\"))
 (:li (:a :href \"https://github.com/nkmathew/yasi-sexp-indenter\" \"batch s-exp indenter\")))

(:br)"))
((5137 82300 702907000) :DELETE
 (4 :VALUE
  ((:RESULT
    . "<h3>Ok, serious notes here...</h3><b>Terrain generation</b><ul><li><a href='http://en.wikipedia.org/wiki/Maze_generation_algorithm'>Maze generation on wikipedia</a></li><li><a href='http://www.roguebasin.com/index.php?title=Articles#Map'>Rogue Basin page</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm'>Dungeon Building Algorithm</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python'>Dungeon Builder in Python</a></li><li><a href='http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels'>Cellular Automata for Terrain</a></li><li><a href='http://pixelenvy.ca/wa/ca_cave.html'>More cellular automata for terrain</a></li><li><a href='http://www.roguebasin.com/index.php?title=Abstract_Dungeons'>Abstract dungeons from RogueBasin</a></li><li><a href='http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern'>Cavern delving</a></li><li><a href='http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation'>BSP Dungeon gen</a></li></ul><br /><b>Clojure</b><ul><li><a href='https://github.com/JonyEpsilon/gorilla-repl'>Gorilla Repl</a></li><li><a href='https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer'>core.logic Primer</a></li><li><a href='https://github.com/clojure/core.logic'>core.logic GitHub</a></li><li><a href='http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html'>Namespace Primer</a></li><li><a href='https://gist.github.com/ghoseb/287710'>NS cheat-sheet</a></li></ul><br /><b>LightTable</b><ul><li><a href='https://github.com/darthdeus/LightTable-Ruby'>Ruby mode</a></li></ul><br /><b>Misc...</b><ul><li><a href='http://code.google.com/p/key-mon/source/checkout'>KeyMon -- tool for showing keystrokes in screencasts</a></li><li><a href='http://www.subtext-lang.org/'>Subtext Lang</a></li><li><a href='http://byorgey.wordpress.com/catsters-guide-2/'>The Catsters</a></li><li><a href='http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53'>Share Elm -- Line of Sight</a></li><li><a href='http://codemirror.net/doc/manual.html#overview'>CodeMirror manual</a></li><li><a href='https://github.com/nkmathew/yasi-sexp-indenter'>batch s-exp indenter</a></li></ul><br />"))))
((5137 82300 702964000) :INSERT
 (4 :CONTENTS "(:h3 \"Ok, serious notes now...\")

(:b \"Terrain generation\")
(:ul
 (:li (:a :href \"http://en.wikipedia.org/wiki/Maze_generation_algorithm\" \"Maze generation on wikipedia\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Articles#Map\" \"Rogue Basin page\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm\" \"Dungeon Building Algorithm\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python\" \"Dungeon Builder in Python\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels\" \"Cellular Automata for Terrain\"))
 (:li (:a :href \"http://pixelenvy.ca/wa/ca_cave.html\" \"More cellular automata for terrain\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Abstract_Dungeons\" \"Abstract dungeons from RogueBasin\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern\" \"Cavern delving\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation\" \"BSP Dungeon gen\")))

(:br)

(:b \"Clojure\")
(:ul
 (:li (:a :href \"https://github.com/JonyEpsilon/gorilla-repl\" \"Gorilla Repl\"))
 (:li (:a :href \"https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer\" \"core.logic Primer\"))
 (:li (:a :href \"https://github.com/clojure/core.logic\" \"core.logic GitHub\"))
 (:li (:a :href \"http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html\" \"Namespace Primer\"))
 (:li (:a :href \"https://gist.github.com/ghoseb/287710\" \"NS cheat-sheet\")))

(:br)
(:b \"LightTable\")
(:ul
 (:li (:a :href \"https://github.com/darthdeus/LightTable-Ruby\" \"Ruby mode\")))

(:br)
(:b \"Misc...\")
(:ul
 (:li (:a :href \"http://code.google.com/p/key-mon/source/checkout\" \"KeyMon -- tool for showing keystrokes in screencasts\"))
 (:li (:a :href \"http://www.subtext-lang.org/\" \"Subtext Lang\"))
 (:li (:a :href \"http://byorgey.wordpress.com/catsters-guide-2/\" \"The Catsters\"))
 (:li (:a :href \"http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53\" \"Share Elm -- Line of Sight\"))
 (:li (:a :href \"http://codemirror.net/doc/manual.html#overview\" \"CodeMirror manual\"))
 (:li (:a :href \"https://github.com/nkmathew/yasi-sexp-indenter\" \"batch s-exp indenter\")))

(:br)"))
((5137 82300 702991000) :INSERT
 (4 :VALUE
  ((:RESULT
    . "<h3>Ok, serious notes now...</h3><b>Terrain generation</b><ul><li><a href='http://en.wikipedia.org/wiki/Maze_generation_algorithm'>Maze generation on wikipedia</a></li><li><a href='http://www.roguebasin.com/index.php?title=Articles#Map'>Rogue Basin page</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm'>Dungeon Building Algorithm</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python'>Dungeon Builder in Python</a></li><li><a href='http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels'>Cellular Automata for Terrain</a></li><li><a href='http://pixelenvy.ca/wa/ca_cave.html'>More cellular automata for terrain</a></li><li><a href='http://www.roguebasin.com/index.php?title=Abstract_Dungeons'>Abstract dungeons from RogueBasin</a></li><li><a href='http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern'>Cavern delving</a></li><li><a href='http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation'>BSP Dungeon gen</a></li></ul><br /><b>Clojure</b><ul><li><a href='https://github.com/JonyEpsilon/gorilla-repl'>Gorilla Repl</a></li><li><a href='https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer'>core.logic Primer</a></li><li><a href='https://github.com/clojure/core.logic'>core.logic GitHub</a></li><li><a href='http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html'>Namespace Primer</a></li><li><a href='https://gist.github.com/ghoseb/287710'>NS cheat-sheet</a></li></ul><br /><b>LightTable</b><ul><li><a href='https://github.com/darthdeus/LightTable-Ruby'>Ruby mode</a></li></ul><br /><b>Misc...</b><ul><li><a href='http://code.google.com/p/key-mon/source/checkout'>KeyMon -- tool for showing keystrokes in screencasts</a></li><li><a href='http://www.subtext-lang.org/'>Subtext Lang</a></li><li><a href='http://byorgey.wordpress.com/catsters-guide-2/'>The Catsters</a></li><li><a href='http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53'>Share Elm -- Line of Sight</a></li><li><a href='http://codemirror.net/doc/manual.html#overview'>CodeMirror manual</a></li><li><a href='https://github.com/nkmathew/yasi-sexp-indenter'>batch s-exp indenter</a></li></ul><br />"))))
((5137 85845 935315000) :DELETE
 (2 :CONTENTS "(:h1 \"Headings!\")

(:h2 \"Smaller headings!\")

(:p \"Paragraphs!\")

(:img :src \"/static/img/derpy-prepares-for-work.gif\" :style \"width: 250px;\")"))
((5137 85845 935330000) :DELETE
 (2 :VALUE
  ((:RESULT
    . "<h1>Headings!</h1><h2>Smaller headings!</h2><p>Paragraphs!</p><img src='/static/img/derpy-prepares-for-work.gif' style='width: 250px;' />"))))
((5137 85845 935338000) :INSERT
 (2 :CONTENTS "(:h1 \"Headings!\")

(:h2 \"Smaller headings!\")

(:p \"Paragraphs!\")

(:img :src \"/static/img/derpy-prepares-for-work.gif\" :style \"width: 450px;\")"))
((5137 85845 935343000) :INSERT
 (2 :VALUE
  ((:RESULT
    . "<h1>Headings!</h1><h2>Smaller headings!</h2><p>Paragraphs!</p><img src='/static/img/derpy-prepares-for-work.gif' style='width: 450px;' />"))))
((5137 85858 47519000) :DELETE
 (2 :CONTENTS "(:h1 \"Headings!\")

(:h2 \"Smaller headings!\")

(:p \"Paragraphs!\")

(:img :src \"/static/img/derpy-prepares-for-work.gif\" :style \"width: 450px;\")"))
((5137 85858 47557000) :DELETE
 (2 :VALUE
  ((:RESULT
    . "<h1>Headings!</h1><h2>Smaller headings!</h2><p>Paragraphs!</p><img src='/static/img/derpy-prepares-for-work.gif' style='width: 450px;' />"))))
((5137 85858 47565000) :INSERT
 (2 :CONTENTS "(:h1 \"Headings!\")

(:h2 \"Smaller headings!\")

(:p \"Paragraphs!\")

(:img :src \"/static/img/derpy-prepares-for-work.gif\" :style \"width: 450px;\")

(:p \"Pictures!\")"))
((5137 85858 47570000) :INSERT
 (2 :VALUE
  ((:RESULT
    . "<h1>Headings!</h1><h2>Smaller headings!</h2><p>Paragraphs!</p><img src='/static/img/derpy-prepares-for-work.gif' style='width: 450px;' /><p>Pictures!</p>"))))
((5137 86048 978240000) :DELETE
 (10 :CONTENTS
  ";; The working forms get evaled when an error happens part-way through!
(+ 2 3)
(+ 3 4)
(+ 4 5)
(+ 6 :test)"))
((5137 86048 978278000) :DELETE
 (10 :VALUE
  ((:RESULT ((INTEGER "5")) ((INTEGER "7")) ((INTEGER "9"))
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 6 TEST)") (:DATUM . :TEST) (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . ""))))
((5137 86048 978287000) :INSERT
 (10 :CONTENTS
  ";; The working forms get evaled when an error happens part-way through!
(+ 2 3)
(+ 3 4)
(format t \"Blah!\")
(+ 4 5)
(+ 6 :test)"))
((5137 86048 978294000) :INSERT
 (10 :VALUE
  ((:RESULT ((INTEGER "5")) ((INTEGER "7")) ((NULL "NIL")) ((INTEGER "9"))
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 6 TEST)") (:DATUM . :TEST) (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . "Blah!"))))
((5137 86085 472229000) :DELETE
 (10 :CONTENTS
  ";; The working forms get evaled when an error happens part-way through!
(+ 2 3)
(+ 3 4)
(format t \"Blah!\")
(+ 4 5)
(+ 6 :test)"))
((5137 86085 472255000) :DELETE
 (10 :VALUE
  ((:RESULT ((INTEGER "5")) ((INTEGER "7")) ((NULL "NIL")) ((INTEGER "9"))
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 6 TEST)") (:DATUM . :TEST) (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . "Blah!"))))
((5137 86085 472263000) :INSERT
 (10 :CONTENTS
  ";; The working forms get evaled when an error happens part-way through!
(+ 2 3)
(+ 3 4)
(format t \"Also, we capture *standard-output*!~%Yes, even multiline *standard-output*!\")
(+ 4 5)
(+ 6 :test)"))
((5137 86085 472270000) :INSERT
 (10 :VALUE
  ((:RESULT ((INTEGER "5")) ((INTEGER "7")) ((NULL "NIL")) ((INTEGER "9"))
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 6 TEST)") (:DATUM . :TEST) (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . "Also, we capture *standard-output*!
Yes, even multiline *standard-output*!"))))
((5137 86122 573872000) :DELETE
 (10 :CONTENTS
  ";; The working forms get evaled when an error happens part-way through!
(+ 2 3)
(+ 3 4)
(format t \"Also, we capture *standard-output*!~%Yes, even multiline *standard-output*!\")
(+ 4 5)
(+ 6 :test)"))
((5137 86122 573888000) :DELETE
 (10 :VALUE
  ((:RESULT ((INTEGER "5")) ((INTEGER "7")) ((NULL "NIL")) ((INTEGER "9"))
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 6 TEST)") (:DATUM . :TEST) (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . "Also, we capture *standard-output*!
Yes, even multiline *standard-output*!"))))
((5137 86122 573895000) :INSERT
 (10 :CONTENTS
  ";; The working forms get evaled when an error happens part-way through!
(+ 2 3)
(+ 3 4)
(format t \"Also, we capture *standard-output*!~%Yes, even multiline *standard-output*!~%Though it will get long if you have lots of lines...\")
(+ 4 5)
(+ 6 :test)"))
((5137 86122 573901000) :INSERT
 (10 :VALUE
  ((:RESULT ((INTEGER "5")) ((INTEGER "7")) ((NULL "NIL")) ((INTEGER "9"))
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 6 TEST)") (:DATUM . :TEST) (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . "Also, we capture *standard-output*!
Yes, even multiline *standard-output*!
Though it will get long if you have lots of lines..."))))
((5137 86139 227645000) :DELETE
 (13 :VALUE
  ((:RESULT ((NULL "NIL")))
   (:STDOUT . "Something something dark side.
Also, multilines work here.
Although if you print tons of lines, the output will get long."))))
((5137 86139 227662000) :DELETE
 (13 :CONTENTS ";; We capture *standard-output*!

(format t \"Something something dark side.~%Also, multilines work here.~%Although if you print tons of lines, the output will get long.\")"))
((5137 86139 227672000) :DELETE (13 :CELL-TYPE :CODE))
((5137 86139 227678000) :DELETE (13 :CELL NIL))
((5137 86171 453156000) :DELETE
 (10 :CONTENTS
  ";; The working forms get evaled when an error happens part-way through!
(+ 2 3)
(+ 3 4)
(format t \"Also, we capture *standard-output*!~%Yes, even multiline *standard-output*!~%Though it will get long if you have lots of lines...\")
(+ 4 5)
(+ 6 :test)"))
((5137 86171 453173000) :DELETE
 (10 :VALUE
  ((:RESULT ((INTEGER "5")) ((INTEGER "7")) ((NULL "NIL")) ((INTEGER "9"))
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 6 TEST)") (:DATUM . :TEST) (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . "Also, we capture *standard-output*!
Yes, even multiline *standard-output*!
Though it will get long if you have lots of lines..."))))
((5137 86171 453181000) :INSERT
 (10 :CONTENTS
  ";; The working forms get evaled when an error happens part-way through!
(+ 2 3)
(+ 3 4)
(format t \"Also, we capture *standard-output*!~%Yes, even multiline *standard-output*!~%Though it will get long if you have lots of lines...\")
(+ 4 5)
(values :yes :multiple :values :also :works!)
(+ 6 :test)"))
((5137 86171 453188000) :INSERT
 (10 :VALUE
  ((:RESULT ((INTEGER "5")) ((INTEGER "7")) ((NULL "NIL")) ((INTEGER "9"))
    ((KEYWORD ":YES") (KEYWORD ":MULTIPLE") (KEYWORD ":VALUES")
     (KEYWORD ":ALSO") (KEYWORD ":WORKS!"))
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 6 TEST)") (:DATUM . :TEST) (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . "Also, we capture *standard-output*!
Yes, even multiline *standard-output*!
Though it will get long if you have lots of lines..."))))
((5137 86194 55659000) :DELETE
 (10 :CONTENTS
  ";; The working forms get evaled when an error happens part-way through!
(+ 2 3)
(+ 3 4)
(format t \"Also, we capture *standard-output*!~%Yes, even multiline *standard-output*!~%Though it will get long if you have lots of lines...\")
(+ 4 5)
(values :yes :multiple :values :also :works!)
(+ 6 :test)"))
((5137 86194 55678000) :DELETE
 (10 :VALUE
  ((:RESULT ((INTEGER "5")) ((INTEGER "7")) ((NULL "NIL")) ((INTEGER "9"))
    ((KEYWORD ":YES") (KEYWORD ":MULTIPLE") (KEYWORD ":VALUES")
     (KEYWORD ":ALSO") (KEYWORD ":WORKS!"))
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 6 TEST)") (:DATUM . :TEST) (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . "Also, we capture *standard-output*!
Yes, even multiline *standard-output*!
Though it will get long if you have lots of lines..."))))
((5137 86194 55686000) :INSERT
 (10 :CONTENTS
  ";; The working forms get evaled when an error happens part-way through!
(+ 2 3)
(+ 3 4)
(format t \"Also, we capture *standard-output*!~%Yes, even multiline *standard-output*!~%Though it will get long if you have lots of lines...\")
(+ 4 5)
(values :yes :multiple :values :also :work!)
(+ 6 :test)"))
((5137 86194 55693000) :INSERT
 (10 :VALUE
  ((:RESULT ((INTEGER "5")) ((INTEGER "7")) ((NULL "NIL")) ((INTEGER "9"))
    ((KEYWORD ":YES") (KEYWORD ":MULTIPLE") (KEYWORD ":VALUES")
     (KEYWORD ":ALSO") (KEYWORD ":WORK!"))
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 6 TEST)") (:DATUM . :TEST) (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . "Also, we capture *standard-output*!
Yes, even multiline *standard-output*!
Though it will get long if you have lots of lines..."))))
