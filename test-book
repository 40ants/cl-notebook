((5137 81915 776845000) :INSERT (0 :NOTEBOOK-NAME "test-book"))
((5137 81915 794555000) :INSERT (1 :CELL NIL))
((5137 81915 794570000) :INSERT (1 :CELL-TYPE :COMMON-LISP))
((5137 81915 794574000) :INSERT (1 :CONTENTS ""))
((5137 81915 794577000) :INSERT (1 :VALUE ""))
((5137 81990 763180000) :INSERT (2 :CELL NIL))
((5137 81990 763199000) :INSERT (2 :CELL-TYPE :CL-WHO))
((5137 81990 763204000) :INSERT (2 :CONTENTS ""))
((5137 81990 763211000) :INSERT (2 :VALUE ""))
((5137 81992 111880000) :INSERT (3 :CELL-ORDER (2 1)))
((5137 81994 545952000) :DELETE (2 :CONTENTS ""))
((5137 81994 546046000) :DELETE (2 :VALUE ""))
((5137 81994 546058000) :INSERT
 (2 :CONTENTS "(:h1 \"Headings!\")

(:h2 \"Smaller headings!\")

(:p \"Paragraphs!\")

(:img :src \"/static/img/derpy-prepares-for-work.gif\" :style \":width 250px\")"))
((5137 81994 546064000) :INSERT
 (2 :VALUE
  ((:RESULT
    . "<h1>Headings!</h1><h2>Smaller headings!</h2><p>Paragraphs!</p><img src='/static/img/derpy-prepares-for-work.gif' style=':width 250px' />"))))
((5137 82004 899274000) :DELETE
 (2 :CONTENTS "(:h1 \"Headings!\")

(:h2 \"Smaller headings!\")

(:p \"Paragraphs!\")

(:img :src \"/static/img/derpy-prepares-for-work.gif\" :style \":width 250px\")"))
((5137 82004 899297000) :DELETE
 (2 :VALUE
  ((:RESULT
    . "<h1>Headings!</h1><h2>Smaller headings!</h2><p>Paragraphs!</p><img src='/static/img/derpy-prepares-for-work.gif' style=':width 250px' />"))))
((5137 82004 899308000) :INSERT
 (2 :CONTENTS "(:h1 \"Headings!\")

(:h2 \"Smaller headings!\")

(:p \"Paragraphs!\")

(:img :src \"/static/img/derpy-prepares-for-work.gif\" :style \"width: 250px;\")"))
((5137 82004 899315000) :INSERT
 (2 :VALUE
  ((:RESULT
    . "<h1>Headings!</h1><h2>Smaller headings!</h2><p>Paragraphs!</p><img src='/static/img/derpy-prepares-for-work.gif' style='width: 250px;' />"))))
((5137 82006 890042000) :INSERT (4 :CELL NIL))
((5137 82006 890054000) :INSERT (4 :CELL-TYPE :CL-WHO))
((5137 82006 890060000) :INSERT (4 :CONTENTS ""))
((5137 82006 890065000) :INSERT (4 :VALUE ""))
((5137 82008 465142000) :DELETE (3 :CELL-ORDER (2 1)))
((5137 82008 465186000) :INSERT (5 :CELL-ORDER (2 4 1)))
((5137 82021 302635000) :DELETE (4 :CONTENTS ""))
((5137 82021 302650000) :DELETE (4 :VALUE ""))
((5137 82021 302659000) :INSERT
 (4 :CONTENTS "(:h3 \"Ok, serious notes here...\")

(:b \"Terrain generation\")
(:ul
 (:li (:a :href \"http://en.wikipedia.org/wiki/Maze_generation_algorithm\" \"Maze generation on wikipedia\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Articles#Map\" \"Rogue Basin page\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm\" \"Dungeon Building Algorithm\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python\" \"Dungeon Builder in Python\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels\" \"Cellular Automata for Terrain\"))
 (:li (:a :href \"http://pixelenvy.ca/wa/ca_cave.html\" \"More cellular automata for terrain\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Abstract_Dungeons\" \"Abstract dungeons from RogueBasin\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern\" \"Cavern delving\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation\" \"BSP Dungeon gen\")))

(:br)

(:b \"Clojure\")
(:ul
 (:li (:a :href \"https://github.com/JonyEpsilon/gorilla-repl\" \"Gorilla Repl\"))
 (:li (:a :href \"https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer\" \"core.logic Primer\"))
 (:li (:a :href \"https://github.com/clojure/core.logic\" \"core.logic GitHub\"))
 (:li (:a :href \"http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html\" \"Namespace Primer\"))
 (:li (:a :href \"https://gist.github.com/ghoseb/287710\" \"NS cheat-sheet\")))

(:br)
(:b \"LightTable\")
(:ul
 (:li (:a :href \"https://github.com/darthdeus/LightTable-Ruby\" \"Ruby mode\")))

(:br)
(:b \"Misc...\")
(:ul
 (:li (:a :href \"http://code.google.com/p/key-mon/source/checkout\" \"KeyMon -- tool for showing keystrokes in screencasts\"))
 (:li (:a :href \"http://www.subtext-lang.org/\" \"Subtext Lang\"))
 (:li (:a :href \"http://byorgey.wordpress.com/catsters-guide-2/\" \"The Catsters\"))
 (:li (:a :href \"http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53\" \"Share Elm -- Line of Sight\"))
 (:li (:a :href \"http://codemirror.net/doc/manual.html#overview\" \"CodeMirror manual\"))
 (:li (:a :href \"https://github.com/nkmathew/yasi-sexp-indenter\" \"batch s-exp indenter\")))

(:br)"))
((5137 82021 302684000) :INSERT
 (4 :VALUE
  ((:RESULT
    . "<h3>Ok, serious notes here...</h3><b>Terrain generation</b><ul><li><a href='http://en.wikipedia.org/wiki/Maze_generation_algorithm'>Maze generation on wikipedia</a></li><li><a href='http://www.roguebasin.com/index.php?title=Articles#Map'>Rogue Basin page</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm'>Dungeon Building Algorithm</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python'>Dungeon Builder in Python</a></li><li><a href='http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels'>Cellular Automata for Terrain</a></li><li><a href='http://pixelenvy.ca/wa/ca_cave.html'>More cellular automata for terrain</a></li><li><a href='http://www.roguebasin.com/index.php?title=Abstract_Dungeons'>Abstract dungeons from RogueBasin</a></li><li><a href='http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern'>Cavern delving</a></li><li><a href='http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation'>BSP Dungeon gen</a></li></ul><br /><b>Clojure</b><ul><li><a href='https://github.com/JonyEpsilon/gorilla-repl'>Gorilla Repl</a></li><li><a href='https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer'>core.logic Primer</a></li><li><a href='https://github.com/clojure/core.logic'>core.logic GitHub</a></li><li><a href='http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html'>Namespace Primer</a></li><li><a href='https://gist.github.com/ghoseb/287710'>NS cheat-sheet</a></li></ul><br /><b>LightTable</b><ul><li><a href='https://github.com/darthdeus/LightTable-Ruby'>Ruby mode</a></li></ul><br /><b>Misc...</b><ul><li><a href='http://code.google.com/p/key-mon/source/checkout'>KeyMon -- tool for showing keystrokes in screencasts</a></li><li><a href='http://www.subtext-lang.org/'>Subtext Lang</a></li><li><a href='http://byorgey.wordpress.com/catsters-guide-2/'>The Catsters</a></li><li><a href='http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53'>Share Elm -- Line of Sight</a></li><li><a href='http://codemirror.net/doc/manual.html#overview'>CodeMirror manual</a></li><li><a href='https://github.com/nkmathew/yasi-sexp-indenter'>batch s-exp indenter</a></li></ul><br />"))))
((5137 82030 806603000) :DELETE (5 :CELL-ORDER (2 4 1)))
((5137 82030 806628000) :INSERT (6 :CELL-ORDER (2 1 4)))
((5137 82037 998946000) :DELETE (1 :CONTENTS ""))
((5137 82037 998964000) :DELETE (1 :VALUE ""))
((5137 82037 998972000) :INSERT
 (1 :CONTENTS ";; code!

(+ 2 3 4 5)"))
((5137 82037 998982000) :INSERT
 (1 :VALUE ((:RESULT ((INTEGER "14"))) (:STDOUT . ""))))
((5137 82044 83313000) :INSERT (7 :CELL NIL))
((5137 82044 83323000) :INSERT (7 :CELL-TYPE :COMMON-LISP))
((5137 82044 83326000) :INSERT (7 :CONTENTS ""))
((5137 82044 83335000) :INSERT (7 :VALUE ""))
((5137 82046 914493000) :DELETE (6 :CELL-ORDER (2 1 4)))
((5137 82046 914511000) :INSERT (8 :CELL-ORDER (2 1 4 7)))
((5137 82051 152379000) :DELETE (8 :CELL-ORDER (2 1 4 7)))
((5137 82051 152399000) :INSERT (9 :CELL-ORDER (2 1 7 4)))
((5137 82063 29256000) :DELETE (7 :CONTENTS ""))
((5137 82063 29271000) :DELETE (7 :VALUE ""))
((5137 82063 29277000) :INSERT
 (7 :CONTENTS ";; errors!

(+ 2 3 4 :test)"))
((5137 82063 29281000) :INSERT
 (7 :VALUE
  ((:RESULT
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 2 3 4 TEST)") (:DATUM . :TEST)
       (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . ""))))
((5137 82067 515719000) :INSERT (10 :CELL NIL))
((5137 82067 515731000) :INSERT (10 :CELL-TYPE :COMMON-LISP))
((5137 82067 515734000) :INSERT (10 :CONTENTS ""))
((5137 82067 515738000) :INSERT (10 :VALUE ""))
((5137 82071 562068000) :DELETE (9 :CELL-ORDER (2 1 7 4)))
((5137 82071 562083000) :INSERT (11 :CELL-ORDER (2 1 7 10 4)))
((5137 82129 200144000) :DELETE (10 :CONTENTS ""))
((5137 82129 200166000) :DELETE (10 :VALUE ""))
((5137 82129 200175000) :INSERT
 (10 :CONTENTS
  ";; The working forms get evaled when an error happens part-way through!
;; Also, we capture *standard-output*!

(+ 2 3)
(+ 3 4)
(format t \"This is a STDOUT message!\")
(+ 4 5)
(+ 6 :test)"))
((5137 82129 200184000) :INSERT
 (10 :VALUE
  ((:RESULT ((INTEGER "5")) ((INTEGER "7")) ((NULL "NIL")) ((INTEGER "9"))
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 6 TEST)") (:DATUM . :TEST) (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . "This is a STDOUT message!"))))
((5137 82151 791938000) :DELETE
 (10 :CONTENTS
  ";; The working forms get evaled when an error happens part-way through!
;; Also, we capture *standard-output*!

(+ 2 3)
(+ 3 4)
(format t \"This is a STDOUT message!\")
(+ 4 5)
(+ 6 :test)"))
((5137 82151 791962000) :DELETE
 (10 :VALUE
  ((:RESULT ((INTEGER "5")) ((INTEGER "7")) ((NULL "NIL")) ((INTEGER "9"))
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 6 TEST)") (:DATUM . :TEST) (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . "This is a STDOUT message!"))))
((5137 82151 791971000) :INSERT
 (10 :CONTENTS
  ";; The working forms get evaled when an error happens part-way through!
(+ 2 3)
(+ 3 4)
(+ 4 5)
(+ 6 :test)"))
((5137 82151 791979000) :INSERT
 (10 :VALUE
  ((:RESULT ((INTEGER "5")) ((INTEGER "7")) ((INTEGER "9"))
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 6 TEST)") (:DATUM . :TEST) (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . ""))))
((5137 82155 12627000) :INSERT (12 :CELL NIL))
((5137 82155 12637000) :INSERT (12 :CELL-TYPE :CL-WHO))
((5137 82155 12640000) :INSERT (12 :CONTENTS ""))
((5137 82155 12642000) :INSERT (12 :VALUE ""))
((5137 82158 276233000) :DELETE (12 :VALUE ""))
((5137 82158 276246000) :DELETE (12 :CONTENTS ""))
((5137 82158 276252000) :DELETE (12 :CELL-TYPE :CL-WHO))
((5137 82158 276257000) :DELETE (12 :CELL NIL))
((5137 82160 214971000) :INSERT (13 :CELL NIL))
((5137 82160 214992000) :INSERT (13 :CELL-TYPE :COMMON-LISP))
((5137 82160 214999000) :INSERT (13 :CONTENTS ""))
((5137 82160 215005000) :INSERT (13 :VALUE ""))
((5137 82162 935333000) :DELETE (11 :CELL-ORDER (2 1 7 10 4)))
((5137 82162 935349000) :INSERT (14 :CELL-ORDER (2 1 7 10 13 4)))
((5137 82226 623914000) :DELETE (13 :CONTENTS ""))
((5137 82226 623933000) :DELETE (13 :VALUE ""))
((5137 82226 623941000) :INSERT
 (13 :CONTENTS ";; We capture *standard-output*!

(format t \"Something something dark side\")"))
((5137 82226 623948000) :INSERT
 (13 :VALUE
  ((:RESULT ((NULL "NIL"))) (:STDOUT . "Something something dark side"))))
((5137 82244 813041000) :DELETE
 (13 :CONTENTS ";; We capture *standard-output*!

(format t \"Something something dark side\")"))
((5137 82244 813058000) :DELETE
 (13 :VALUE
  ((:RESULT ((NULL "NIL"))) (:STDOUT . "Something something dark side"))))
((5137 82244 813065000) :INSERT
 (13 :CONTENTS ";; We capture *standard-output*!

(format t \"Something something ~%dark side~%\")"))
((5137 82244 813070000) :INSERT
 (13 :VALUE
  ((:RESULT ((NULL "NIL")))
   (:STDOUT . "Something something 
dark side
"))))
((5137 82266 647011000) :DELETE
 (13 :CONTENTS ";; We capture *standard-output*!

(format t \"Something something ~%dark side~%\")"))
((5137 82266 647037000) :DELETE
 (13 :VALUE
  ((:RESULT ((NULL "NIL")))
   (:STDOUT . "Something something 
dark side
"))))
((5137 82266 647050000) :INSERT
 (13 :CONTENTS ";; We capture *standard-output*!

(format t \"Something something dark side.~%Also, multilines work.\")"))
((5137 82266 647059000) :INSERT
 (13 :VALUE
  ((:RESULT ((NULL "NIL")))
   (:STDOUT . "Something something dark side.
Also, multilines work."))))
((5137 82288 963853000) :DELETE
 (13 :CONTENTS ";; We capture *standard-output*!

(format t \"Something something dark side.~%Also, multilines work.\")"))
((5137 82288 963870000) :DELETE
 (13 :VALUE
  ((:RESULT ((NULL "NIL")))
   (:STDOUT . "Something something dark side.
Also, multilines work."))))
((5137 82288 963878000) :INSERT
 (13 :CONTENTS ";; We capture *standard-output*!

(format t \"Something something dark side.~%Also, multilines work here.~%Although if you print tons of lines, the output will get long.\")"))
((5137 82288 963885000) :INSERT
 (13 :VALUE
  ((:RESULT ((NULL "NIL")))
   (:STDOUT . "Something something dark side.
Also, multilines work here.
Although if you print tons of lines, the output will get long."))))
((5137 82300 702851000) :DELETE
 (4 :CONTENTS "(:h3 \"Ok, serious notes here...\")

(:b \"Terrain generation\")
(:ul
 (:li (:a :href \"http://en.wikipedia.org/wiki/Maze_generation_algorithm\" \"Maze generation on wikipedia\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Articles#Map\" \"Rogue Basin page\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm\" \"Dungeon Building Algorithm\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python\" \"Dungeon Builder in Python\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels\" \"Cellular Automata for Terrain\"))
 (:li (:a :href \"http://pixelenvy.ca/wa/ca_cave.html\" \"More cellular automata for terrain\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Abstract_Dungeons\" \"Abstract dungeons from RogueBasin\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern\" \"Cavern delving\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation\" \"BSP Dungeon gen\")))

(:br)

(:b \"Clojure\")
(:ul
 (:li (:a :href \"https://github.com/JonyEpsilon/gorilla-repl\" \"Gorilla Repl\"))
 (:li (:a :href \"https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer\" \"core.logic Primer\"))
 (:li (:a :href \"https://github.com/clojure/core.logic\" \"core.logic GitHub\"))
 (:li (:a :href \"http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html\" \"Namespace Primer\"))
 (:li (:a :href \"https://gist.github.com/ghoseb/287710\" \"NS cheat-sheet\")))

(:br)
(:b \"LightTable\")
(:ul
 (:li (:a :href \"https://github.com/darthdeus/LightTable-Ruby\" \"Ruby mode\")))

(:br)
(:b \"Misc...\")
(:ul
 (:li (:a :href \"http://code.google.com/p/key-mon/source/checkout\" \"KeyMon -- tool for showing keystrokes in screencasts\"))
 (:li (:a :href \"http://www.subtext-lang.org/\" \"Subtext Lang\"))
 (:li (:a :href \"http://byorgey.wordpress.com/catsters-guide-2/\" \"The Catsters\"))
 (:li (:a :href \"http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53\" \"Share Elm -- Line of Sight\"))
 (:li (:a :href \"http://codemirror.net/doc/manual.html#overview\" \"CodeMirror manual\"))
 (:li (:a :href \"https://github.com/nkmathew/yasi-sexp-indenter\" \"batch s-exp indenter\")))

(:br)"))
((5137 82300 702907000) :DELETE
 (4 :VALUE
  ((:RESULT
    . "<h3>Ok, serious notes here...</h3><b>Terrain generation</b><ul><li><a href='http://en.wikipedia.org/wiki/Maze_generation_algorithm'>Maze generation on wikipedia</a></li><li><a href='http://www.roguebasin.com/index.php?title=Articles#Map'>Rogue Basin page</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm'>Dungeon Building Algorithm</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python'>Dungeon Builder in Python</a></li><li><a href='http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels'>Cellular Automata for Terrain</a></li><li><a href='http://pixelenvy.ca/wa/ca_cave.html'>More cellular automata for terrain</a></li><li><a href='http://www.roguebasin.com/index.php?title=Abstract_Dungeons'>Abstract dungeons from RogueBasin</a></li><li><a href='http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern'>Cavern delving</a></li><li><a href='http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation'>BSP Dungeon gen</a></li></ul><br /><b>Clojure</b><ul><li><a href='https://github.com/JonyEpsilon/gorilla-repl'>Gorilla Repl</a></li><li><a href='https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer'>core.logic Primer</a></li><li><a href='https://github.com/clojure/core.logic'>core.logic GitHub</a></li><li><a href='http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html'>Namespace Primer</a></li><li><a href='https://gist.github.com/ghoseb/287710'>NS cheat-sheet</a></li></ul><br /><b>LightTable</b><ul><li><a href='https://github.com/darthdeus/LightTable-Ruby'>Ruby mode</a></li></ul><br /><b>Misc...</b><ul><li><a href='http://code.google.com/p/key-mon/source/checkout'>KeyMon -- tool for showing keystrokes in screencasts</a></li><li><a href='http://www.subtext-lang.org/'>Subtext Lang</a></li><li><a href='http://byorgey.wordpress.com/catsters-guide-2/'>The Catsters</a></li><li><a href='http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53'>Share Elm -- Line of Sight</a></li><li><a href='http://codemirror.net/doc/manual.html#overview'>CodeMirror manual</a></li><li><a href='https://github.com/nkmathew/yasi-sexp-indenter'>batch s-exp indenter</a></li></ul><br />"))))
((5137 82300 702964000) :INSERT
 (4 :CONTENTS "(:h3 \"Ok, serious notes now...\")

(:b \"Terrain generation\")
(:ul
 (:li (:a :href \"http://en.wikipedia.org/wiki/Maze_generation_algorithm\" \"Maze generation on wikipedia\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Articles#Map\" \"Rogue Basin page\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm\" \"Dungeon Building Algorithm\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python\" \"Dungeon Builder in Python\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels\" \"Cellular Automata for Terrain\"))
 (:li (:a :href \"http://pixelenvy.ca/wa/ca_cave.html\" \"More cellular automata for terrain\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Abstract_Dungeons\" \"Abstract dungeons from RogueBasin\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern\" \"Cavern delving\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation\" \"BSP Dungeon gen\")))

(:br)

(:b \"Clojure\")
(:ul
 (:li (:a :href \"https://github.com/JonyEpsilon/gorilla-repl\" \"Gorilla Repl\"))
 (:li (:a :href \"https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer\" \"core.logic Primer\"))
 (:li (:a :href \"https://github.com/clojure/core.logic\" \"core.logic GitHub\"))
 (:li (:a :href \"http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html\" \"Namespace Primer\"))
 (:li (:a :href \"https://gist.github.com/ghoseb/287710\" \"NS cheat-sheet\")))

(:br)
(:b \"LightTable\")
(:ul
 (:li (:a :href \"https://github.com/darthdeus/LightTable-Ruby\" \"Ruby mode\")))

(:br)
(:b \"Misc...\")
(:ul
 (:li (:a :href \"http://code.google.com/p/key-mon/source/checkout\" \"KeyMon -- tool for showing keystrokes in screencasts\"))
 (:li (:a :href \"http://www.subtext-lang.org/\" \"Subtext Lang\"))
 (:li (:a :href \"http://byorgey.wordpress.com/catsters-guide-2/\" \"The Catsters\"))
 (:li (:a :href \"http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53\" \"Share Elm -- Line of Sight\"))
 (:li (:a :href \"http://codemirror.net/doc/manual.html#overview\" \"CodeMirror manual\"))
 (:li (:a :href \"https://github.com/nkmathew/yasi-sexp-indenter\" \"batch s-exp indenter\")))

(:br)"))
((5137 82300 702991000) :INSERT
 (4 :VALUE
  ((:RESULT
    . "<h3>Ok, serious notes now...</h3><b>Terrain generation</b><ul><li><a href='http://en.wikipedia.org/wiki/Maze_generation_algorithm'>Maze generation on wikipedia</a></li><li><a href='http://www.roguebasin.com/index.php?title=Articles#Map'>Rogue Basin page</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm'>Dungeon Building Algorithm</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python'>Dungeon Builder in Python</a></li><li><a href='http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels'>Cellular Automata for Terrain</a></li><li><a href='http://pixelenvy.ca/wa/ca_cave.html'>More cellular automata for terrain</a></li><li><a href='http://www.roguebasin.com/index.php?title=Abstract_Dungeons'>Abstract dungeons from RogueBasin</a></li><li><a href='http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern'>Cavern delving</a></li><li><a href='http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation'>BSP Dungeon gen</a></li></ul><br /><b>Clojure</b><ul><li><a href='https://github.com/JonyEpsilon/gorilla-repl'>Gorilla Repl</a></li><li><a href='https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer'>core.logic Primer</a></li><li><a href='https://github.com/clojure/core.logic'>core.logic GitHub</a></li><li><a href='http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html'>Namespace Primer</a></li><li><a href='https://gist.github.com/ghoseb/287710'>NS cheat-sheet</a></li></ul><br /><b>LightTable</b><ul><li><a href='https://github.com/darthdeus/LightTable-Ruby'>Ruby mode</a></li></ul><br /><b>Misc...</b><ul><li><a href='http://code.google.com/p/key-mon/source/checkout'>KeyMon -- tool for showing keystrokes in screencasts</a></li><li><a href='http://www.subtext-lang.org/'>Subtext Lang</a></li><li><a href='http://byorgey.wordpress.com/catsters-guide-2/'>The Catsters</a></li><li><a href='http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53'>Share Elm -- Line of Sight</a></li><li><a href='http://codemirror.net/doc/manual.html#overview'>CodeMirror manual</a></li><li><a href='https://github.com/nkmathew/yasi-sexp-indenter'>batch s-exp indenter</a></li></ul><br />"))))
((5137 85845 935315000) :DELETE
 (2 :CONTENTS "(:h1 \"Headings!\")

(:h2 \"Smaller headings!\")

(:p \"Paragraphs!\")

(:img :src \"/static/img/derpy-prepares-for-work.gif\" :style \"width: 250px;\")"))
((5137 85845 935330000) :DELETE
 (2 :VALUE
  ((:RESULT
    . "<h1>Headings!</h1><h2>Smaller headings!</h2><p>Paragraphs!</p><img src='/static/img/derpy-prepares-for-work.gif' style='width: 250px;' />"))))
((5137 85845 935338000) :INSERT
 (2 :CONTENTS "(:h1 \"Headings!\")

(:h2 \"Smaller headings!\")

(:p \"Paragraphs!\")

(:img :src \"/static/img/derpy-prepares-for-work.gif\" :style \"width: 450px;\")"))
((5137 85845 935343000) :INSERT
 (2 :VALUE
  ((:RESULT
    . "<h1>Headings!</h1><h2>Smaller headings!</h2><p>Paragraphs!</p><img src='/static/img/derpy-prepares-for-work.gif' style='width: 450px;' />"))))
((5137 85858 47519000) :DELETE
 (2 :CONTENTS "(:h1 \"Headings!\")

(:h2 \"Smaller headings!\")

(:p \"Paragraphs!\")

(:img :src \"/static/img/derpy-prepares-for-work.gif\" :style \"width: 450px;\")"))
((5137 85858 47557000) :DELETE
 (2 :VALUE
  ((:RESULT
    . "<h1>Headings!</h1><h2>Smaller headings!</h2><p>Paragraphs!</p><img src='/static/img/derpy-prepares-for-work.gif' style='width: 450px;' />"))))
((5137 85858 47565000) :INSERT
 (2 :CONTENTS "(:h1 \"Headings!\")

(:h2 \"Smaller headings!\")

(:p \"Paragraphs!\")

(:img :src \"/static/img/derpy-prepares-for-work.gif\" :style \"width: 450px;\")

(:p \"Pictures!\")"))
((5137 85858 47570000) :INSERT
 (2 :VALUE
  ((:RESULT
    . "<h1>Headings!</h1><h2>Smaller headings!</h2><p>Paragraphs!</p><img src='/static/img/derpy-prepares-for-work.gif' style='width: 450px;' /><p>Pictures!</p>"))))
((5137 86048 978240000) :DELETE
 (10 :CONTENTS
  ";; The working forms get evaled when an error happens part-way through!
(+ 2 3)
(+ 3 4)
(+ 4 5)
(+ 6 :test)"))
((5137 86048 978278000) :DELETE
 (10 :VALUE
  ((:RESULT ((INTEGER "5")) ((INTEGER "7")) ((INTEGER "9"))
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 6 TEST)") (:DATUM . :TEST) (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . ""))))
((5137 86048 978287000) :INSERT
 (10 :CONTENTS
  ";; The working forms get evaled when an error happens part-way through!
(+ 2 3)
(+ 3 4)
(format t \"Blah!\")
(+ 4 5)
(+ 6 :test)"))
((5137 86048 978294000) :INSERT
 (10 :VALUE
  ((:RESULT ((INTEGER "5")) ((INTEGER "7")) ((NULL "NIL")) ((INTEGER "9"))
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 6 TEST)") (:DATUM . :TEST) (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . "Blah!"))))
((5137 86085 472229000) :DELETE
 (10 :CONTENTS
  ";; The working forms get evaled when an error happens part-way through!
(+ 2 3)
(+ 3 4)
(format t \"Blah!\")
(+ 4 5)
(+ 6 :test)"))
((5137 86085 472255000) :DELETE
 (10 :VALUE
  ((:RESULT ((INTEGER "5")) ((INTEGER "7")) ((NULL "NIL")) ((INTEGER "9"))
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 6 TEST)") (:DATUM . :TEST) (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . "Blah!"))))
((5137 86085 472263000) :INSERT
 (10 :CONTENTS
  ";; The working forms get evaled when an error happens part-way through!
(+ 2 3)
(+ 3 4)
(format t \"Also, we capture *standard-output*!~%Yes, even multiline *standard-output*!\")
(+ 4 5)
(+ 6 :test)"))
((5137 86085 472270000) :INSERT
 (10 :VALUE
  ((:RESULT ((INTEGER "5")) ((INTEGER "7")) ((NULL "NIL")) ((INTEGER "9"))
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 6 TEST)") (:DATUM . :TEST) (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . "Also, we capture *standard-output*!
Yes, even multiline *standard-output*!"))))
((5137 86122 573872000) :DELETE
 (10 :CONTENTS
  ";; The working forms get evaled when an error happens part-way through!
(+ 2 3)
(+ 3 4)
(format t \"Also, we capture *standard-output*!~%Yes, even multiline *standard-output*!\")
(+ 4 5)
(+ 6 :test)"))
((5137 86122 573888000) :DELETE
 (10 :VALUE
  ((:RESULT ((INTEGER "5")) ((INTEGER "7")) ((NULL "NIL")) ((INTEGER "9"))
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 6 TEST)") (:DATUM . :TEST) (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . "Also, we capture *standard-output*!
Yes, even multiline *standard-output*!"))))
((5137 86122 573895000) :INSERT
 (10 :CONTENTS
  ";; The working forms get evaled when an error happens part-way through!
(+ 2 3)
(+ 3 4)
(format t \"Also, we capture *standard-output*!~%Yes, even multiline *standard-output*!~%Though it will get long if you have lots of lines...\")
(+ 4 5)
(+ 6 :test)"))
((5137 86122 573901000) :INSERT
 (10 :VALUE
  ((:RESULT ((INTEGER "5")) ((INTEGER "7")) ((NULL "NIL")) ((INTEGER "9"))
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 6 TEST)") (:DATUM . :TEST) (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . "Also, we capture *standard-output*!
Yes, even multiline *standard-output*!
Though it will get long if you have lots of lines..."))))
((5137 86139 227645000) :DELETE
 (13 :VALUE
  ((:RESULT ((NULL "NIL")))
   (:STDOUT . "Something something dark side.
Also, multilines work here.
Although if you print tons of lines, the output will get long."))))
((5137 86139 227662000) :DELETE
 (13 :CONTENTS ";; We capture *standard-output*!

(format t \"Something something dark side.~%Also, multilines work here.~%Although if you print tons of lines, the output will get long.\")"))
((5137 86139 227672000) :DELETE (13 :CELL-TYPE :COMMON-LISP))
((5137 86139 227678000) :DELETE (13 :CELL NIL))
((5137 86171 453156000) :DELETE
 (10 :CONTENTS
  ";; The working forms get evaled when an error happens part-way through!
(+ 2 3)
(+ 3 4)
(format t \"Also, we capture *standard-output*!~%Yes, even multiline *standard-output*!~%Though it will get long if you have lots of lines...\")
(+ 4 5)
(+ 6 :test)"))
((5137 86171 453173000) :DELETE
 (10 :VALUE
  ((:RESULT ((INTEGER "5")) ((INTEGER "7")) ((NULL "NIL")) ((INTEGER "9"))
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 6 TEST)") (:DATUM . :TEST) (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . "Also, we capture *standard-output*!
Yes, even multiline *standard-output*!
Though it will get long if you have lots of lines..."))))
((5137 86171 453181000) :INSERT
 (10 :CONTENTS
  ";; The working forms get evaled when an error happens part-way through!
(+ 2 3)
(+ 3 4)
(format t \"Also, we capture *standard-output*!~%Yes, even multiline *standard-output*!~%Though it will get long if you have lots of lines...\")
(+ 4 5)
(values :yes :multiple :values :also :works!)
(+ 6 :test)"))
((5137 86171 453188000) :INSERT
 (10 :VALUE
  ((:RESULT ((INTEGER "5")) ((INTEGER "7")) ((NULL "NIL")) ((INTEGER "9"))
    ((KEYWORD ":YES") (KEYWORD ":MULTIPLE") (KEYWORD ":VALUES")
     (KEYWORD ":ALSO") (KEYWORD ":WORKS!"))
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 6 TEST)") (:DATUM . :TEST) (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . "Also, we capture *standard-output*!
Yes, even multiline *standard-output*!
Though it will get long if you have lots of lines..."))))
((5137 86194 55659000) :DELETE
 (10 :CONTENTS
  ";; The working forms get evaled when an error happens part-way through!
(+ 2 3)
(+ 3 4)
(format t \"Also, we capture *standard-output*!~%Yes, even multiline *standard-output*!~%Though it will get long if you have lots of lines...\")
(+ 4 5)
(values :yes :multiple :values :also :works!)
(+ 6 :test)"))
((5137 86194 55678000) :DELETE
 (10 :VALUE
  ((:RESULT ((INTEGER "5")) ((INTEGER "7")) ((NULL "NIL")) ((INTEGER "9"))
    ((KEYWORD ":YES") (KEYWORD ":MULTIPLE") (KEYWORD ":VALUES")
     (KEYWORD ":ALSO") (KEYWORD ":WORKS!"))
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 6 TEST)") (:DATUM . :TEST) (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . "Also, we capture *standard-output*!
Yes, even multiline *standard-output*!
Though it will get long if you have lots of lines..."))))
((5137 86194 55686000) :INSERT
 (10 :CONTENTS
  ";; The working forms get evaled when an error happens part-way through!
(+ 2 3)
(+ 3 4)
(format t \"Also, we capture *standard-output*!~%Yes, even multiline *standard-output*!~%Though it will get long if you have lots of lines...\")
(+ 4 5)
(values :yes :multiple :values :also :work!)
(+ 6 :test)"))
((5137 86194 55693000) :INSERT
 (10 :VALUE
  ((:RESULT ((INTEGER "5")) ((INTEGER "7")) ((NULL "NIL")) ((INTEGER "9"))
    ((KEYWORD ":YES") (KEYWORD ":MULTIPLE") (KEYWORD ":VALUES")
     (KEYWORD ":ALSO") (KEYWORD ":WORK!"))
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 6 TEST)") (:DATUM . :TEST) (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . "Also, we capture *standard-output*!
Yes, even multiline *standard-output*!
Though it will get long if you have lots of lines..."))))
((5138 1047 194509000) :DELETE
 (1 :CONTENTS ";; code!

(+ 2 3 4 5)"))
((5138 1047 194536000) :DELETE
 (1 :VALUE ((:RESULT ((INTEGER "14"))) (:STDOUT . ""))))
((5138 1047 194544000) :INSERT
 (1 :CONTENTS ";; code!

(format t \"Blah!\")

(+ 2 3 4 5)"))
((5138 1047 194548000) :INSERT
 (1 :VALUE ((:RESULT ((INTEGER "14"))) (:STDOUT . "Blah!"))))
((5138 1060 568207000) :INSERT (15 :CELL NIL))
((5138 1060 568218000) :INSERT (15 :CELL-TYPE :COMMON-LISP))
((5138 1060 568221000) :INSERT (15 :CONTENTS ""))
((5138 1060 568224000) :INSERT (15 :VALUE ""))
((5138 1063 941108000) :DELETE (14 :CELL-ORDER (2 1 7 10 13 4)))
((5138 1063 941125000) :INSERT (16 :CELL-ORDER (2 1 7 10 15 4)))
((5138 1069 165847000) :DELETE (16 :CELL-ORDER (2 1 7 10 15 4)))
((5138 1069 165861000) :INSERT (17 :CELL-ORDER (2 1 7 15 10 4)))
((5138 1076 72281000) :DELETE (17 :CELL-ORDER (2 1 7 15 10 4)))
((5138 1076 72295000) :INSERT (18 :CELL-ORDER (2 1 15 7 10 4)))
((5138 1084 630810000) :DELETE
 (1 :CONTENTS ";; code!

(format t \"Blah!\")

(+ 2 3 4 5)"))
((5138 1084 630825000) :DELETE
 (1 :VALUE ((:RESULT ((INTEGER "14"))) (:STDOUT . "Blah!"))))
((5138 1084 630831000) :INSERT
 (1 :CONTENTS ";; code!

(+ 2 3 4 5)"))
((5138 1084 630836000) :INSERT
 (1 :VALUE ((:RESULT ((INTEGER "14"))) (:STDOUT . ""))))
((5138 1110 87087000) :DELETE (15 :CONTENTS ""))
((5138 1110 87107000) :DELETE (15 :VALUE ""))
((5138 1110 87116000) :INSERT
 (15 :CONTENTS
  "(format t \"Standard output capture!~%Yes, even with multiple lines!\")"))
((5138 1110 87123000) :INSERT
 (15 :VALUE
  ((:RESULT ((NULL "NIL")))
   (:STDOUT . "Standard output capture!
Yes, even with multiple lines!"))))
((5138 1118 75317000) :DELETE
 (10 :CONTENTS
  ";; The working forms get evaled when an error happens part-way through!
(+ 2 3)
(+ 3 4)
(format t \"Also, we capture *standard-output*!~%Yes, even multiline *standard-output*!~%Though it will get long if you have lots of lines...\")
(+ 4 5)
(values :yes :multiple :values :also :work!)
(+ 6 :test)"))
((5138 1118 75341000) :DELETE
 (10 :VALUE
  ((:RESULT ((INTEGER "5")) ((INTEGER "7")) ((NULL "NIL")) ((INTEGER "9"))
    ((KEYWORD ":YES") (KEYWORD ":MULTIPLE") (KEYWORD ":VALUES")
     (KEYWORD ":ALSO") (KEYWORD ":WORK!"))
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 6 TEST)") (:DATUM . :TEST) (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . "Also, we capture *standard-output*!
Yes, even multiline *standard-output*!
Though it will get long if you have lots of lines..."))))
((5138 1118 75352000) :INSERT
 (10 :CONTENTS
  ";; The working forms get evaled when an error happens part-way through!
(+ 2 3)
(+ 3 4)
(+ 4 5)
(values :yes :multiple :values :also :work!)
(+ 6 :test)"))
((5138 1118 75359000) :INSERT
 (10 :VALUE
  ((:RESULT ((INTEGER "5")) ((INTEGER "7")) ((INTEGER "9"))
    ((KEYWORD ":YES") (KEYWORD ":MULTIPLE") (KEYWORD ":VALUES")
     (KEYWORD ":ALSO") (KEYWORD ":WORK!"))
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 6 TEST)") (:DATUM . :TEST) (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . ""))))
((5138 4178 894699000) :INSERT (19 :CELL NIL))
((5138 4178 894742000) :INSERT (19 :CELL-TYPE :CL-WHO))
((5138 4178 894745000) :INSERT (19 :CONTENTS ""))
((5138 4178 894748000) :INSERT (19 :VALUE ""))
((5138 4310 868099000) :DELETE
 (4 :CONTENTS "(:h3 \"Ok, serious notes now...\")

(:b \"Terrain generation\")
(:ul
 (:li (:a :href \"http://en.wikipedia.org/wiki/Maze_generation_algorithm\" \"Maze generation on wikipedia\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Articles#Map\" \"Rogue Basin page\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm\" \"Dungeon Building Algorithm\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python\" \"Dungeon Builder in Python\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels\" \"Cellular Automata for Terrain\"))
 (:li (:a :href \"http://pixelenvy.ca/wa/ca_cave.html\" \"More cellular automata for terrain\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Abstract_Dungeons\" \"Abstract dungeons from RogueBasin\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern\" \"Cavern delving\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation\" \"BSP Dungeon gen\")))

(:br)

(:b \"Clojure\")
(:ul
 (:li (:a :href \"https://github.com/JonyEpsilon/gorilla-repl\" \"Gorilla Repl\"))
 (:li (:a :href \"https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer\" \"core.logic Primer\"))
 (:li (:a :href \"https://github.com/clojure/core.logic\" \"core.logic GitHub\"))
 (:li (:a :href \"http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html\" \"Namespace Primer\"))
 (:li (:a :href \"https://gist.github.com/ghoseb/287710\" \"NS cheat-sheet\")))

(:br)
(:b \"LightTable\")
(:ul
 (:li (:a :href \"https://github.com/darthdeus/LightTable-Ruby\" \"Ruby mode\")))

(:br)
(:b \"Misc...\")
(:ul
 (:li (:a :href \"http://code.google.com/p/key-mon/source/checkout\" \"KeyMon -- tool for showing keystrokes in screencasts\"))
 (:li (:a :href \"http://www.subtext-lang.org/\" \"Subtext Lang\"))
 (:li (:a :href \"http://byorgey.wordpress.com/catsters-guide-2/\" \"The Catsters\"))
 (:li (:a :href \"http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53\" \"Share Elm -- Line of Sight\"))
 (:li (:a :href \"http://codemirror.net/doc/manual.html#overview\" \"CodeMirror manual\"))
 (:li (:a :href \"https://github.com/nkmathew/yasi-sexp-indenter\" \"batch s-exp indenter\")))

(:br)"))
((5138 4310 868162000) :DELETE
 (4 :VALUE
  ((:RESULT
    . "<h3>Ok, serious notes now...</h3><b>Terrain generation</b><ul><li><a href='http://en.wikipedia.org/wiki/Maze_generation_algorithm'>Maze generation on wikipedia</a></li><li><a href='http://www.roguebasin.com/index.php?title=Articles#Map'>Rogue Basin page</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm'>Dungeon Building Algorithm</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python'>Dungeon Builder in Python</a></li><li><a href='http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels'>Cellular Automata for Terrain</a></li><li><a href='http://pixelenvy.ca/wa/ca_cave.html'>More cellular automata for terrain</a></li><li><a href='http://www.roguebasin.com/index.php?title=Abstract_Dungeons'>Abstract dungeons from RogueBasin</a></li><li><a href='http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern'>Cavern delving</a></li><li><a href='http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation'>BSP Dungeon gen</a></li></ul><br /><b>Clojure</b><ul><li><a href='https://github.com/JonyEpsilon/gorilla-repl'>Gorilla Repl</a></li><li><a href='https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer'>core.logic Primer</a></li><li><a href='https://github.com/clojure/core.logic'>core.logic GitHub</a></li><li><a href='http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html'>Namespace Primer</a></li><li><a href='https://gist.github.com/ghoseb/287710'>NS cheat-sheet</a></li></ul><br /><b>LightTable</b><ul><li><a href='https://github.com/darthdeus/LightTable-Ruby'>Ruby mode</a></li></ul><br /><b>Misc...</b><ul><li><a href='http://code.google.com/p/key-mon/source/checkout'>KeyMon -- tool for showing keystrokes in screencasts</a></li><li><a href='http://www.subtext-lang.org/'>Subtext Lang</a></li><li><a href='http://byorgey.wordpress.com/catsters-guide-2/'>The Catsters</a></li><li><a href='http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53'>Share Elm -- Line of Sight</a></li><li><a href='http://codemirror.net/doc/manual.html#overview'>CodeMirror manual</a></li><li><a href='https://github.com/nkmathew/yasi-sexp-indenter'>batch s-exp indenter</a></li></ul><br />"))))
((5138 4310 868199000) :INSERT
 (4 :CONTENTS "(:h3 \"Ok, serious notes now...\")

(:b \"Terrain generation\")
(:ul
 (:li (:a :href \"http://en.wikipedia.org/wiki/Maze_generation_algorithm\" \"Maze generation on wikipedia\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Articles#Map\" \"Rogue Basin page\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm\" \"Dungeon Building Algorithm\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python\" \"Dungeon Builder in Python\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels\" \"Cellular Automata for Terrain\"))
 (:li (:a :href \"http://pixelenvy.ca/wa/ca_cave.html\" \"More cellular automata for terrain\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Abstract_Dungeons\" \"Abstract dungeons from RogueBasin\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern\" \"Cavern delving\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation\" \"BSP Dungeon gen\")))

(:br)

(:b \"Clojure\")
(:ul
 (:li (:a :href \"https://github.com/JonyEpsilon/gorilla-repl\" \"Gorilla Repl\"))
 (:li (:a :href \"https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer\" \"core.logic Primer\"))
 (:li (:a :href \"https://github.com/clojure/core.logic\" \"core.logic GitHub\"))
 (:li (:a :href \"http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html\" \"Namespace Primer\"))
 (:li (:a :href \"https://gist.github.com/ghoseb/287710\" \"NS cheat-sheet\")))

(:br)
(:b \"LightTable\")
(:ul
 (:li (:a :href \"https://github.com/darthdeus/LightTable-Ruby\" \"Ruby mode\")))

(:br)
(:b \"Misc...\")
(:ul
 (:li (:a :href \"http://code.google.com/p/key-mon/source/checkout\" \"KeyMon -- tool for showing keystrokes in screencasts\"))
 (:li (:a :href \"http://www.subtext-lang.org/\" \"Subtext Lang\"))
 (:li (:a :href \"http://byorgey.wordpress.com/catsters-guide-2/\" \"The Catsters\"))
 (:li (:a :href \"http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53\" \"Share Elm -- Line of Sight\"))
 (:li (:a :href \"http://codemirror.net/doc/manual.html#overview\" \"CodeMirror manual\"))
 (:li (:a :href \"https://github.com/nkmathew/yasi-sexp-indenter\" \"batch s-exp indenter\")))

(:br)"))
((5138 4310 868219000) :INSERT
 (4 :VALUE
  ((:RESULT
    . "<h3>Ok, serious notes now...</h3><b>Terrain generation</b><ul><li><a href='http://en.wikipedia.org/wiki/Maze_generation_algorithm'>Maze generation on wikipedia</a></li><li><a href='http://www.roguebasin.com/index.php?title=Articles#Map'>Rogue Basin page</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm'>Dungeon Building Algorithm</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python'>Dungeon Builder in Python</a></li><li><a href='http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels'>Cellular Automata for Terrain</a></li><li><a href='http://pixelenvy.ca/wa/ca_cave.html'>More cellular automata for terrain</a></li><li><a href='http://www.roguebasin.com/index.php?title=Abstract_Dungeons'>Abstract dungeons from RogueBasin</a></li><li><a href='http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern'>Cavern delving</a></li><li><a href='http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation'>BSP Dungeon gen</a></li></ul><br /><b>Clojure</b><ul><li><a href='https://github.com/JonyEpsilon/gorilla-repl'>Gorilla Repl</a></li><li><a href='https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer'>core.logic Primer</a></li><li><a href='https://github.com/clojure/core.logic'>core.logic GitHub</a></li><li><a href='http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html'>Namespace Primer</a></li><li><a href='https://gist.github.com/ghoseb/287710'>NS cheat-sheet</a></li></ul><br /><b>LightTable</b><ul><li><a href='https://github.com/darthdeus/LightTable-Ruby'>Ruby mode</a></li></ul><br /><b>Misc...</b><ul><li><a href='http://code.google.com/p/key-mon/source/checkout'>KeyMon -- tool for showing keystrokes in screencasts</a></li><li><a href='http://www.subtext-lang.org/'>Subtext Lang</a></li><li><a href='http://byorgey.wordpress.com/catsters-guide-2/'>The Catsters</a></li><li><a href='http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53'>Share Elm -- Line of Sight</a></li><li><a href='http://codemirror.net/doc/manual.html#overview'>CodeMirror manual</a></li><li><a href='https://github.com/nkmathew/yasi-sexp-indenter'>batch s-exp indenter</a></li></ul><br />"))))
((5138 4317 258558000) :DELETE
 (4 :CONTENTS "(:h3 \"Ok, serious notes now...\")

(:b \"Terrain generation\")
(:ul
 (:li (:a :href \"http://en.wikipedia.org/wiki/Maze_generation_algorithm\" \"Maze generation on wikipedia\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Articles#Map\" \"Rogue Basin page\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm\" \"Dungeon Building Algorithm\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python\" \"Dungeon Builder in Python\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels\" \"Cellular Automata for Terrain\"))
 (:li (:a :href \"http://pixelenvy.ca/wa/ca_cave.html\" \"More cellular automata for terrain\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Abstract_Dungeons\" \"Abstract dungeons from RogueBasin\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern\" \"Cavern delving\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation\" \"BSP Dungeon gen\")))

(:br)

(:b \"Clojure\")
(:ul
 (:li (:a :href \"https://github.com/JonyEpsilon/gorilla-repl\" \"Gorilla Repl\"))
 (:li (:a :href \"https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer\" \"core.logic Primer\"))
 (:li (:a :href \"https://github.com/clojure/core.logic\" \"core.logic GitHub\"))
 (:li (:a :href \"http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html\" \"Namespace Primer\"))
 (:li (:a :href \"https://gist.github.com/ghoseb/287710\" \"NS cheat-sheet\")))

(:br)
(:b \"LightTable\")
(:ul
 (:li (:a :href \"https://github.com/darthdeus/LightTable-Ruby\" \"Ruby mode\")))

(:br)
(:b \"Misc...\")
(:ul
 (:li (:a :href \"http://code.google.com/p/key-mon/source/checkout\" \"KeyMon -- tool for showing keystrokes in screencasts\"))
 (:li (:a :href \"http://www.subtext-lang.org/\" \"Subtext Lang\"))
 (:li (:a :href \"http://byorgey.wordpress.com/catsters-guide-2/\" \"The Catsters\"))
 (:li (:a :href \"http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53\" \"Share Elm -- Line of Sight\"))
 (:li (:a :href \"http://codemirror.net/doc/manual.html#overview\" \"CodeMirror manual\"))
 (:li (:a :href \"https://github.com/nkmathew/yasi-sexp-indenter\" \"batch s-exp indenter\")))

(:br)"))
((5138 4317 258601000) :DELETE
 (4 :VALUE
  ((:RESULT
    . "<h3>Ok, serious notes now...</h3><b>Terrain generation</b><ul><li><a href='http://en.wikipedia.org/wiki/Maze_generation_algorithm'>Maze generation on wikipedia</a></li><li><a href='http://www.roguebasin.com/index.php?title=Articles#Map'>Rogue Basin page</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm'>Dungeon Building Algorithm</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python'>Dungeon Builder in Python</a></li><li><a href='http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels'>Cellular Automata for Terrain</a></li><li><a href='http://pixelenvy.ca/wa/ca_cave.html'>More cellular automata for terrain</a></li><li><a href='http://www.roguebasin.com/index.php?title=Abstract_Dungeons'>Abstract dungeons from RogueBasin</a></li><li><a href='http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern'>Cavern delving</a></li><li><a href='http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation'>BSP Dungeon gen</a></li></ul><br /><b>Clojure</b><ul><li><a href='https://github.com/JonyEpsilon/gorilla-repl'>Gorilla Repl</a></li><li><a href='https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer'>core.logic Primer</a></li><li><a href='https://github.com/clojure/core.logic'>core.logic GitHub</a></li><li><a href='http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html'>Namespace Primer</a></li><li><a href='https://gist.github.com/ghoseb/287710'>NS cheat-sheet</a></li></ul><br /><b>LightTable</b><ul><li><a href='https://github.com/darthdeus/LightTable-Ruby'>Ruby mode</a></li></ul><br /><b>Misc...</b><ul><li><a href='http://code.google.com/p/key-mon/source/checkout'>KeyMon -- tool for showing keystrokes in screencasts</a></li><li><a href='http://www.subtext-lang.org/'>Subtext Lang</a></li><li><a href='http://byorgey.wordpress.com/catsters-guide-2/'>The Catsters</a></li><li><a href='http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53'>Share Elm -- Line of Sight</a></li><li><a href='http://codemirror.net/doc/manual.html#overview'>CodeMirror manual</a></li><li><a href='https://github.com/nkmathew/yasi-sexp-indenter'>batch s-exp indenter</a></li></ul><br />"))))
((5138 4317 258635000) :INSERT
 (4 :CONTENTS "(:h3 \"Ok, serious notes now...\")

(:b \"Terrain generation\")
(:ul
 (:li (:a :href \"http://en.wikipedia.org/wiki/Maze_generation_algorithm\" \"Maze generation on wikipedia\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Articles#Map\" \"Rogue Basin page\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm\" \"Dungeon Building Algorithm\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python\" \"Dungeon Builder in Python\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels\" \"Cellular Automata for Terrain\"))
 (:li (:a :href \"http://pixelenvy.ca/wa/ca_cave.html\" \"More cellular automata for terrain\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Abstract_Dungeons\" \"Abstract dungeons from RogueBasin\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern\" \"Cavern delving\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation\" \"BSP Dungeon gen\")))

(:br)

(:b \"Clojure\")
(:ul
 (:li (:a :href \"https://github.com/JonyEpsilon/gorilla-repl\" \"Gorilla Repl\"))
 (:li (:a :href \"https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer\" \"core.logic Primer\"))
 (:li (:a :href \"https://github.com/clojure/core.logic\" \"core.logic GitHub\"))
 (:li (:a :href \"http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html\" \"Namespace Primer\"))
 (:li (:a :href \"https://gist.github.com/ghoseb/287710\" \"NS cheat-sheet\")))

(:br)
(:b \"LightTable\")
(:ul
 (:li (:a :href \"https://github.com/darthdeus/LightTable-Ruby\" \"Ruby mode\")))

(:br)
(:b \"Misc...\")
(:ul
 (:li (:a :href \"http://code.google.com/p/key-mon/source/checkout\" \"KeyMon -- tool for showing keystrokes in screencasts\"))
 (:li (:a :href \"http://www.subtext-lang.org/\" \"Subtext Lang\"))
 (:li (:a :href \"http://byorgey.wordpress.com/catsters-guide-2/\" \"The Catsters\"))
 (:li (:a :href \"http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53\" \"Share Elm -- Line of Sight\"))
 (:li (:a :href \"http://codemirror.net/doc/manual.html#overview\" \"CodeMirror manual\"))
 (:li (:a :href \"https://github.com/nkmathew/yasi-sexp-indenter\" \"batch s-exp indenter test\")))

(:br)"))
((5138 4317 258653000) :INSERT
 (4 :VALUE
  ((:RESULT
    . "<h3>Ok, serious notes now...</h3><b>Terrain generation</b><ul><li><a href='http://en.wikipedia.org/wiki/Maze_generation_algorithm'>Maze generation on wikipedia</a></li><li><a href='http://www.roguebasin.com/index.php?title=Articles#Map'>Rogue Basin page</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm'>Dungeon Building Algorithm</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python'>Dungeon Builder in Python</a></li><li><a href='http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels'>Cellular Automata for Terrain</a></li><li><a href='http://pixelenvy.ca/wa/ca_cave.html'>More cellular automata for terrain</a></li><li><a href='http://www.roguebasin.com/index.php?title=Abstract_Dungeons'>Abstract dungeons from RogueBasin</a></li><li><a href='http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern'>Cavern delving</a></li><li><a href='http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation'>BSP Dungeon gen</a></li></ul><br /><b>Clojure</b><ul><li><a href='https://github.com/JonyEpsilon/gorilla-repl'>Gorilla Repl</a></li><li><a href='https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer'>core.logic Primer</a></li><li><a href='https://github.com/clojure/core.logic'>core.logic GitHub</a></li><li><a href='http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html'>Namespace Primer</a></li><li><a href='https://gist.github.com/ghoseb/287710'>NS cheat-sheet</a></li></ul><br /><b>LightTable</b><ul><li><a href='https://github.com/darthdeus/LightTable-Ruby'>Ruby mode</a></li></ul><br /><b>Misc...</b><ul><li><a href='http://code.google.com/p/key-mon/source/checkout'>KeyMon -- tool for showing keystrokes in screencasts</a></li><li><a href='http://www.subtext-lang.org/'>Subtext Lang</a></li><li><a href='http://byorgey.wordpress.com/catsters-guide-2/'>The Catsters</a></li><li><a href='http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53'>Share Elm -- Line of Sight</a></li><li><a href='http://codemirror.net/doc/manual.html#overview'>CodeMirror manual</a></li><li><a href='https://github.com/nkmathew/yasi-sexp-indenter'>batch s-exp indenter test</a></li></ul><br />"))))
((5138 4408 818414000) :DELETE (19 :VALUE ""))
((5138 4408 818429000) :DELETE (19 :CONTENTS ""))
((5138 4408 818435000) :DELETE (19 :CELL-TYPE :CL-WHO))
((5138 4408 818441000) :DELETE (19 :CELL NIL))
((5138 4430 875508000) :DELETE
 (4 :CONTENTS "(:h3 \"Ok, serious notes now...\")

(:b \"Terrain generation\")
(:ul
 (:li (:a :href \"http://en.wikipedia.org/wiki/Maze_generation_algorithm\" \"Maze generation on wikipedia\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Articles#Map\" \"Rogue Basin page\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm\" \"Dungeon Building Algorithm\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python\" \"Dungeon Builder in Python\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels\" \"Cellular Automata for Terrain\"))
 (:li (:a :href \"http://pixelenvy.ca/wa/ca_cave.html\" \"More cellular automata for terrain\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Abstract_Dungeons\" \"Abstract dungeons from RogueBasin\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern\" \"Cavern delving\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation\" \"BSP Dungeon gen\")))

(:br)

(:b \"Clojure\")
(:ul
 (:li (:a :href \"https://github.com/JonyEpsilon/gorilla-repl\" \"Gorilla Repl\"))
 (:li (:a :href \"https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer\" \"core.logic Primer\"))
 (:li (:a :href \"https://github.com/clojure/core.logic\" \"core.logic GitHub\"))
 (:li (:a :href \"http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html\" \"Namespace Primer\"))
 (:li (:a :href \"https://gist.github.com/ghoseb/287710\" \"NS cheat-sheet\")))

(:br)
(:b \"LightTable\")
(:ul
 (:li (:a :href \"https://github.com/darthdeus/LightTable-Ruby\" \"Ruby mode\")))

(:br)
(:b \"Misc...\")
(:ul
 (:li (:a :href \"http://code.google.com/p/key-mon/source/checkout\" \"KeyMon -- tool for showing keystrokes in screencasts\"))
 (:li (:a :href \"http://www.subtext-lang.org/\" \"Subtext Lang\"))
 (:li (:a :href \"http://byorgey.wordpress.com/catsters-guide-2/\" \"The Catsters\"))
 (:li (:a :href \"http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53\" \"Share Elm -- Line of Sight\"))
 (:li (:a :href \"http://codemirror.net/doc/manual.html#overview\" \"CodeMirror manual\"))
 (:li (:a :href \"https://github.com/nkmathew/yasi-sexp-indenter\" \"batch s-exp indenter test\")))

(:br)"))
((5138 4430 875564000) :DELETE
 (4 :VALUE
  ((:RESULT
    . "<h3>Ok, serious notes now...</h3><b>Terrain generation</b><ul><li><a href='http://en.wikipedia.org/wiki/Maze_generation_algorithm'>Maze generation on wikipedia</a></li><li><a href='http://www.roguebasin.com/index.php?title=Articles#Map'>Rogue Basin page</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm'>Dungeon Building Algorithm</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python'>Dungeon Builder in Python</a></li><li><a href='http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels'>Cellular Automata for Terrain</a></li><li><a href='http://pixelenvy.ca/wa/ca_cave.html'>More cellular automata for terrain</a></li><li><a href='http://www.roguebasin.com/index.php?title=Abstract_Dungeons'>Abstract dungeons from RogueBasin</a></li><li><a href='http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern'>Cavern delving</a></li><li><a href='http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation'>BSP Dungeon gen</a></li></ul><br /><b>Clojure</b><ul><li><a href='https://github.com/JonyEpsilon/gorilla-repl'>Gorilla Repl</a></li><li><a href='https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer'>core.logic Primer</a></li><li><a href='https://github.com/clojure/core.logic'>core.logic GitHub</a></li><li><a href='http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html'>Namespace Primer</a></li><li><a href='https://gist.github.com/ghoseb/287710'>NS cheat-sheet</a></li></ul><br /><b>LightTable</b><ul><li><a href='https://github.com/darthdeus/LightTable-Ruby'>Ruby mode</a></li></ul><br /><b>Misc...</b><ul><li><a href='http://code.google.com/p/key-mon/source/checkout'>KeyMon -- tool for showing keystrokes in screencasts</a></li><li><a href='http://www.subtext-lang.org/'>Subtext Lang</a></li><li><a href='http://byorgey.wordpress.com/catsters-guide-2/'>The Catsters</a></li><li><a href='http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53'>Share Elm -- Line of Sight</a></li><li><a href='http://codemirror.net/doc/manual.html#overview'>CodeMirror manual</a></li><li><a href='https://github.com/nkmathew/yasi-sexp-indenter'>batch s-exp indenter test</a></li></ul><br />"))))
((5138 4430 875598000) :INSERT
 (4 :CONTENTS "(:h3 \"Ok, serious notes now...\")

(:b \"Terrain generation\")
(:ul
 (:li (:a :href \"http://en.wikipedia.org/wiki/Maze_generation_algorithm\" \"Maze generation on wikipedia\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Articles#Map\" \"Rogue Basin page\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm\" \"Dungeon Building Algorithm\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python\" \"Dungeon Builder in Python\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels\" \"Cellular Automata for Terrain\"))
 (:li (:a :href \"http://pixelenvy.ca/wa/ca_cave.html\" \"More cellular automata for terrain\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Abstract_Dungeons\" \"Abstract dungeons from RogueBasin\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern\" \"Cavern delving\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation\" \"BSP Dungeon gen\")))

(:br)

(:b \"Clojure\")
(:ul
 (:li (:a :href \"https://github.com/JonyEpsilon/gorilla-repl\" \"Gorilla Repl\"))
 (:li (:a :href \"https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer\" \"core.logic Primer\"))
 (:li (:a :href \"https://github.com/clojure/core.logic\" \"core.logic GitHub\"))
 (:li (:a :href \"http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html\" \"Namespace Primer\"))
 (:li (:a :href \"https://gist.github.com/ghoseb/287710\" \"NS cheat-sheet\")))

(:br)
(:b \"LightTable\")
(:ul
 (:li (:a :href \"https://github.com/darthdeus/LightTable-Ruby\" \"Ruby mode\")))

(:br)
(:b \"Misc...\")
(:ul
 (:li (:a :href \"http://code.google.com/p/key-mon/source/checkout\" \"KeyMon -- tool for showing keystrokes in screencasts\"))
 (:li (:a :href \"http://www.subtext-lang.org/\" \"Subtext Lang\"))
 (:li (:a :href \"http://byorgey.wordpress.com/catsters-guide-2/\" \"The Catsters\"))
 (:li (:a :href \"http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53\" \"Share Elm -- Line of Sight\"))
 (:li (:a :href \"http://codemirror.net/doc/manual.html#overview\" \"CodeMirror manual\"))
 (:li (:a :href \"https://github.com/nkmathew/yasi-sexp-indenter\" \"batch s-exp indenter test\")))

(:br)"))
((5138 4430 875616000) :INSERT
 (4 :VALUE
  ((:RESULT
    . "<h3>Ok, serious notes now...</h3><b>Terrain generation</b><ul><li><a href='http://en.wikipedia.org/wiki/Maze_generation_algorithm'>Maze generation on wikipedia</a></li><li><a href='http://www.roguebasin.com/index.php?title=Articles#Map'>Rogue Basin page</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm'>Dungeon Building Algorithm</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python'>Dungeon Builder in Python</a></li><li><a href='http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels'>Cellular Automata for Terrain</a></li><li><a href='http://pixelenvy.ca/wa/ca_cave.html'>More cellular automata for terrain</a></li><li><a href='http://www.roguebasin.com/index.php?title=Abstract_Dungeons'>Abstract dungeons from RogueBasin</a></li><li><a href='http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern'>Cavern delving</a></li><li><a href='http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation'>BSP Dungeon gen</a></li></ul><br /><b>Clojure</b><ul><li><a href='https://github.com/JonyEpsilon/gorilla-repl'>Gorilla Repl</a></li><li><a href='https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer'>core.logic Primer</a></li><li><a href='https://github.com/clojure/core.logic'>core.logic GitHub</a></li><li><a href='http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html'>Namespace Primer</a></li><li><a href='https://gist.github.com/ghoseb/287710'>NS cheat-sheet</a></li></ul><br /><b>LightTable</b><ul><li><a href='https://github.com/darthdeus/LightTable-Ruby'>Ruby mode</a></li></ul><br /><b>Misc...</b><ul><li><a href='http://code.google.com/p/key-mon/source/checkout'>KeyMon -- tool for showing keystrokes in screencasts</a></li><li><a href='http://www.subtext-lang.org/'>Subtext Lang</a></li><li><a href='http://byorgey.wordpress.com/catsters-guide-2/'>The Catsters</a></li><li><a href='http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53'>Share Elm -- Line of Sight</a></li><li><a href='http://codemirror.net/doc/manual.html#overview'>CodeMirror manual</a></li><li><a href='https://github.com/nkmathew/yasi-sexp-indenter'>batch s-exp indenter test</a></li></ul><br />"))))
((5138 5181 116724000) :DELETE
 (4 :CONTENTS "(:h3 \"Ok, serious notes now...\")

(:b \"Terrain generation\")
(:ul
 (:li (:a :href \"http://en.wikipedia.org/wiki/Maze_generation_algorithm\" \"Maze generation on wikipedia\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Articles#Map\" \"Rogue Basin page\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm\" \"Dungeon Building Algorithm\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python\" \"Dungeon Builder in Python\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels\" \"Cellular Automata for Terrain\"))
 (:li (:a :href \"http://pixelenvy.ca/wa/ca_cave.html\" \"More cellular automata for terrain\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Abstract_Dungeons\" \"Abstract dungeons from RogueBasin\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern\" \"Cavern delving\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation\" \"BSP Dungeon gen\")))

(:br)

(:b \"Clojure\")
(:ul
 (:li (:a :href \"https://github.com/JonyEpsilon/gorilla-repl\" \"Gorilla Repl\"))
 (:li (:a :href \"https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer\" \"core.logic Primer\"))
 (:li (:a :href \"https://github.com/clojure/core.logic\" \"core.logic GitHub\"))
 (:li (:a :href \"http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html\" \"Namespace Primer\"))
 (:li (:a :href \"https://gist.github.com/ghoseb/287710\" \"NS cheat-sheet\")))

(:br)
(:b \"LightTable\")
(:ul
 (:li (:a :href \"https://github.com/darthdeus/LightTable-Ruby\" \"Ruby mode\")))

(:br)
(:b \"Misc...\")
(:ul
 (:li (:a :href \"http://code.google.com/p/key-mon/source/checkout\" \"KeyMon -- tool for showing keystrokes in screencasts\"))
 (:li (:a :href \"http://www.subtext-lang.org/\" \"Subtext Lang\"))
 (:li (:a :href \"http://byorgey.wordpress.com/catsters-guide-2/\" \"The Catsters\"))
 (:li (:a :href \"http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53\" \"Share Elm -- Line of Sight\"))
 (:li (:a :href \"http://codemirror.net/doc/manual.html#overview\" \"CodeMirror manual\"))
 (:li (:a :href \"https://github.com/nkmathew/yasi-sexp-indenter\" \"batch s-exp indenter test\")))

(:br)"))
((5138 5181 116909000) :DELETE
 (4 :VALUE
  ((:RESULT
    . "<h3>Ok, serious notes now...</h3><b>Terrain generation</b><ul><li><a href='http://en.wikipedia.org/wiki/Maze_generation_algorithm'>Maze generation on wikipedia</a></li><li><a href='http://www.roguebasin.com/index.php?title=Articles#Map'>Rogue Basin page</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm'>Dungeon Building Algorithm</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python'>Dungeon Builder in Python</a></li><li><a href='http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels'>Cellular Automata for Terrain</a></li><li><a href='http://pixelenvy.ca/wa/ca_cave.html'>More cellular automata for terrain</a></li><li><a href='http://www.roguebasin.com/index.php?title=Abstract_Dungeons'>Abstract dungeons from RogueBasin</a></li><li><a href='http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern'>Cavern delving</a></li><li><a href='http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation'>BSP Dungeon gen</a></li></ul><br /><b>Clojure</b><ul><li><a href='https://github.com/JonyEpsilon/gorilla-repl'>Gorilla Repl</a></li><li><a href='https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer'>core.logic Primer</a></li><li><a href='https://github.com/clojure/core.logic'>core.logic GitHub</a></li><li><a href='http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html'>Namespace Primer</a></li><li><a href='https://gist.github.com/ghoseb/287710'>NS cheat-sheet</a></li></ul><br /><b>LightTable</b><ul><li><a href='https://github.com/darthdeus/LightTable-Ruby'>Ruby mode</a></li></ul><br /><b>Misc...</b><ul><li><a href='http://code.google.com/p/key-mon/source/checkout'>KeyMon -- tool for showing keystrokes in screencasts</a></li><li><a href='http://www.subtext-lang.org/'>Subtext Lang</a></li><li><a href='http://byorgey.wordpress.com/catsters-guide-2/'>The Catsters</a></li><li><a href='http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53'>Share Elm -- Line of Sight</a></li><li><a href='http://codemirror.net/doc/manual.html#overview'>CodeMirror manual</a></li><li><a href='https://github.com/nkmathew/yasi-sexp-indenter'>batch s-exp indenter test</a></li></ul><br />"))))
((5138 5181 116957000) :INSERT
 (4 :CONTENTS "(:h3 \"Ok, serious notes now...\")

(:b \"Terrain generation\")
(:ul
 (:li (:a :href \"http://en.wikipedia.org/wiki/Maze_generation_algorithm\" \"Maze generation on wikipedia\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Articles#Map\" \"Rogue Basin page\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm\" \"Dungeon Building Algorithm\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python\" \"Dungeon Builder in Python\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels\" \"Cellular Automata for Terrain\"))
 (:li (:a :href \"http://pixelenvy.ca/wa/ca_cave.html\" \"More cellular automata for terrain\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Abstract_Dungeons\" \"Abstract dungeons from RogueBasin\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern\" \"Cavern delving\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation\" \"BSP Dungeon gen\")))

(:br)

(:b \"Clojure\")
(:ul
 (:li (:a :href \"https://github.com/JonyEpsilon/gorilla-repl\" \"Gorilla Repl\"))
 (:li (:a :href \"https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer\" \"core.logic Primer\"))
 (:li (:a :href \"https://github.com/clojure/core.logic\" \"core.logic GitHub\"))
 (:li (:a :href \"http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html\" \"Namespace Primer\"))
 (:li (:a :href \"https://gist.github.com/ghoseb/287710\" \"NS cheat-sheet\")))

(:br)
(:b \"LightTable\")
(:ul
 (:li (:a :href \"https://github.com/darthdeus/LightTable-Ruby\" \"Ruby mode\")))

(:br)
(:b \"Misc...\")
(:ul
 (:li (:a :href \"http://code.google.com/p/key-mon/source/checkout\" \"KeyMon -- tool for showing keystrokes in screencasts\"))
 (:li (:a :href \"http://www.subtext-lang.org/\" \"Subtext Lang\"))
 (:li (:a :href \"http://byorgey.wordpress.com/catsters-guide-2/\" \"The Catsters\"))
 (:li (:a :href \"http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53\" \"Share Elm -- Line of Sight\"))
 (:li (:a :href \"http://codemirror.net/doc/manual.html#overview\" \"CodeMirror manual\"))
 (:li (:a :href \"https://github.com/nkmathew/yasi-sexp-indenter\" \"batch s-exp indenter test\")))

(:br)"))
((5138 5181 116994000) :INSERT
 (4 :VALUE
  ((:RESULT
    . "<h3>Ok, serious notes now...</h3><b>Terrain generation</b><ul><li><a href='http://en.wikipedia.org/wiki/Maze_generation_algorithm'>Maze generation on wikipedia</a></li><li><a href='http://www.roguebasin.com/index.php?title=Articles#Map'>Rogue Basin page</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm'>Dungeon Building Algorithm</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python'>Dungeon Builder in Python</a></li><li><a href='http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels'>Cellular Automata for Terrain</a></li><li><a href='http://pixelenvy.ca/wa/ca_cave.html'>More cellular automata for terrain</a></li><li><a href='http://www.roguebasin.com/index.php?title=Abstract_Dungeons'>Abstract dungeons from RogueBasin</a></li><li><a href='http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern'>Cavern delving</a></li><li><a href='http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation'>BSP Dungeon gen</a></li></ul><br /><b>Clojure</b><ul><li><a href='https://github.com/JonyEpsilon/gorilla-repl'>Gorilla Repl</a></li><li><a href='https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer'>core.logic Primer</a></li><li><a href='https://github.com/clojure/core.logic'>core.logic GitHub</a></li><li><a href='http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html'>Namespace Primer</a></li><li><a href='https://gist.github.com/ghoseb/287710'>NS cheat-sheet</a></li></ul><br /><b>LightTable</b><ul><li><a href='https://github.com/darthdeus/LightTable-Ruby'>Ruby mode</a></li></ul><br /><b>Misc...</b><ul><li><a href='http://code.google.com/p/key-mon/source/checkout'>KeyMon -- tool for showing keystrokes in screencasts</a></li><li><a href='http://www.subtext-lang.org/'>Subtext Lang</a></li><li><a href='http://byorgey.wordpress.com/catsters-guide-2/'>The Catsters</a></li><li><a href='http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53'>Share Elm -- Line of Sight</a></li><li><a href='http://codemirror.net/doc/manual.html#overview'>CodeMirror manual</a></li><li><a href='https://github.com/nkmathew/yasi-sexp-indenter'>batch s-exp indenter test</a></li></ul><br />"))))
((5138 5506 233942000) :DELETE (18 :CELL-ORDER (2 1 15 7 10 4)))
((5138 5506 234122000) :INSERT (20 :CELL-ORDER (2 1 15 7 10 4)))
((5138 5507 507985000) :DELETE
 (4 :CONTENTS "(:h3 \"Ok, serious notes now...\")

(:b \"Terrain generation\")
(:ul
 (:li (:a :href \"http://en.wikipedia.org/wiki/Maze_generation_algorithm\" \"Maze generation on wikipedia\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Articles#Map\" \"Rogue Basin page\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm\" \"Dungeon Building Algorithm\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python\" \"Dungeon Builder in Python\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels\" \"Cellular Automata for Terrain\"))
 (:li (:a :href \"http://pixelenvy.ca/wa/ca_cave.html\" \"More cellular automata for terrain\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Abstract_Dungeons\" \"Abstract dungeons from RogueBasin\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern\" \"Cavern delving\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation\" \"BSP Dungeon gen\")))

(:br)

(:b \"Clojure\")
(:ul
 (:li (:a :href \"https://github.com/JonyEpsilon/gorilla-repl\" \"Gorilla Repl\"))
 (:li (:a :href \"https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer\" \"core.logic Primer\"))
 (:li (:a :href \"https://github.com/clojure/core.logic\" \"core.logic GitHub\"))
 (:li (:a :href \"http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html\" \"Namespace Primer\"))
 (:li (:a :href \"https://gist.github.com/ghoseb/287710\" \"NS cheat-sheet\")))

(:br)
(:b \"LightTable\")
(:ul
 (:li (:a :href \"https://github.com/darthdeus/LightTable-Ruby\" \"Ruby mode\")))

(:br)
(:b \"Misc...\")
(:ul
 (:li (:a :href \"http://code.google.com/p/key-mon/source/checkout\" \"KeyMon -- tool for showing keystrokes in screencasts\"))
 (:li (:a :href \"http://www.subtext-lang.org/\" \"Subtext Lang\"))
 (:li (:a :href \"http://byorgey.wordpress.com/catsters-guide-2/\" \"The Catsters\"))
 (:li (:a :href \"http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53\" \"Share Elm -- Line of Sight\"))
 (:li (:a :href \"http://codemirror.net/doc/manual.html#overview\" \"CodeMirror manual\"))
 (:li (:a :href \"https://github.com/nkmathew/yasi-sexp-indenter\" \"batch s-exp indenter test\")))

(:br)"))
((5138 5507 508029000) :DELETE
 (4 :VALUE
  ((:RESULT
    . "<h3>Ok, serious notes now...</h3><b>Terrain generation</b><ul><li><a href='http://en.wikipedia.org/wiki/Maze_generation_algorithm'>Maze generation on wikipedia</a></li><li><a href='http://www.roguebasin.com/index.php?title=Articles#Map'>Rogue Basin page</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm'>Dungeon Building Algorithm</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python'>Dungeon Builder in Python</a></li><li><a href='http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels'>Cellular Automata for Terrain</a></li><li><a href='http://pixelenvy.ca/wa/ca_cave.html'>More cellular automata for terrain</a></li><li><a href='http://www.roguebasin.com/index.php?title=Abstract_Dungeons'>Abstract dungeons from RogueBasin</a></li><li><a href='http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern'>Cavern delving</a></li><li><a href='http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation'>BSP Dungeon gen</a></li></ul><br /><b>Clojure</b><ul><li><a href='https://github.com/JonyEpsilon/gorilla-repl'>Gorilla Repl</a></li><li><a href='https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer'>core.logic Primer</a></li><li><a href='https://github.com/clojure/core.logic'>core.logic GitHub</a></li><li><a href='http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html'>Namespace Primer</a></li><li><a href='https://gist.github.com/ghoseb/287710'>NS cheat-sheet</a></li></ul><br /><b>LightTable</b><ul><li><a href='https://github.com/darthdeus/LightTable-Ruby'>Ruby mode</a></li></ul><br /><b>Misc...</b><ul><li><a href='http://code.google.com/p/key-mon/source/checkout'>KeyMon -- tool for showing keystrokes in screencasts</a></li><li><a href='http://www.subtext-lang.org/'>Subtext Lang</a></li><li><a href='http://byorgey.wordpress.com/catsters-guide-2/'>The Catsters</a></li><li><a href='http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53'>Share Elm -- Line of Sight</a></li><li><a href='http://codemirror.net/doc/manual.html#overview'>CodeMirror manual</a></li><li><a href='https://github.com/nkmathew/yasi-sexp-indenter'>batch s-exp indenter test</a></li></ul><br />"))))
((5138 5507 508063000) :INSERT
 (4 :CONTENTS "(flet ((section (name &rest uri/name-pairs)
		(htm (:p (:b name)
			 (:ul (loop for (uri name) on uri/name-pairs by #'cddr
				    do (htm (:li (:a :href uri name)))))))))
  (section \"Terrain generation\"
	   \"http://en.wikipedia.org/wiki/Maze_generation_algorithm\" \"Maze generation on wikipedia\"
	   \"http://www.roguebasin.com/index.php?title=Articles#Map\" \"Rogue Basin page\"
	   \"http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm\" \"Dungeon Building Algorithm\"
	   \"http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python\" \"Dungeon Builder in Python\"
	   \"http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels\" \"Cellular Automata for Terrain\"
	   \"http://pixelenvy.ca/wa/ca_cave.html\" \"More cellular automata for terrain\"
	   \"http://www.roguebasin.com/index.php?title=Abstract_Dungeons\" \"Abstract dungeons from RogueBasin\"
	   \"http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern\" \"Cavern delving\"
	   \"http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation\" \"BSP Dungeon gen\"))"))
((5138 5507 508074000) :INSERT
 (4 :VALUE
  ((:RESULT
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . UNDEFINED-FUNCTION)
       (:FORM . "(WITH-HTML-OUTPUT-TO-STRING (S)
 (FLET ((SECTION (NAME &REST URI/NAME-PAIRS)
          (HTM
           (P (B NAME)
            (UL
             (LOOP FOR (URI NAME) ON URI/NAME-PAIRS BY #'CDDR
                   DO (HTM (LI (A HREF URI NAME)))))))))
   (SECTION Terrain generation
    http://en.wikipedia.org/wiki/Maze_generation_algorithm
    Maze generation on wikipedia
    http://www.roguebasin.com/index.php?title=Articles#Map Rogue Basin page
    http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm
    Dungeon Building Algorithm
    http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python
    Dungeon Builder in Python
    http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels
    Cellular Automata for Terrain http://pixelenvy.ca/wa/ca_cave.html
    More cellular automata for terrain
    http://www.roguebasin.com/index.php?title=Abstract_Dungeons
    Abstract dungeons from RogueBasin
    http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern
    Cavern delving
    http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation
    BSP Dungeon gen)))")
       (:NAME . S)))))
   (:STDOUT . ""))))
((5138 5867 403836000) :INSERT (21 :CELL NIL))
((5138 5867 403856000) :INSERT (21 :CELL-TYPE :COMMON-LISP))
((5138 5867 403859000) :INSERT (21 :CONTENTS ""))
((5138 5867 403861000) :INSERT (21 :VALUE ""))
((5138 6443 164392000) :DELETE
 (7 :CONTENTS ";; errors!

(+ 2 3 4 :test)"))
((5138 6443 164594000) :DELETE
 (7 :VALUE
  ((:RESULT
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 2 3 4 TEST)") (:DATUM . :TEST)
       (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . ""))))
((5138 6443 164620000) :INSERT
 (7 :CONTENTS ";; errors!

(+ 2 3 4 :test)"))
((5138 6443 164664000) :INSERT
 (7 :VALUE
  ((:RESULT
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 2 3 4 TEST)") (:DATUM . :TEST)
       (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . ""))))
((5138 6449 957359000) :DELETE
 (10 :CONTENTS
  ";; The working forms get evaled when an error happens part-way through!
(+ 2 3)
(+ 3 4)
(+ 4 5)
(values :yes :multiple :values :also :work!)
(+ 6 :test)"))
((5138 6449 957378000) :DELETE
 (10 :VALUE
  ((:RESULT ((INTEGER "5")) ((INTEGER "7")) ((INTEGER "9"))
    ((KEYWORD ":YES") (KEYWORD ":MULTIPLE") (KEYWORD ":VALUES")
     (KEYWORD ":ALSO") (KEYWORD ":WORK!"))
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 6 TEST)") (:DATUM . :TEST) (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . ""))))
((5138 6449 957384000) :INSERT
 (10 :CONTENTS
  ";; The working forms get evaled when an error happens part-way through!
(+ 2 3 5)
(+ 3 4)
(+ 4 5)
(values :yes :multiple :values :also :work!)
(+ 6 :test)"))
((5138 6449 957389000) :INSERT
 (10 :VALUE
  ((:RESULT ((INTEGER "10")) ((INTEGER "7")) ((INTEGER "9"))
    ((KEYWORD ":YES") (KEYWORD ":MULTIPLE") (KEYWORD ":VALUES")
     (KEYWORD ":ALSO") (KEYWORD ":WORK!"))
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 6 TEST)") (:DATUM . :TEST) (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . ""))))
((5138 6454 401629000) :DELETE
 (10 :CONTENTS
  ";; The working forms get evaled when an error happens part-way through!
(+ 2 3 5)
(+ 3 4)
(+ 4 5)
(values :yes :multiple :values :also :work!)
(+ 6 :test)"))
((5138 6454 401656000) :DELETE
 (10 :VALUE
  ((:RESULT ((INTEGER "10")) ((INTEGER "7")) ((INTEGER "9"))
    ((KEYWORD ":YES") (KEYWORD ":MULTIPLE") (KEYWORD ":VALUES")
     (KEYWORD ":ALSO") (KEYWORD ":WORK!"))
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 6 TEST)") (:DATUM . :TEST) (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . ""))))
((5138 6454 401667000) :INSERT
 (10 :CONTENTS
  ";; The working forms get evaled when an error happens part-way through!
(+ 2 3)
(+ 3 4)
(+ 4 5)
(values :yes :multiple :values :also :work!)
(+ 6 :test)"))
((5138 6454 401676000) :INSERT
 (10 :VALUE
  ((:RESULT ((INTEGER "5")) ((INTEGER "7")) ((INTEGER "9"))
    ((KEYWORD ":YES") (KEYWORD ":MULTIPLE") (KEYWORD ":VALUES")
     (KEYWORD ":ALSO") (KEYWORD ":WORK!"))
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 6 TEST)") (:DATUM . :TEST) (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . ""))))
((5138 6462 218406000) :DELETE
 (4 :CONTENTS "(flet ((section (name &rest uri/name-pairs)
		(htm (:p (:b name)
			 (:ul (loop for (uri name) on uri/name-pairs by #'cddr
				    do (htm (:li (:a :href uri name)))))))))
  (section \"Terrain generation\"
	   \"http://en.wikipedia.org/wiki/Maze_generation_algorithm\" \"Maze generation on wikipedia\"
	   \"http://www.roguebasin.com/index.php?title=Articles#Map\" \"Rogue Basin page\"
	   \"http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm\" \"Dungeon Building Algorithm\"
	   \"http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python\" \"Dungeon Builder in Python\"
	   \"http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels\" \"Cellular Automata for Terrain\"
	   \"http://pixelenvy.ca/wa/ca_cave.html\" \"More cellular automata for terrain\"
	   \"http://www.roguebasin.com/index.php?title=Abstract_Dungeons\" \"Abstract dungeons from RogueBasin\"
	   \"http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern\" \"Cavern delving\"
	   \"http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation\" \"BSP Dungeon gen\"))"))
((5138 6462 218449000) :DELETE
 (4 :VALUE
  ((:RESULT
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . UNDEFINED-FUNCTION)
       (:FORM . "(WITH-HTML-OUTPUT-TO-STRING (S)
 (FLET ((SECTION (NAME &REST URI/NAME-PAIRS)
          (HTM
           (P (B NAME)
            (UL
             (LOOP FOR (URI NAME) ON URI/NAME-PAIRS BY #'CDDR
                   DO (HTM (LI (A HREF URI NAME)))))))))
   (SECTION Terrain generation
    http://en.wikipedia.org/wiki/Maze_generation_algorithm
    Maze generation on wikipedia
    http://www.roguebasin.com/index.php?title=Articles#Map Rogue Basin page
    http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm
    Dungeon Building Algorithm
    http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python
    Dungeon Builder in Python
    http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels
    Cellular Automata for Terrain http://pixelenvy.ca/wa/ca_cave.html
    More cellular automata for terrain
    http://www.roguebasin.com/index.php?title=Abstract_Dungeons
    Abstract dungeons from RogueBasin
    http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern
    Cavern delving
    http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation
    BSP Dungeon gen)))")
       (:NAME . S)))))
   (:STDOUT . ""))))
((5138 6462 218463000) :INSERT
 (4 :CONTENTS "(flet ((section (name &rest uri/name-pairs)
		(htm (:p (:b name)
			 (:ul (loop for (uri name) on uri/name-pairs by #'cddr
				    do (htm (:li (:a :href uri name)))))))))
  (section \"Terrain generation\"
	   \"http://en.wikipedia.org/wiki/Maze_generation_algorithm\" \"Maze generation on wikipedia\"
	   \"http://www.roguebasin.com/index.php?title=Articles#Map\" \"Rogue Basin page\"
	   \"http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm\" \"Dungeon Building Algorithm\"
	   \"http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python\" \"Dungeon Builder in Python\"
	   \"http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels\" \"Cellular Automata for Terrain\"
	   \"http://pixelenvy.ca/wa/ca_cave.html\" \"More cellular automata for terrain\"
	   \"http://www.roguebasin.com/index.php?title=Abstract_Dungeons\" \"Abstract dungeons from RogueBasin\"
	   \"http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern\" \"Cavern delving\"
	   \"http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation\" \"BSP Dungeon gen\"))"))
((5138 6462 218481000) :INSERT (4 :VALUE ((:RESULT (CL-WHO::*INDENT* NIL)))))
((5138 6468 824945000) :DELETE
 (4 :CONTENTS "(flet ((section (name &rest uri/name-pairs)
		(htm (:p (:b name)
			 (:ul (loop for (uri name) on uri/name-pairs by #'cddr
				    do (htm (:li (:a :href uri name)))))))))
  (section \"Terrain generation\"
	   \"http://en.wikipedia.org/wiki/Maze_generation_algorithm\" \"Maze generation on wikipedia\"
	   \"http://www.roguebasin.com/index.php?title=Articles#Map\" \"Rogue Basin page\"
	   \"http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm\" \"Dungeon Building Algorithm\"
	   \"http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python\" \"Dungeon Builder in Python\"
	   \"http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels\" \"Cellular Automata for Terrain\"
	   \"http://pixelenvy.ca/wa/ca_cave.html\" \"More cellular automata for terrain\"
	   \"http://www.roguebasin.com/index.php?title=Abstract_Dungeons\" \"Abstract dungeons from RogueBasin\"
	   \"http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern\" \"Cavern delving\"
	   \"http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation\" \"BSP Dungeon gen\"))"))
((5138 6468 824982000) :DELETE (4 :VALUE ((:RESULT (CL-WHO::*INDENT* NIL)))))
((5138 6468 824988000) :INSERT
 (4 :CONTENTS "(flet ((section (name &rest uri/name-pairs)
		(htm (:p (:b name)
			 (:ul (loop for (uri name) on uri/name-pairs by #'cddr
				    do (htm (:li (:a :href uri name)))))))))
  (section \"Terrain generation\"
	   \"http://en.wikipedia.org/wiki/Maze_generation_algorithm\" \"Maze generation on wikipedia\"
	   \"http://www.roguebasin.com/index.php?title=Articles#Map\" \"Rogue Basin page\"
	   \"http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm\" \"Dungeon Building Algorithm\"
	   \"http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python\" \"Dungeon Builder in Python\"
	   \"http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels\" \"Cellular Automata for Terrain\"
	   \"http://pixelenvy.ca/wa/ca_cave.html\" \"More cellular automata for terrain\"
	   \"http://www.roguebasin.com/index.php?title=Abstract_Dungeons\" \"Abstract dungeons from RogueBasin\"
	   \"http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern\" \"Cavern delving\"
	   \"http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation\" \"BSP Dungeon gen\"))"))
((5138 6468 825001000) :INSERT (4 :VALUE ((:RESULT (CL-WHO::*INDENT* NIL)))))
((5138 6474 635420000) :DELETE (21 :CONTENTS ""))
((5138 6474 635439000) :DELETE (21 :VALUE ""))
((5138 6474 635445000) :INSERT (21 :CONTENTS "(+ 2 3)"))
((5138 6474 635451000) :INSERT
 (21 :VALUE ((:RESULT ((INTEGER "5"))) (:STDOUT . ""))))
((5138 6489 960879000) :INSERT (22 :CELL NIL))
((5138 6489 960890000) :INSERT (22 :CELL-TYPE :CL-WHO))
((5138 6489 960900000) :INSERT (22 :CONTENTS ""))
((5138 6489 960902000) :INSERT (22 :VALUE ""))
((5138 6495 81992000) :DELETE (22 :CONTENTS ""))
((5138 6495 82007000) :DELETE (22 :VALUE ""))
((5138 6495 82012000) :INSERT
 (22 :CONTENTS "(:h3 \"Ok, serious notes now...\")

(:b \"Terrain generation\")
(:ul
 (:li (:a :href \"http://en.wikipedia.org/wiki/Maze_generation_algorithm\" \"Maze generation on wikipedia\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Articles#Map\" \"Rogue Basin page\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm\" \"Dungeon Building Algorithm\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python\" \"Dungeon Builder in Python\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels\" \"Cellular Automata for Terrain\"))
 (:li (:a :href \"http://pixelenvy.ca/wa/ca_cave.html\" \"More cellular automata for terrain\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Abstract_Dungeons\" \"Abstract dungeons from RogueBasin\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern\" \"Cavern delving\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation\" \"BSP Dungeon gen\")))

(:br)

(:b \"Clojure\")
(:ul
 (:li (:a :href \"https://github.com/JonyEpsilon/gorilla-repl\" \"Gorilla Repl\"))
 (:li (:a :href \"https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer\" \"core.logic Primer\"))
 (:li (:a :href \"https://github.com/clojure/core.logic\" \"core.logic GitHub\"))
 (:li (:a :href \"http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html\" \"Namespace Primer\"))
 (:li (:a :href \"https://gist.github.com/ghoseb/287710\" \"NS cheat-sheet\")))

(:br)
(:b \"LightTable\")
(:ul
 (:li (:a :href \"https://github.com/darthdeus/LightTable-Ruby\" \"Ruby mode\")))

(:br)
(:b \"Misc...\")
(:ul
 (:li (:a :href \"http://code.google.com/p/key-mon/source/checkout\" \"KeyMon -- tool for showing keystrokes in screencasts\"))
 (:li (:a :href \"http://www.subtext-lang.org/\" \"Subtext Lang\"))
 (:li (:a :href \"http://byorgey.wordpress.com/catsters-guide-2/\" \"The Catsters\"))
 (:li (:a :href \"http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53\" \"Share Elm -- Line of Sight\"))
 (:li (:a :href \"http://codemirror.net/doc/manual.html#overview\" \"CodeMirror manual\"))
 (:li (:a :href \"https://github.com/nkmathew/yasi-sexp-indenter\" \"batch s-exp indenter test\")))

(:br)"))
((5138 6495 82033000) :INSERT
 (22 :VALUE
  ((:RESULT
    . "<h3>Ok, serious notes now...</h3><b>Terrain generation</b><ul><li><a href='http://en.wikipedia.org/wiki/Maze_generation_algorithm'>Maze generation on wikipedia</a></li><li><a href='http://www.roguebasin.com/index.php?title=Articles#Map'>Rogue Basin page</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm'>Dungeon Building Algorithm</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python'>Dungeon Builder in Python</a></li><li><a href='http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels'>Cellular Automata for Terrain</a></li><li><a href='http://pixelenvy.ca/wa/ca_cave.html'>More cellular automata for terrain</a></li><li><a href='http://www.roguebasin.com/index.php?title=Abstract_Dungeons'>Abstract dungeons from RogueBasin</a></li><li><a href='http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern'>Cavern delving</a></li><li><a href='http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation'>BSP Dungeon gen</a></li></ul><br /><b>Clojure</b><ul><li><a href='https://github.com/JonyEpsilon/gorilla-repl'>Gorilla Repl</a></li><li><a href='https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer'>core.logic Primer</a></li><li><a href='https://github.com/clojure/core.logic'>core.logic GitHub</a></li><li><a href='http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html'>Namespace Primer</a></li><li><a href='https://gist.github.com/ghoseb/287710'>NS cheat-sheet</a></li></ul><br /><b>LightTable</b><ul><li><a href='https://github.com/darthdeus/LightTable-Ruby'>Ruby mode</a></li></ul><br /><b>Misc...</b><ul><li><a href='http://code.google.com/p/key-mon/source/checkout'>KeyMon -- tool for showing keystrokes in screencasts</a></li><li><a href='http://www.subtext-lang.org/'>Subtext Lang</a></li><li><a href='http://byorgey.wordpress.com/catsters-guide-2/'>The Catsters</a></li><li><a href='http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53'>Share Elm -- Line of Sight</a></li><li><a href='http://codemirror.net/doc/manual.html#overview'>CodeMirror manual</a></li><li><a href='https://github.com/nkmathew/yasi-sexp-indenter'>batch s-exp indenter test</a></li></ul><br />"))))
((5138 6634 841194000) :DELETE
 (4 :CONTENTS "(flet ((section (name &rest uri/name-pairs)
		(htm (:p (:b name)
			 (:ul (loop for (uri name) on uri/name-pairs by #'cddr
				    do (htm (:li (:a :href uri name)))))))))
  (section \"Terrain generation\"
	   \"http://en.wikipedia.org/wiki/Maze_generation_algorithm\" \"Maze generation on wikipedia\"
	   \"http://www.roguebasin.com/index.php?title=Articles#Map\" \"Rogue Basin page\"
	   \"http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm\" \"Dungeon Building Algorithm\"
	   \"http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python\" \"Dungeon Builder in Python\"
	   \"http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels\" \"Cellular Automata for Terrain\"
	   \"http://pixelenvy.ca/wa/ca_cave.html\" \"More cellular automata for terrain\"
	   \"http://www.roguebasin.com/index.php?title=Abstract_Dungeons\" \"Abstract dungeons from RogueBasin\"
	   \"http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern\" \"Cavern delving\"
	   \"http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation\" \"BSP Dungeon gen\"))"))
((5138 6634 841235000) :DELETE (4 :VALUE ((:RESULT (CL-WHO::*INDENT* NIL)))))
((5138 6634 841243000) :INSERT
 (4 :CONTENTS "(flet ((section (name &rest uri/name-pairs)
		(htm (:p (:b name)
			 (:ul (loop for (uri name) on uri/name-pairs by #'cddr
				    do (htm (:li (:a :href uri name)))))))))
  (section \"Terrain generation\"
	   \"http://en.wikipedia.org/wiki/Maze_generation_algorithm\" \"Maze generation on wikipedia\"
	   \"http://www.roguebasin.com/index.php?title=Articles#Map\" \"Rogue Basin page\"
	   \"http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm\" \"Dungeon Building Algorithm\"
	   \"http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python\" \"Dungeon Builder in Python\"
	   \"http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels\" \"Cellular Automata for Terrain\"
	   \"http://pixelenvy.ca/wa/ca_cave.html\" \"More cellular automata for terrain\"
	   \"http://www.roguebasin.com/index.php?title=Abstract_Dungeons\" \"Abstract dungeons from RogueBasin\"
	   \"http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern\" \"Cavern delving\"
	   \"http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation\" \"BSP Dungeon gen\"))"))
((5138 6634 841261000) :INSERT (4 :VALUE ((:RESULT (CL-WHO::*INDENT* NIL)))))
((5138 7189 324591000) :DELETE
 (4 :CONTENTS "(flet ((section (name &rest uri/name-pairs)
		(htm (:p (:b name)
			 (:ul (loop for (uri name) on uri/name-pairs by #'cddr
				    do (htm (:li (:a :href uri name)))))))))
  (section \"Terrain generation\"
	   \"http://en.wikipedia.org/wiki/Maze_generation_algorithm\" \"Maze generation on wikipedia\"
	   \"http://www.roguebasin.com/index.php?title=Articles#Map\" \"Rogue Basin page\"
	   \"http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm\" \"Dungeon Building Algorithm\"
	   \"http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python\" \"Dungeon Builder in Python\"
	   \"http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels\" \"Cellular Automata for Terrain\"
	   \"http://pixelenvy.ca/wa/ca_cave.html\" \"More cellular automata for terrain\"
	   \"http://www.roguebasin.com/index.php?title=Abstract_Dungeons\" \"Abstract dungeons from RogueBasin\"
	   \"http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern\" \"Cavern delving\"
	   \"http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation\" \"BSP Dungeon gen\"))"))
((5138 7189 324638000) :DELETE (4 :VALUE ((:RESULT (CL-WHO::*INDENT* NIL)))))
((5138 7189 324644000) :INSERT
 (4 :CONTENTS "(flet ((section (name &rest uri/name-pairs)
		(htm (:p (:b name)
			 (:ul (loop for (uri name) on uri/name-pairs by #'cddr
				    do (htm (:li (:a :href uri name)))))))))
  (section \"Terrain generation\"
	   \"http://en.wikipedia.org/wiki/Maze_generation_algorithm\" \"Maze generation on wikipedia\"
	   \"http://www.roguebasin.com/index.php?title=Articles#Map\" \"Rogue Basin page\"
	   \"http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm\" \"Dungeon Building Algorithm\"
	   \"http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python\" \"Dungeon Builder in Python\"
	   \"http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels\" \"Cellular Automata for Terrain\"
	   \"http://pixelenvy.ca/wa/ca_cave.html\" \"More cellular automata for terrain\"
	   \"http://www.roguebasin.com/index.php?title=Abstract_Dungeons\" \"Abstract dungeons from RogueBasin\"
	   \"http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern\" \"Cavern delving\"
	   \"http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation\" \"BSP Dungeon gen\"))"))
((5138 7189 324655000) :INSERT (4 :VALUE ((:RESULT (CL-WHO::*INDENT* NIL)))))
((5138 7238 693155000) :DELETE (4 :VALUE ((:RESULT (CL-WHO::*INDENT* NIL)))))
((5138 7238 693168000) :DELETE
 (4 :CONTENTS "(flet ((section (name &rest uri/name-pairs)
		(htm (:p (:b name)
			 (:ul (loop for (uri name) on uri/name-pairs by #'cddr
				    do (htm (:li (:a :href uri name)))))))))
  (section \"Terrain generation\"
	   \"http://en.wikipedia.org/wiki/Maze_generation_algorithm\" \"Maze generation on wikipedia\"
	   \"http://www.roguebasin.com/index.php?title=Articles#Map\" \"Rogue Basin page\"
	   \"http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm\" \"Dungeon Building Algorithm\"
	   \"http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python\" \"Dungeon Builder in Python\"
	   \"http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels\" \"Cellular Automata for Terrain\"
	   \"http://pixelenvy.ca/wa/ca_cave.html\" \"More cellular automata for terrain\"
	   \"http://www.roguebasin.com/index.php?title=Abstract_Dungeons\" \"Abstract dungeons from RogueBasin\"
	   \"http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern\" \"Cavern delving\"
	   \"http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation\" \"BSP Dungeon gen\"))"))
((5138 7238 693187000) :DELETE (4 :CELL NIL))
((5138 7238 693193000) :DELETE (4 :CELL-TYPE :CL-WHO))
((5138 7240 200754000) :DELETE
 (21 :VALUE ((:RESULT ((INTEGER "5"))) (:STDOUT . ""))))
((5138 7240 200767000) :DELETE (21 :CONTENTS "(+ 2 3)"))
((5138 7240 200773000) :DELETE (21 :CELL NIL))
((5138 7240 200777000) :DELETE (21 :CELL-TYPE :COMMON-LISP))
((5138 7271 469793000) :INSERT (23 :CELL NIL))
((5138 7271 469804000) :INSERT (23 :CELL-TYPE :CL-WHO))
((5138 7271 469807000) :INSERT (23 :CONTENTS ""))
((5138 7271 469810000) :INSERT (23 :VALUE ""))
((5138 7278 947372000) :DELETE (20 :CELL-ORDER (2 1 15 7 10 4)))
((5138 7278 947496000) :INSERT (24 :CELL-ORDER (2 1 15 7 10 22 23)))
((5138 7283 331235000) :DELETE (24 :CELL-ORDER (2 1 15 7 10 22 23)))
((5138 7283 331312000) :INSERT (25 :CELL-ORDER (2 1 15 7 10 23 22)))
((5138 7287 373057000) :DELETE (25 :CELL-ORDER (2 1 15 7 10 23 22)))
((5138 7287 373097000) :INSERT (26 :CELL-ORDER (2 1 15 23 7 10 22)))
((5138 7291 597487000) :DELETE (26 :CELL-ORDER (2 1 15 23 7 10 22)))
((5138 7291 597502000) :INSERT (27 :CELL-ORDER (2 1 15 23 7 22 10)))
((5138 7296 855904000) :DELETE (27 :CELL-ORDER (2 1 15 23 7 22 10)))
((5138 7296 855918000) :INSERT (28 :CELL-ORDER (2 23 1 15 7 22 10)))
((5138 7299 664125000) :DELETE (28 :CELL-ORDER (2 23 1 15 7 22 10)))
((5138 7299 664139000) :INSERT (29 :CELL-ORDER (23 2 1 15 7 22 10)))
((5138 7311 669608000) :DELETE (23 :CONTENTS ""))
((5138 7311 669623000) :DELETE (23 :VALUE ""))
((5138 7311 669628000) :INSERT (23 :CONTENTS "(:h1 \"test-book\")"))
((5138 7311 669633000) :INSERT (23 :VALUE ((:RESULT . "<h1>test-book</h1>"))))
((5138 8871 985589000) :DELETE (29 :CELL-ORDER (23 2 1 15 7 22 10)))
((5138 8871 985822000) :INSERT (30 :CELL-ORDER (23 2 1 15 7 10 22)))
((5138 10202 599135000) :DELETE (23 :CONTENTS "(:h1 \"test-book\")"))
((5138 10202 599190000) :DELETE (23 :VALUE ((:RESULT . "<h1>test-book</h1>"))))
((5138 10202 599199000) :INSERT (23 :CONTENTS "(:h1 \"Test Book\")"))
((5138 10202 599204000) :INSERT (23 :VALUE ((:RESULT . "<h1>Test Book</h1>"))))
((5138 10212 587971000) :DELETE (30 :CELL-ORDER (23 2 1 15 7 10 22)))
((5138 10212 588073000) :INSERT (31 :CELL-ORDER (23 2 15 1 7 10 22)))
((5138 10214 145011000) :DELETE (31 :CELL-ORDER (23 2 15 1 7 10 22)))
((5138 10214 145065000) :INSERT (32 :CELL-ORDER (23 2 1 15 7 10 22)))
((5138 10216 863099000) :DELETE (32 :CELL-ORDER (23 2 1 15 7 10 22)))
((5138 10216 863112000) :INSERT (33 :CELL-ORDER (23 2 15 1 7 10 22)))
((5138 10218 445689000) :DELETE (33 :CELL-ORDER (23 2 15 1 7 10 22)))
((5138 10218 445703000) :INSERT (34 :CELL-ORDER (23 2 1 15 7 10 22)))
((5138 49572 29725000) :DELETE
 (15 :CONTENTS
  "(format t \"Standard output capture!~%Yes, even with multiple lines!\")"))
((5138 49572 29757000) :DELETE
 (15 :VALUE
  ((:RESULT ((NULL "NIL")))
   (:STDOUT . "Standard output capture!
Yes, even with multiple lines!"))))
((5138 49572 29765000) :INSERT
 (15 :CONTENTS
  "(format t \"Standard output capture!~%Yes, even with multiple lines!~5\")
(format t \"And yes, it will show you\")
(format t \" total \")
(format t \"output for a group of printing procs.\")"))
((5138 49572 29771000) :INSERT
 (15 :VALUE
  ((:RESULT
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SB-FORMAT:FORMAT-ERROR)
       (:FORM
        . "(FORMAT T Standard output capture!~%Yes, even with multiple lines!~5)")
       (:COMPLAINT . "string ended before directive was found")))))
   (:STDOUT . ""))))
((5138 49584 450893000) :DELETE
 (15 :CONTENTS
  "(format t \"Standard output capture!~%Yes, even with multiple lines!~5\")
(format t \"And yes, it will show you\")
(format t \" total \")
(format t \"output for a group of printing procs.\")"))
((5138 49584 450909000) :DELETE
 (15 :VALUE
  ((:RESULT
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SB-FORMAT:FORMAT-ERROR)
       (:FORM
        . "(FORMAT T Standard output capture!~%Yes, even with multiple lines!~5)")
       (:COMPLAINT . "string ended before directive was found")))))
   (:STDOUT . ""))))
((5138 49584 450914000) :INSERT
 (15 :CONTENTS
  "(format t \"Standard output capture!~%Yes, even with multiple lines!~%\")
(format t \"And yes, it will show you\")
(format t \" total \")
(format t \"output for a group of printing procs.\")"))
((5138 49584 450919000) :INSERT
 (15 :VALUE
  ((:RESULT ((NULL "NIL")))
   (:STDOUT . "Standard output capture!
Yes, even with multiple lines!
And yes, it will show you total output for a group of printing procs."))))
((5138 49653 440893000) :DELETE
 (22 :CONTENTS "(:h3 \"Ok, serious notes now...\")

(:b \"Terrain generation\")
(:ul
 (:li (:a :href \"http://en.wikipedia.org/wiki/Maze_generation_algorithm\" \"Maze generation on wikipedia\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Articles#Map\" \"Rogue Basin page\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm\" \"Dungeon Building Algorithm\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python\" \"Dungeon Builder in Python\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels\" \"Cellular Automata for Terrain\"))
 (:li (:a :href \"http://pixelenvy.ca/wa/ca_cave.html\" \"More cellular automata for terrain\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Abstract_Dungeons\" \"Abstract dungeons from RogueBasin\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern\" \"Cavern delving\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation\" \"BSP Dungeon gen\")))

(:br)

(:b \"Clojure\")
(:ul
 (:li (:a :href \"https://github.com/JonyEpsilon/gorilla-repl\" \"Gorilla Repl\"))
 (:li (:a :href \"https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer\" \"core.logic Primer\"))
 (:li (:a :href \"https://github.com/clojure/core.logic\" \"core.logic GitHub\"))
 (:li (:a :href \"http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html\" \"Namespace Primer\"))
 (:li (:a :href \"https://gist.github.com/ghoseb/287710\" \"NS cheat-sheet\")))

(:br)
(:b \"LightTable\")
(:ul
 (:li (:a :href \"https://github.com/darthdeus/LightTable-Ruby\" \"Ruby mode\")))

(:br)
(:b \"Misc...\")
(:ul
 (:li (:a :href \"http://code.google.com/p/key-mon/source/checkout\" \"KeyMon -- tool for showing keystrokes in screencasts\"))
 (:li (:a :href \"http://www.subtext-lang.org/\" \"Subtext Lang\"))
 (:li (:a :href \"http://byorgey.wordpress.com/catsters-guide-2/\" \"The Catsters\"))
 (:li (:a :href \"http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53\" \"Share Elm -- Line of Sight\"))
 (:li (:a :href \"http://codemirror.net/doc/manual.html#overview\" \"CodeMirror manual\"))
 (:li (:a :href \"https://github.com/nkmathew/yasi-sexp-indenter\" \"batch s-exp indenter test\")))

(:br)"))
((5138 49653 440945000) :DELETE
 (22 :VALUE
  ((:RESULT
    . "<h3>Ok, serious notes now...</h3><b>Terrain generation</b><ul><li><a href='http://en.wikipedia.org/wiki/Maze_generation_algorithm'>Maze generation on wikipedia</a></li><li><a href='http://www.roguebasin.com/index.php?title=Articles#Map'>Rogue Basin page</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm'>Dungeon Building Algorithm</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python'>Dungeon Builder in Python</a></li><li><a href='http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels'>Cellular Automata for Terrain</a></li><li><a href='http://pixelenvy.ca/wa/ca_cave.html'>More cellular automata for terrain</a></li><li><a href='http://www.roguebasin.com/index.php?title=Abstract_Dungeons'>Abstract dungeons from RogueBasin</a></li><li><a href='http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern'>Cavern delving</a></li><li><a href='http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation'>BSP Dungeon gen</a></li></ul><br /><b>Clojure</b><ul><li><a href='https://github.com/JonyEpsilon/gorilla-repl'>Gorilla Repl</a></li><li><a href='https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer'>core.logic Primer</a></li><li><a href='https://github.com/clojure/core.logic'>core.logic GitHub</a></li><li><a href='http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html'>Namespace Primer</a></li><li><a href='https://gist.github.com/ghoseb/287710'>NS cheat-sheet</a></li></ul><br /><b>LightTable</b><ul><li><a href='https://github.com/darthdeus/LightTable-Ruby'>Ruby mode</a></li></ul><br /><b>Misc...</b><ul><li><a href='http://code.google.com/p/key-mon/source/checkout'>KeyMon -- tool for showing keystrokes in screencasts</a></li><li><a href='http://www.subtext-lang.org/'>Subtext Lang</a></li><li><a href='http://byorgey.wordpress.com/catsters-guide-2/'>The Catsters</a></li><li><a href='http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53'>Share Elm -- Line of Sight</a></li><li><a href='http://codemirror.net/doc/manual.html#overview'>CodeMirror manual</a></li><li><a href='https://github.com/nkmathew/yasi-sexp-indenter'>batch s-exp indenter test</a></li></ul><br />"))))
((5138 49653 440988000) :INSERT
 (22 :CONTENTS "(:h3 \"Ok, serious notes now...\")

(:p \"This is all stuff I should read up on.\")

(:b \"Terrain generation\")
(:ul
 (:li (:a :href \"http://en.wikipedia.org/wiki/Maze_generation_algorithm\" \"Maze generation on wikipedia\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Articles#Map\" \"Rogue Basin page\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm\" \"Dungeon Building Algorithm\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python\" \"Dungeon Builder in Python\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels\" \"Cellular Automata for Terrain\"))
 (:li (:a :href \"http://pixelenvy.ca/wa/ca_cave.html\" \"More cellular automata for terrain\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Abstract_Dungeons\" \"Abstract dungeons from RogueBasin\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern\" \"Cavern delving\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation\" \"BSP Dungeon gen\")))

(:br)

(:b \"Clojure\")
(:ul
 (:li (:a :href \"https://github.com/JonyEpsilon/gorilla-repl\" \"Gorilla Repl\"))
 (:li (:a :href \"https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer\" \"core.logic Primer\"))
 (:li (:a :href \"https://github.com/clojure/core.logic\" \"core.logic GitHub\"))
 (:li (:a :href \"http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html\" \"Namespace Primer\"))
 (:li (:a :href \"https://gist.github.com/ghoseb/287710\" \"NS cheat-sheet\")))

(:br)
(:b \"LightTable\")
(:ul
 (:li (:a :href \"https://github.com/darthdeus/LightTable-Ruby\" \"Ruby mode\")))

(:br)
(:b \"Misc...\")
(:ul
 (:li (:a :href \"http://code.google.com/p/key-mon/source/checkout\" \"KeyMon -- tool for showing keystrokes in screencasts\"))
 (:li (:a :href \"http://www.subtext-lang.org/\" \"Subtext Lang\"))
 (:li (:a :href \"http://byorgey.wordpress.com/catsters-guide-2/\" \"The Catsters\"))
 (:li (:a :href \"http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53\" \"Share Elm -- Line of Sight\"))
 (:li (:a :href \"http://codemirror.net/doc/manual.html#overview\" \"CodeMirror manual\"))
 (:li (:a :href \"https://github.com/nkmathew/yasi-sexp-indenter\" \"batch s-exp indenter test\")))

(:br)"))
((5138 49653 441011000) :INSERT
 (22 :VALUE
  ((:RESULT
    . "<h3>Ok, serious notes now...</h3><p>This is all stuff I should read up on.</p><b>Terrain generation</b><ul><li><a href='http://en.wikipedia.org/wiki/Maze_generation_algorithm'>Maze generation on wikipedia</a></li><li><a href='http://www.roguebasin.com/index.php?title=Articles#Map'>Rogue Basin page</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm'>Dungeon Building Algorithm</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python'>Dungeon Builder in Python</a></li><li><a href='http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels'>Cellular Automata for Terrain</a></li><li><a href='http://pixelenvy.ca/wa/ca_cave.html'>More cellular automata for terrain</a></li><li><a href='http://www.roguebasin.com/index.php?title=Abstract_Dungeons'>Abstract dungeons from RogueBasin</a></li><li><a href='http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern'>Cavern delving</a></li><li><a href='http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation'>BSP Dungeon gen</a></li></ul><br /><b>Clojure</b><ul><li><a href='https://github.com/JonyEpsilon/gorilla-repl'>Gorilla Repl</a></li><li><a href='https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer'>core.logic Primer</a></li><li><a href='https://github.com/clojure/core.logic'>core.logic GitHub</a></li><li><a href='http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html'>Namespace Primer</a></li><li><a href='https://gist.github.com/ghoseb/287710'>NS cheat-sheet</a></li></ul><br /><b>LightTable</b><ul><li><a href='https://github.com/darthdeus/LightTable-Ruby'>Ruby mode</a></li></ul><br /><b>Misc...</b><ul><li><a href='http://code.google.com/p/key-mon/source/checkout'>KeyMon -- tool for showing keystrokes in screencasts</a></li><li><a href='http://www.subtext-lang.org/'>Subtext Lang</a></li><li><a href='http://byorgey.wordpress.com/catsters-guide-2/'>The Catsters</a></li><li><a href='http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53'>Share Elm -- Line of Sight</a></li><li><a href='http://codemirror.net/doc/manual.html#overview'>CodeMirror manual</a></li><li><a href='https://github.com/nkmathew/yasi-sexp-indenter'>batch s-exp indenter test</a></li></ul><br />"))))
((5138 66790 791240000) :DELETE
 (15 :CONTENTS
  "(format t \"Standard output capture!~%Yes, even with multiple lines!~%\")
(format t \"And yes, it will show you\")
(format t \" total \")
(format t \"output for a group of printing procs.\")"))
((5138 66790 791504000) :DELETE
 (15 :VALUE
  ((:RESULT ((NULL "NIL")))
   (:STDOUT . "Standard output capture!
Yes, even with multiple lines!
And yes, it will show you total output for a group of printing procs."))))
((5138 66790 791557000) :INSERT
 (15 :CONTENTS
  "(format t \"Standard output capture!~%Yes, even with multiple lines!~%\")
(format t \"And yes, it will show you\")
(format t \" total \")
(format t \"output for a group of printing procs.\")"))
((5138 66790 791598000) :INSERT
 (15 :VALUE
  ((:RESULT ((NULL "NIL")))
   (:STDOUT . "Standard output capture!
Yes, even with multiple lines!
And yes, it will show you total output for a group of printing procs."))))
((5138 66793 665058000) :DELETE
 (15 :CONTENTS
  "(format t \"Standard output capture!~%Yes, even with multiple lines!~%\")
(format t \"And yes, it will show you\")
(format t \" total \")
(format t \"output for a group of printing procs.\")"))
((5138 66793 665087000) :DELETE
 (15 :VALUE
  ((:RESULT ((NULL "NIL")))
   (:STDOUT . "Standard output capture!
Yes, even with multiple lines!
And yes, it will show you total output for a group of printing procs."))))
((5138 66793 665100000) :INSERT
 (15 :CONTENTS
  "(format t \"Standard output capture!~%Yes, even with multiple lines!~%\")
(format t \"And yes, it will show you\")
(format t \" totals \")
(format t \"output for a group of printing procs.\")"))
((5138 66793 665109000) :INSERT
 (15 :VALUE
  ((:RESULT ((NULL "NIL")))
   (:STDOUT . "Standard output capture!
Yes, even with multiple lines!
And yes, it will show you totals output for a group of printing procs."))))
((5138 66796 143950000) :DELETE
 (15 :CONTENTS
  "(format t \"Standard output capture!~%Yes, even with multiple lines!~%\")
(format t \"And yes, it will show you\")
(format t \" totals \")
(format t \"output for a group of printing procs.\")"))
((5138 66796 143981000) :DELETE
 (15 :VALUE
  ((:RESULT ((NULL "NIL")))
   (:STDOUT . "Standard output capture!
Yes, even with multiple lines!
And yes, it will show you totals output for a group of printing procs."))))
((5138 66796 143993000) :INSERT
 (15 :CONTENTS
  "(format t \"Standard output capture!~%Yes, even with multiple lines!~%\")
(format t \"And yes, it will show you\")
(format t \" total \")
(format t \"output for a group of printing procs.\")"))
((5138 66796 144000000) :INSERT
 (15 :VALUE
  ((:RESULT ((NULL "NIL")))
   (:STDOUT . "Standard output capture!
Yes, even with multiple lines!
And yes, it will show you total output for a group of printing procs."))))
((5138 76380 178827000) :DELETE
 (10 :CONTENTS
  ";; The working forms get evaled when an error happens part-way through!
(+ 2 3)
(+ 3 4)
(+ 4 5)
(values :yes :multiple :values :also :work!)
(+ 6 :test)"))
((5138 76380 178866000) :DELETE
 (10 :VALUE
  ((:RESULT ((INTEGER "5")) ((INTEGER "7")) ((INTEGER "9"))
    ((KEYWORD ":YES") (KEYWORD ":MULTIPLE") (KEYWORD ":VALUES")
     (KEYWORD ":ALSO") (KEYWORD ":WORK!"))
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 6 TEST)") (:DATUM . :TEST) (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . ""))))
((5138 76380 178876000) :INSERT
 (10 :CONTENTS
  ";; The working forms get evaled when an error happens part-way through!
(+ 2 3)
(+ 3 4)
(+ 4 5)
(values :yes :multiple :values :also :work! 7)
(+ 6 :test)"))
((5138 76380 178882000) :INSERT
 (10 :VALUE
  ((:RESULT ((INTEGER "5")) ((INTEGER "7")) ((INTEGER "9"))
    ((KEYWORD ":YES") (KEYWORD ":MULTIPLE") (KEYWORD ":VALUES")
     (KEYWORD ":ALSO") (KEYWORD ":WORK!") (INTEGER "7"))
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 6 TEST)") (:DATUM . :TEST) (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . ""))))
((5138 76384 990400000) :DELETE
 (10 :CONTENTS
  ";; The working forms get evaled when an error happens part-way through!
(+ 2 3)
(+ 3 4)
(+ 4 5)
(values :yes :multiple :values :also :work! 7)
(+ 6 :test)"))
((5138 76384 990419000) :DELETE
 (10 :VALUE
  ((:RESULT ((INTEGER "5")) ((INTEGER "7")) ((INTEGER "9"))
    ((KEYWORD ":YES") (KEYWORD ":MULTIPLE") (KEYWORD ":VALUES")
     (KEYWORD ":ALSO") (KEYWORD ":WORK!") (INTEGER "7"))
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 6 TEST)") (:DATUM . :TEST) (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . ""))))
((5138 76384 990429000) :INSERT
 (10 :CONTENTS
  ";; The working forms get evaled when an error happens part-way through!
(+ 2 3)
(+ 3 4)
(+ 4 5)
(values :yes :multiple :values :also :work!)
(+ 6 :test)"))
((5138 76384 990436000) :INSERT
 (10 :VALUE
  ((:RESULT ((INTEGER "5")) ((INTEGER "7")) ((INTEGER "9"))
    ((KEYWORD ":YES") (KEYWORD ":MULTIPLE") (KEYWORD ":VALUES")
     (KEYWORD ":ALSO") (KEYWORD ":WORK!"))
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 6 TEST)") (:DATUM . :TEST) (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . ""))))
((5138 80514 718094000) :DELETE
 (2 :CONTENTS "(:h1 \"Headings!\")

(:h2 \"Smaller headings!\")

(:p \"Paragraphs!\")

(:img :src \"/static/img/derpy-prepares-for-work.gif\" :style \"width: 450px;\")

(:p \"Pictures!\")"))
((5138 80514 718225000) :DELETE
 (2 :VALUE
  ((:RESULT
    . "<h1>Headings!</h1><h2>Smaller headings!</h2><p>Paragraphs!</p><img src='/static/img/derpy-prepares-for-work.gif' style='width: 450px;' /><p>Pictures!</p>"))))
((5138 80514 718242000) :INSERT
 (2 :CONTENTS "(:h2 \"Headings!\")

(:h3 \"Smaller headings!\")

(:p \"Paragraphs!\")

(:img :src \"/static/img/derpy-prepares-for-work.gif\" :style \"width: 450px;\")

(:p \"Pictures!\")"))
((5138 80514 718260000) :INSERT
 (2 :VALUE
  ((:RESULT
    . "<h2>Headings!</h2><h3>Smaller headings!</h3><p>Paragraphs!</p><img src='/static/img/derpy-prepares-for-work.gif' style='width: 450px;' /><p>Pictures!</p>"))))
((5138 80712 966232000) :DELETE
 (10 :CONTENTS
  ";; The working forms get evaled when an error happens part-way through!
(+ 2 3)
(+ 3 4)
(+ 4 5)
(values :yes :multiple :values :also :work!)
(+ 6 :test)"))
((5138 80712 966277000) :DELETE
 (10 :VALUE
  ((:RESULT ((INTEGER "5")) ((INTEGER "7")) ((INTEGER "9"))
    ((KEYWORD ":YES") (KEYWORD ":MULTIPLE") (KEYWORD ":VALUES")
     (KEYWORD ":ALSO") (KEYWORD ":WORK!"))
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 6 TEST)") (:DATUM . :TEST) (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . ""))))
((5138 80712 966285000) :INSERT
 (10 :CONTENTS
  ";; The working forms get evaled when an error happens part-way through!
(+ 2 3)
(+ 3 4)
(+ 4 5)
(values :yes :multiple :values :also :work!)
(+ 6 :test)"))
((5138 80712 966292000) :INSERT
 (10 :VALUE
  ((:RESULT ((INTEGER "5")) ((INTEGER "7")) ((INTEGER "9"))
    ((KEYWORD ":YES") (KEYWORD ":MULTIPLE") (KEYWORD ":VALUES")
     (KEYWORD ":ALSO") (KEYWORD ":WORK!"))
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 6 :TEST)") (:DATUM . :TEST) (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . ""))))
((5138 80716 325124000) :DELETE
 (7 :CONTENTS ";; errors!

(+ 2 3 4 :test)"))
((5138 80716 325142000) :DELETE
 (7 :VALUE
  ((:RESULT
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 2 3 4 TEST)") (:DATUM . :TEST)
       (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . ""))))
((5138 80716 325150000) :INSERT
 (7 :CONTENTS ";; errors!

(+ 2 3 4 :test)"))
((5138 80716 325154000) :INSERT
 (7 :VALUE
  ((:RESULT
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 2 3 4 :TEST)") (:DATUM . :TEST)
       (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . ""))))
((5138 80733 869685000) :DELETE
 (10 :CONTENTS
  ";; The working forms get evaled when an error happens part-way through!
(+ 2 3)
(+ 3 4)
(+ 4 5)
(values :yes :multiple :values :also :work!)
(+ 6 :test)"))
((5138 80733 869703000) :DELETE
 (10 :VALUE
  ((:RESULT ((INTEGER "5")) ((INTEGER "7")) ((INTEGER "9"))
    ((KEYWORD ":YES") (KEYWORD ":MULTIPLE") (KEYWORD ":VALUES")
     (KEYWORD ":ALSO") (KEYWORD ":WORK!"))
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 6 :TEST)") (:DATUM . :TEST) (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . ""))))
((5138 80733 869710000) :INSERT
 (10 :CONTENTS
  ";; The working forms get evaled when an error happens part-way through!
(+ 2 3)
(+ 3 4)
(+ 4 5)
(values :yes :multiple :values :also :work!)
(format \"blah\")"))
((5138 80733 869715000) :INSERT
 (10 :VALUE
  ((:RESULT ((INTEGER "5")) ((INTEGER "7")) ((INTEGER "9"))
    ((KEYWORD ":YES") (KEYWORD ":MULTIPLE") (KEYWORD ":VALUES")
     (KEYWORD ":ALSO") (KEYWORD ":WORK!"))
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SB-INT:SIMPLE-PROGRAM-ERROR)
       (:ERROR-MESSAGE . "invalid number of arguments: 1")
       (:FORM . "(FORMAT \"blah\")")))))
   (:STDOUT . ""))))
((5138 82023 159065000) :DELETE
 (10 :CONTENTS
  ";; The working forms get evaled when an error happens part-way through!
(+ 2 3)
(+ 3 4)
(+ 4 5)
(values :yes :multiple :values :also :work!)
(format \"blah\")"))
((5138 82023 159090000) :DELETE
 (10 :VALUE
  ((:RESULT ((INTEGER "5")) ((INTEGER "7")) ((INTEGER "9"))
    ((KEYWORD ":YES") (KEYWORD ":MULTIPLE") (KEYWORD ":VALUES")
     (KEYWORD ":ALSO") (KEYWORD ":WORK!"))
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SB-INT:SIMPLE-PROGRAM-ERROR)
       (:ERROR-MESSAGE . "invalid number of arguments: 1")
       (:FORM . "(FORMAT \"blah\")")))))
   (:STDOUT . ""))))
((5138 82023 159100000) :INSERT
 (10 :CONTENTS
  ";; The working forms get evaled when an error happens part-way through!
(+ 2 3)
(+ 3 4)
(+ 4 5)
(values :yes :multiple :values :also :work!)
(list :no :they :are :not :the :same :as :a :list :of :values)
(format \"blah\")"))
((5138 82023 159109000) :INSERT
 (10 :VALUE
  ((:RESULT ((INTEGER "5")) ((INTEGER "7")) ((INTEGER "9"))
    ((KEYWORD ":YES") (KEYWORD ":MULTIPLE") (KEYWORD ":VALUES")
     (KEYWORD ":ALSO") (KEYWORD ":WORK!"))
    ((CONS "(:NO :THEY :ARE :NOT :THE :SAME :AS :A :LIST :OF :VALUES)"))
    ((ERROR
      ((CL-NOTEBOOK::ERROR-TYPE . SB-INT:SIMPLE-PROGRAM-ERROR)
       (:ERROR-MESSAGE . "invalid number of arguments: 1")
       (:FORM . "(FORMAT \"blah\")")))))
   (:STDOUT . ""))))
((5139 14864 736517000) :DELETE (34 :CELL-ORDER (23 2 1 15 7 10 22)))
((5139 14864 736751000) :INSERT (35 :CELL-ORDER (23 2 15 1 7 10 22)))
((5139 14870 664922000) :DELETE (35 :CELL-ORDER (23 2 15 1 7 10 22)))
((5139 14870 665027000) :INSERT (36 :CELL-ORDER (23 2 15 1 7 10 22)))
((5139 14874 470942000) :DELETE (36 :CELL-ORDER (23 2 15 1 7 10 22)))
((5139 14874 470984000) :INSERT (37 :CELL-ORDER (23 2 15 1 7 10 22)))
((5139 15098 206397000) :DELETE (37 :CELL-ORDER (23 2 15 1 7 10 22)))
((5139 15098 206412000) :INSERT (38 :CELL-ORDER (23 2 15 1 7 10 22)))
((5139 15111 989574000) :DELETE (38 :CELL-ORDER (23 2 15 1 7 10 22)))
((5139 15111 989590000) :INSERT (39 :CELL-ORDER (23 2 15 1 7 10 22)))
((5139 15119 116835000) :DELETE (39 :CELL-ORDER (23 2 15 1 7 10 22)))
((5139 15119 116849000) :INSERT (40 :CELL-ORDER (23 2 15 1 7 10 22)))
((5139 15214 775825000) :DELETE (40 :CELL-ORDER (23 2 15 1 7 10 22)))
((5139 15214 775842000) :INSERT (41 :CELL-ORDER (23 2 15 1 7 10 22)))
((5139 15217 223876000) :DELETE (41 :CELL-ORDER (23 2 15 1 7 10 22)))
((5139 15217 223898000) :INSERT (42 :CELL-ORDER (23 2 15 1 7 10 22)))
((5139 48216 604048000) :DELETE (42 :CELL-ORDER (23 2 15 1 7 10 22)))
((5139 48216 604065000) :INSERT (43 :CELL-ORDER (23 2 15 1 7 10 22)))
((5139 48220 984794000) :DELETE (43 :CELL-ORDER (23 2 15 1 7 10 22)))
((5139 48220 984808000) :INSERT (44 :CELL-ORDER (23 2 15 1 10 7 22)))
((5139 48223 249819000) :DELETE (44 :CELL-ORDER (23 2 15 1 10 7 22)))
((5139 48223 249837000) :INSERT (45 :CELL-ORDER (23 2 15 1 7 10 22)))
((5139 48227 102241000) :DELETE (45 :CELL-ORDER (23 2 15 1 7 10 22)))
((5139 48227 102256000) :INSERT (46 :CELL-ORDER (23 2 15 1 10 7 22)))
((5139 48231 898579000) :DELETE (46 :CELL-ORDER (23 2 15 1 10 7 22)))
((5139 48231 898596000) :INSERT (47 :CELL-ORDER (23 2 15 1 7 10 22)))
((5139 48980 492791000) :DELETE (47 :CELL-ORDER (23 2 15 1 7 10 22)))
((5139 48980 492810000) :INSERT (48 :CELL-ORDER (23 2 15 1 7 10 22)))
((5139 49848 269978000) :INSERT (49 :CELL NIL))
((5139 49848 270003000) :INSERT (49 :CELL-TYPE :CL-WHO))
((5139 49848 270011000) :INSERT (49 :CONTENTS ""))
((5139 49848 270015000) :INSERT (49 :VALUE ""))
((5139 49894 641231000) :DELETE (49 :CONTENTS ""))
((5139 49894 641250000) :DELETE (49 :VALUE ""))
((5139 49894 641256000) :INSERT
 (49 :CONTENTS "(:ul (loop repeat 10 do (htm (:li \"Something\"))))"))
((5139 49894 641262000) :INSERT
 (49 :VALUE
  ((:RESULT
    (ERROR
     ((CL-NOTEBOOK::ERROR-TYPE . UNDEFINED-FUNCTION)
      (:NAME . CL-NOTEBOOK::HTML-TREE-TO-STRING)))))))
((5139 49901 224721000) :DELETE
 (49 :CONTENTS "(:ul (loop repeat 10 do (htm (:li \"Something\"))))"))
((5139 49901 224742000) :DELETE
 (49 :VALUE
  ((:RESULT
    (ERROR
     ((CL-NOTEBOOK::ERROR-TYPE . UNDEFINED-FUNCTION)
      (:NAME . CL-NOTEBOOK::HTML-TREE-TO-STRING)))))))
((5139 49901 224750000) :INSERT
 (49 :CONTENTS "(:ul (loop repeat 10 do (htm (:li \"Something\"))))"))
((5139 49901 224757000) :INSERT
 (49 :VALUE
  ((:RESULT
    (ERROR
     ((CL-NOTEBOOK::ERROR-TYPE . UNDEFINED-FUNCTION)
      (:NAME . CL-NOTEBOOK::HTML-TREE-TO-STRING)))))))
((5139 49914 40294000) :DELETE
 (49 :CONTENTS "(:ul (loop repeat 10 do (htm (:li \"Something\"))))"))
((5139 49914 40310000) :DELETE
 (49 :VALUE
  ((:RESULT
    (ERROR
     ((CL-NOTEBOOK::ERROR-TYPE . UNDEFINED-FUNCTION)
      (:NAME . CL-NOTEBOOK::HTML-TREE-TO-STRING)))))))
((5139 49914 40315000) :INSERT (49 :CONTENTS "(:ul (:li \"something\"))"))
((5139 49914 40320000) :INSERT
 (49 :VALUE
  ((:RESULT
    (ERROR
     ((CL-NOTEBOOK::ERROR-TYPE . UNDEFINED-FUNCTION)
      (:NAME . CL-NOTEBOOK::HTML-TREE-TO-STRING)))))))
((5139 49959 985856000) :DELETE (49 :CONTENTS "(:ul (:li \"something\"))"))
((5139 49959 985879000) :DELETE
 (49 :VALUE
  ((:RESULT
    (ERROR
     ((CL-NOTEBOOK::ERROR-TYPE . UNDEFINED-FUNCTION)
      (:NAME . CL-NOTEBOOK::HTML-TREE-TO-STRING)))))))
((5139 49959 985887000) :INSERT (49 :CONTENTS "(:ul (:li \"something\"))"))
((5139 49959 985894000) :INSERT
 (49 :VALUE
  ((:RESULT
    (ERROR
     ((CL-NOTEBOOK::ERROR-TYPE . UNDEFINED-FUNCTION)
      (:NAME . CL-NOTEBOOK::HTML-TREE-TO-STRING)))))))
((5139 50071 762205000) :DELETE (49 :CONTENTS "(:ul (:li \"something\"))"))
((5139 50071 762226000) :DELETE
 (49 :VALUE
  ((:RESULT
    (ERROR
     ((CL-NOTEBOOK::ERROR-TYPE . UNDEFINED-FUNCTION)
      (:NAME . CL-NOTEBOOK::HTML-TREE-TO-STRING)))))))
((5139 50071 762233000) :INSERT (49 :CONTENTS "(:ul (:li \"something\"))"))
((5139 50071 762239000) :INSERT
 (49 :VALUE ((:RESULT . "<ul><li>something</li></ul>"))))
((5139 50307 588173000) :DELETE (49 :CONTENTS "(:ul (:li \"something\"))"))
((5139 50307 588190000) :DELETE
 (49 :VALUE ((:RESULT . "<ul><li>something</li></ul>"))))
((5139 50307 588195000) :INSERT (49 :CONTENTS "(:ul (:li \"something\"))"))
((5139 50307 588199000) :INSERT
 (49 :VALUE ((:RESULT . "<ul><li>something</li></ul>"))))
((5139 50514 541358000) :INSERT (50 :CELL NIL))
((5139 50514 541369000) :INSERT (50 :CELL-TYPE :COMMON-LISP))
((5139 50514 541372000) :INSERT (50 :CONTENTS ""))
((5139 50514 541375000) :INSERT (50 :VALUE ""))
((5139 50523 429574000) :DELETE (50 :CONTENTS ""))
((5139 50523 429593000) :DELETE (50 :VALUE ""))
((5139 50523 429599000) :INSERT (50 :CONTENTS "(in-package :cl-notebook)"))
((5139 50523 429605000) :INSERT
 (50 :VALUE
  ((:RESULT ((PACKAGE "#<PACKAGE \"CL-NOTEBOOK\">"))) (:STDOUT . ""))))
((5139 50548 227686000) :DELETE (49 :CONTENTS "(:ul (:li \"something\"))"))
((5139 50548 227705000) :DELETE
 (49 :VALUE ((:RESULT . "<ul><li>something</li></ul>"))))
((5139 50548 227711000) :INSERT
 (49 :CONTENTS "(:ul (loop repeat 5 do (htm (:li \"something\"))))"))
((5139 50548 227716000) :INSERT
 (49 :VALUE
  ((:RESULT
    . "<ul><li>something</li><li>something</li><li>something</li><li>something</li><li>something</li></ul>"))))
((5139 50603 104523000) :DELETE
 (50 :VALUE
  ((:RESULT ((PACKAGE "#<PACKAGE \"CL-NOTEBOOK\">"))) (:STDOUT . ""))))
((5139 50603 104548000) :DELETE (50 :CONTENTS "(in-package :cl-notebook)"))
((5139 50603 104561000) :DELETE (50 :CELL-TYPE :COMMON-LISP))
((5139 50603 104572000) :DELETE (50 :CELL NIL))
((5139 50777 909711000) :DELETE
 (49 :CONTENTS "(:ul (loop repeat 5 do (htm (:li \"something\"))))"))
((5139 50777 909889000) :DELETE
 (49 :VALUE
  ((:RESULT
    . "<ul><li>something</li><li>something</li><li>something</li><li>something</li><li>something</li></ul>"))))
((5139 50777 909909000) :INSERT
 (49 :CONTENTS "(:ul (loop repeat 5 do (htm (:li \"something\"))))"))
((5139 50777 909940000) :INSERT
 (49 :VALUE
  ((:RESULT
    . "<ul><li>something</li><li>something</li><li>something</li><li>something</li><li>something</li></ul>"))))
((5139 50782 629972000) :DELETE
 (49 :CONTENTS "(:ul (loop repeat 5 do (htm (:li \"something\"))))"))
((5139 50782 629991000) :DELETE
 (49 :VALUE
  ((:RESULT
    . "<ul><li>something</li><li>something</li><li>something</li><li>something</li><li>something</li></ul>"))))
((5139 50782 629999000) :INSERT
 (49 :CONTENTS "(:ul (loop repeat 2 do (htm (:li \"something\"))))"))
((5139 50782 630005000) :INSERT
 (49 :VALUE ((:RESULT . "<ul><li>something</li><li>something</li></ul>"))))
((5139 50786 762992000) :DELETE
 (49 :CONTENTS "(:ul (loop repeat 2 do (htm (:li \"something\"))))"))
((5139 50786 763011000) :DELETE
 (49 :VALUE ((:RESULT . "<ul><li>something</li><li>something</li></ul>"))))
((5139 50786 763019000) :INSERT
 (49 :CONTENTS "(:ul (loop repeat 4 do (htm (:li \"something\"))))"))
((5139 50786 763027000) :INSERT
 (49 :VALUE
  ((:RESULT
    . "<ul><li>something</li><li>something</li><li>something</li><li>something</li></ul>"))))
((5139 50799 888671000) :DELETE
 (49 :VALUE
  ((:RESULT
    . "<ul><li>something</li><li>something</li><li>something</li><li>something</li></ul>"))))
((5139 50799 888694000) :DELETE
 (49 :CONTENTS "(:ul (loop repeat 4 do (htm (:li \"something\"))))"))
((5139 50799 888711000) :DELETE (49 :CELL NIL))
((5139 50799 888723000) :DELETE (49 :CELL-TYPE :CL-WHO))
((5139 58252 404585000) :DELETE
 (2 :CONTENTS "(:h2 \"Headings!\")

(:h3 \"Smaller headings!\")

(:p \"Paragraphs!\")

(:img :src \"/static/img/derpy-prepares-for-work.gif\" :style \"width: 450px;\")

(:p \"Pictures!\")"))
((5139 58252 404789000) :DELETE
 (2 :VALUE
  ((:RESULT
    . "<h2>Headings!</h2><h3>Smaller headings!</h3><p>Paragraphs!</p><img src='/static/img/derpy-prepares-for-work.gif' style='width: 450px;' /><p>Pictures!</p>"))))
((5139 58252 404810000) :INSERT
 (2 :CONTENTS "(:h2 \"Headings!\")

(:h3 \"Smaller headings!\")

(:p \"Paragraphs!\")
"))
((5139 58252 404854000) :INSERT
 (2 :VALUE
  ((:RESULT
    . "<h2>Headings!</h2><h3>Smaller headings!</h3><p>Paragraphs!</p>"))))
((5139 61381 508877000) :INSERT (51 :CELL NIL))
((5139 61381 508921000) :INSERT (51 :CELL-TYPE :CL-WHO))
((5139 61381 508932000) :INSERT (51 :CONTENTS ""))
((5139 61381 508937000) :INSERT (51 :VALUE ""))
((5139 61540 432561000) :DELETE (51 :CONTENTS ""))
((5139 61540 432577000) :DELETE (51 :VALUE ""))
((5139 61540 432582000) :INSERT
 (51 :CONTENTS "(flet ((section (title &rest uris)
         (htm (:div (:p (str title))
                    (:ul (loop for u in uris do (htm (:li (:a :href u (str u))))))))))
   (section \"cl-notebook dev\"
      \"http://genericons.com/#draggable\"))"))
((5139 61540 432588000) :INSERT
 (51 :VALUE
  ((:RESULT
    . "<div><p>cl-notebook dev</p><ul><li><a href='http://genericons.com/#draggable'>http://genericons.com/#draggable</a></li></ul></div>"))))
((5139 61584 109620000) :DELETE
 (51 :CONTENTS "(flet ((section (title &rest uris)
         (htm (:div (:p (str title))
                    (:ul (loop for u in uris do (htm (:li (:a :href u (str u))))))))))
   (section \"cl-notebook dev\"
      \"http://genericons.com/#draggable\"))"))
((5139 61584 109650000) :DELETE
 (51 :VALUE
  ((:RESULT
    . "<div><p>cl-notebook dev</p><ul><li><a href='http://genericons.com/#draggable'>http://genericons.com/#draggable</a></li></ul></div>"))))
((5139 61584 109658000) :INSERT
 (51 :CONTENTS "(flet ((section (title &rest uris)
         (htm (:div (:p (str title))
                    (:ul (loop for (u name) on uris by #'cddr
                               do (htm (:li (:a :href u name)))))))))
   (section \"cl-notebook dev\"
      \"http://genericons.com/#draggable\" \"Genericons\"))"))
((5139 61584 109665000) :INSERT
 (51 :VALUE
  ((:RESULT
    . "<div><p>cl-notebook dev</p><ul><li><a href='http://genericons.com/#draggable'></a></li></ul></div>"))))
((5139 61591 372601000) :DELETE
 (51 :CONTENTS "(flet ((section (title &rest uris)
         (htm (:div (:p (str title))
                    (:ul (loop for (u name) on uris by #'cddr
                               do (htm (:li (:a :href u name)))))))))
   (section \"cl-notebook dev\"
      \"http://genericons.com/#draggable\" \"Genericons\"))"))
((5139 61591 372633000) :DELETE
 (51 :VALUE
  ((:RESULT
    . "<div><p>cl-notebook dev</p><ul><li><a href='http://genericons.com/#draggable'></a></li></ul></div>"))))
((5139 61591 372645000) :INSERT
 (51 :CONTENTS "(flet ((section (title &rest uris)
         (htm (:div (:p (str title))
                    (:ul (loop for (u name) on uris by #'cddr
                               do (htm (:li (:a :href u (str name)))))))))
   (section \"cl-notebook dev\"
      \"http://genericons.com/#draggable\" \"Genericons\"))"))
((5139 61591 372656000) :INSERT
 (51 :VALUE ((:RESULT (ERROR ((ERROR-TYPE . END-OF-FILE)))))))
((5139 61607 658434000) :DELETE
 (51 :CONTENTS "(flet ((section (title &rest uris)
         (htm (:div (:p (str title))
                    (:ul (loop for (u name) on uris by #'cddr
                               do (htm (:li (:a :href u (str name)))))))))
   (section \"cl-notebook dev\"
      \"http://genericons.com/#draggable\" \"Genericons\"))"))
((5139 61607 658457000) :DELETE
 (51 :VALUE ((:RESULT (ERROR ((ERROR-TYPE . END-OF-FILE)))))))
((5139 61607 658464000) :INSERT
 (51 :CONTENTS "(flet ((section (title &rest uris)
         (htm (:div (:p (str title))
                    (:ul (loop for (u name) on uris by #'cddr
                               do (htm (:li (:a :href u name))))))))
   (section \"cl-notebook dev\"
      \"http://genericons.com/#draggable\" \"Genericons\"))"))
((5139 61607 658472000) :INSERT
 (51 :VALUE ((:RESULT (ERROR ((ERROR-TYPE . END-OF-FILE)))))))
((5139 61652 215756000) :DELETE
 (51 :CONTENTS "(flet ((section (title &rest uris)
         (htm (:div (:p (str title))
                    (:ul (loop for (u name) on uris by #'cddr
                               do (htm (:li (:a :href u name))))))))
   (section \"cl-notebook dev\"
      \"http://genericons.com/#draggable\" \"Genericons\"))"))
((5139 61652 215777000) :DELETE
 (51 :VALUE ((:RESULT (ERROR ((ERROR-TYPE . END-OF-FILE)))))))
((5139 61652 215787000) :INSERT
 (51 :CONTENTS "(flet ((section (title uris)
         (htm (:div (:p (str title))
                    (:ul (loop for (u name) in uris
                               do (htm (:li (:a :href u name)))))))))
   (section \"cl-notebook dev\"
      '(\"http://genericons.com/#draggable\" \"Genericons\")))"))
((5139 61652 215795000) :INSERT
 (51 :VALUE
  ((:RESULT
    (ERROR
     ((ERROR-TYPE . TYPE-ERROR) (:DATUM . "http://genericons.com/#draggable")
      (:EXPECTED-TYPE . LIST)))))))
((5139 61685 746921000) :DELETE
 (51 :CONTENTS "(flet ((section (title uris)
         (htm (:div (:p (str title))
                    (:ul (loop for (u name) in uris
                               do (htm (:li (:a :href u name)))))))))
   (section \"cl-notebook dev\"
      '(\"http://genericons.com/#draggable\" \"Genericons\")))"))
((5139 61685 746945000) :DELETE
 (51 :VALUE
  ((:RESULT
    (ERROR
     ((ERROR-TYPE . TYPE-ERROR) (:DATUM . "http://genericons.com/#draggable")
      (:EXPECTED-TYPE . LIST)))))))
((5139 61685 746953000) :INSERT
 (51 :CONTENTS "(flet ((section (title uris)
         (htm (:div (:p (str title))
                    (:ul (loop for (u name) in uris
                               do (htm (:li (:a :href u name)))))))))
   (section \"cl-notebook dev\"
      '(\"http://genericons.com/#draggable\" \"Genericons\")))"))
((5139 61685 746960000) :INSERT
 (51 :VALUE
  ((:RESULT
    (ERROR
     ((ERROR-TYPE . TYPE-ERROR) (:DATUM . "http://genericons.com/#draggable")
      (:EXPECTED-TYPE . LIST)))))))
((5139 61743 617271000) :DELETE
 (51 :CONTENTS "(flet ((section (title uris)
         (htm (:div (:p (str title))
                    (:ul (loop for (u name) in uris
                               do (htm (:li (:a :href u name)))))))))
   (section \"cl-notebook dev\"
      '(\"http://genericons.com/#draggable\" \"Genericons\")))"))
((5139 61743 617293000) :DELETE
 (51 :VALUE
  ((:RESULT
    (ERROR
     ((ERROR-TYPE . TYPE-ERROR) (:DATUM . "http://genericons.com/#draggable")
      (:EXPECTED-TYPE . LIST)))))))
((5139 61743 617299000) :INSERT
 (51 :CONTENTS "(flet ((section (title &rest uris)
         (htm (:div (:p (str title))
                    (:ul (loop for u in uris
                               do (htm (:li (:a :href u (str u))))))))))
   (section \"cl-notebook dev\"
      \"http://genericons.com/#draggable\"))"))
((5139 61743 617306000) :INSERT
 (51 :VALUE
  ((:RESULT
    . "<div><p>cl-notebook dev</p><ul><li><a href='http://genericons.com/#draggable'>http://genericons.com/#draggable</a></li></ul></div>"))))
((5139 61772 11088000) :DELETE
 (51 :CONTENTS "(flet ((section (title &rest uris)
         (htm (:div (:p (str title))
                    (:ul (loop for u in uris
                               do (htm (:li (:a :href u (str u))))))))))
   (section \"cl-notebook dev\"
      \"http://genericons.com/#draggable\"))"))
((5139 61772 11111000) :DELETE
 (51 :VALUE
  ((:RESULT
    . "<div><p>cl-notebook dev</p><ul><li><a href='http://genericons.com/#draggable'>http://genericons.com/#draggable</a></li></ul></div>"))))
((5139 61772 11118000) :INSERT
 (51 :CONTENTS "(flet ((section (title &rest uris)
         (htm (:div (:p (str title))
                    (:ul (loop for (u name) in uris by #'cddr
                               do (htm (:li (:a :href u (str name))))))))))
   (section \"cl-notebook dev\"
      \"http://genericons.com/#draggable\" \"Test\"))"))
((5139 61772 11125000) :INSERT
 (51 :VALUE
  ((:RESULT
    (ERROR
     ((ERROR-TYPE . TYPE-ERROR) (:DATUM . "http://genericons.com/#draggable")
      (:EXPECTED-TYPE . LIST)))))))
((5139 61825 363604000) :DELETE
 (51 :CONTENTS "(flet ((section (title &rest uris)
         (htm (:div (:p (str title))
                    (:ul (loop for (u name) in uris by #'cddr
                               do (htm (:li (:a :href u (str name))))))))))
   (section \"cl-notebook dev\"
      \"http://genericons.com/#draggable\" \"Test\"))"))
((5139 61825 363628000) :DELETE
 (51 :VALUE
  ((:RESULT
    (ERROR
     ((ERROR-TYPE . TYPE-ERROR) (:DATUM . "http://genericons.com/#draggable")
      (:EXPECTED-TYPE . LIST)))))))
((5139 61825 363634000) :INSERT
 (51 :CONTENTS "(flet ((section (title &rest uris)
         (htm (:div (:p (str title))
                    (:ul (loop for (u name) on uris by #'cddr
                               do (htm (:li (:a :href u (str name))))))))))
   (section \"cl-notebook dev\"
      \"http://genericons.com/#draggable\" \"Test\"))"))
((5139 61825 363641000) :INSERT
 (51 :VALUE
  ((:RESULT
    . "<div><p>cl-notebook dev</p><ul><li><a href='http://genericons.com/#draggable'>Test</a></li></ul></div>"))))
((5139 61835 615130000) :DELETE
 (51 :CONTENTS "(flet ((section (title &rest uris)
         (htm (:div (:p (str title))
                    (:ul (loop for (u name) on uris by #'cddr
                               do (htm (:li (:a :href u (str name))))))))))
   (section \"cl-notebook dev\"
      \"http://genericons.com/#draggable\" \"Test\"))"))
((5139 61835 615150000) :DELETE
 (51 :VALUE
  ((:RESULT
    . "<div><p>cl-notebook dev</p><ul><li><a href='http://genericons.com/#draggable'>Test</a></li></ul></div>"))))
((5139 61835 615157000) :INSERT
 (51 :CONTENTS "(flet ((section (title &rest uris)
         (htm (:div (:p (str title))
                    (:ul (loop for (u name) on uris by #'cddr
                               do (htm (:li (:a :href u (str name))))))))))
   (section \"cl-notebook dev\"
      \"http://genericons.com/#draggable\" \"Genericons\"))"))
((5139 61835 615163000) :INSERT
 (51 :VALUE
  ((:RESULT
    . "<div><p>cl-notebook dev</p><ul><li><a href='http://genericons.com/#draggable'>Genericons</a></li></ul></div>"))))
((5139 61851 956353000) :DELETE
 (51 :CONTENTS "(flet ((section (title &rest uris)
         (htm (:div (:p (str title))
                    (:ul (loop for (u name) on uris by #'cddr
                               do (htm (:li (:a :href u (str name))))))))))
   (section \"cl-notebook dev\"
      \"http://genericons.com/#draggable\" \"Genericons\"))"))
((5139 61851 956399000) :DELETE
 (51 :VALUE
  ((:RESULT
    . "<div><p>cl-notebook dev</p><ul><li><a href='http://genericons.com/#draggable'>Genericons</a></li></ul></div>"))))
((5139 61851 956407000) :INSERT
 (51 :CONTENTS "(flet ((section (title &rest uris)
         (htm (:div (:p (:b (str title)))
                    (:ul (loop for (u name) on uris by #'cddr
                               do (htm (:li (:a :href u (str name))))))))))
   (section \"cl-notebook dev\"
      \"http://genericons.com/#draggable\" \"Genericons\"))"))
((5139 61851 956414000) :INSERT
 (51 :VALUE
  ((:RESULT
    . "<div><p><b>cl-notebook dev</b></p><ul><li><a href='http://genericons.com/#draggable'>Genericons</a></li></ul></div>"))))
((5139 61867 311439000) :DELETE
 (51 :CONTENTS "(flet ((section (title &rest uris)
         (htm (:div (:p (:b (str title)))
                    (:ul (loop for (u name) on uris by #'cddr
                               do (htm (:li (:a :href u (str name))))))))))
   (section \"cl-notebook dev\"
      \"http://genericons.com/#draggable\" \"Genericons\"))"))
((5139 61867 311461000) :DELETE
 (51 :VALUE
  ((:RESULT
    . "<div><p><b>cl-notebook dev</b></p><ul><li><a href='http://genericons.com/#draggable'>Genericons</a></li></ul></div>"))))
((5139 61867 311468000) :INSERT
 (51 :CONTENTS "(flet ((section (title &rest uris)
         (htm (:div (:p (:b (htm title)))
                    (:ul (loop for (u name) on uris by #'cddr
                               do (htm (:li (:a :href u (str name))))))))))
   (section \"cl-notebook Dev\"
      \"http://genericons.com/#draggable\" \"Genericons\"))"))
((5139 61867 311474000) :INSERT
 (51 :VALUE
  ((:RESULT
    . "<div><p><b></b></p><ul><li><a href='http://genericons.com/#draggable'>Genericons</a></li></ul></div>"))))
((5139 61874 865041000) :DELETE
 (51 :CONTENTS "(flet ((section (title &rest uris)
         (htm (:div (:p (:b (htm title)))
                    (:ul (loop for (u name) on uris by #'cddr
                               do (htm (:li (:a :href u (str name))))))))))
   (section \"cl-notebook Dev\"
      \"http://genericons.com/#draggable\" \"Genericons\"))"))
((5139 61874 865064000) :DELETE
 (51 :VALUE
  ((:RESULT
    . "<div><p><b></b></p><ul><li><a href='http://genericons.com/#draggable'>Genericons</a></li></ul></div>"))))
((5139 61874 865071000) :INSERT
 (51 :CONTENTS "(flet ((section (title &rest uris)
         (htm (:div (:p (:b (str title)))
                    (:ul (loop for (u name) on uris by #'cddr
                               do (htm (:li (:a :href u (str name))))))))))
   (section \"cl-notebook Dev\"
      \"http://genericons.com/#draggable\" \"Genericons\"))"))
((5139 61874 865079000) :INSERT
 (51 :VALUE
  ((:RESULT
    . "<div><p><b>cl-notebook Dev</b></p><ul><li><a href='http://genericons.com/#draggable'>Genericons</a></li></ul></div>"))))
((5139 61890 83832000) :DELETE
 (51 :CONTENTS "(flet ((section (title &rest uris)
         (htm (:div (:p (:b (str title)))
                    (:ul (loop for (u name) on uris by #'cddr
                               do (htm (:li (:a :href u (str name))))))))))
   (section \"cl-notebook Dev\"
      \"http://genericons.com/#draggable\" \"Genericons\"))"))
((5139 61890 83853000) :DELETE
 (51 :VALUE
  ((:RESULT
    . "<div><p><b>cl-notebook Dev</b></p><ul><li><a href='http://genericons.com/#draggable'>Genericons</a></li></ul></div>"))))
((5139 61890 83863000) :INSERT
 (51 :CONTENTS "(flet ((section (title &rest uris)
         (htm (:div (:p (:b title))
                    (:ul (loop for (u name) on uris by #'cddr
                               do (htm (:li (:a :href u (str name))))))))))
   (section \"cl-notebook Dev\"
      \"http://genericons.com/#draggable\" \"Genericons\"))"))
((5139 61890 83869000) :INSERT
 (51 :VALUE
  ((:RESULT
    . "<div><p><b></b></p><ul><li><a href='http://genericons.com/#draggable'>Genericons</a></li></ul></div>"))))
((5139 61897 629723000) :DELETE
 (51 :CONTENTS "(flet ((section (title &rest uris)
         (htm (:div (:p (:b title))
                    (:ul (loop for (u name) on uris by #'cddr
                               do (htm (:li (:a :href u (str name))))))))))
   (section \"cl-notebook Dev\"
      \"http://genericons.com/#draggable\" \"Genericons\"))"))
((5139 61897 629746000) :DELETE
 (51 :VALUE
  ((:RESULT
    . "<div><p><b></b></p><ul><li><a href='http://genericons.com/#draggable'>Genericons</a></li></ul></div>"))))
((5139 61897 629754000) :INSERT
 (51 :CONTENTS "(flet ((section (title &rest uris)
         (htm (:div (:p (:b (str title))
                    (:ul (loop for (u name) on uris by #'cddr
                               do (htm (:li (:a :href u (str name))))))))))
   (section \"cl-notebook Dev\"
      \"http://genericons.com/#draggable\" \"Genericons\"))"))
((5139 61897 629761000) :INSERT
 (51 :VALUE ((:RESULT (ERROR ((ERROR-TYPE . END-OF-FILE)))))))
((5139 61905 155220000) :DELETE
 (51 :CONTENTS "(flet ((section (title &rest uris)
         (htm (:div (:p (:b (str title))
                    (:ul (loop for (u name) on uris by #'cddr
                               do (htm (:li (:a :href u (str name))))))))))
   (section \"cl-notebook Dev\"
      \"http://genericons.com/#draggable\" \"Genericons\"))"))
((5139 61905 155241000) :DELETE
 (51 :VALUE ((:RESULT (ERROR ((ERROR-TYPE . END-OF-FILE)))))))
((5139 61905 155246000) :INSERT
 (51 :CONTENTS "(flet ((section (title &rest uris)
         (htm (:div (:p (:b (str title)))
                    (:ul (loop for (u name) on uris by #'cddr
                               do (htm (:li (:a :href u (str name))))))))))
   (section \"cl-notebook Dev\"
      \"http://genericons.com/#draggable\" \"Genericons\"))"))
((5139 61905 155253000) :INSERT
 (51 :VALUE
  ((:RESULT
    . "<div><p><b>cl-notebook Dev</b></p><ul><li><a href='http://genericons.com/#draggable'>Genericons</a></li></ul></div>"))))
((5139 76215 208989000) :DELETE (48 :CELL-ORDER (23 2 15 1 7 10 22)))
((5139 76215 209150000) :INSERT (52 :CELL-ORDER (23 2 15 1 10 7 22 51)))
((5139 76218 528241000) :DELETE (52 :CELL-ORDER (23 2 15 1 10 7 22 51)))
((5139 76218 528354000) :INSERT (53 :CELL-ORDER (23 2 15 1 7 10 22 51)))
((5139 76322 588851000) :DELETE
 (51 :CONTENTS "(flet ((section (title &rest uris)
         (htm (:div (:p (:b (str title)))
                    (:ul (loop for (u name) on uris by #'cddr
                               do (htm (:li (:a :href u (str name))))))))))
   (section \"cl-notebook Dev\"
      \"http://genericons.com/#draggable\" \"Genericons\"))"))
((5139 76322 588880000) :DELETE
 (51 :VALUE
  ((:RESULT
    . "<div><p><b>cl-notebook Dev</b></p><ul><li><a href='http://genericons.com/#draggable'>Genericons</a></li></ul></div>"))))
((5139 76322 588887000) :INSERT
 (51 :CONTENTS "(flet ((section (title &rest uris)
         (htm (:div (:p (:b (str title)))
                    (:ul (loop for (u name) on uris by #'cddr
                               do (htm (:li (:a :href u (str name))))))))))
   (section \"cl-notebook Dev\"
		\"http://genericons.com/#draggable\" \"Genericons\")
      
   (section \"Misc...\"
		\"http://code.google.com/p/key-mon/source/checkout\" \"KeyMon -- tool for showing keystrokes in screencasts\"
		\"http://www.subtext-lang.org/\" \"Subtext Lang\"
		\"http://byorgey.wordpress.com/catsters-guide-2/\" \"The Catsters\"
		\"http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53\" \"Share Elm -- Line of Sight\"
		\"http://codemirror.net/doc/manual.html#overview\" \"CodeMirror manual\"
		\"https://github.com/nkmathew/yasi-sexp-indenter\" \"batch s-exp indenter test\"))"))
((5139 76322 588897000) :INSERT
 (51 :VALUE
  ((:RESULT
    . "<div><p><b>cl-notebook Dev</b></p><ul><li><a href='http://genericons.com/#draggable'>Genericons</a></li></ul></div><div><p><b>Misc...</b></p><ul><li><a href='http://code.google.com/p/key-mon/source/checkout'>KeyMon -- tool for showing keystrokes in screencasts</a></li><li><a href='http://www.subtext-lang.org/'>Subtext Lang</a></li><li><a href='http://byorgey.wordpress.com/catsters-guide-2/'>The Catsters</a></li><li><a href='http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53'>Share Elm -- Line of Sight</a></li><li><a href='http://codemirror.net/doc/manual.html#overview'>CodeMirror manual</a></li><li><a href='https://github.com/nkmathew/yasi-sexp-indenter'>batch s-exp indenter test</a></li></ul></div>"))))
((5139 76337 471527000) :DELETE
 (22 :CONTENTS "(:h3 \"Ok, serious notes now...\")

(:p \"This is all stuff I should read up on.\")

(:b \"Terrain generation\")
(:ul
 (:li (:a :href \"http://en.wikipedia.org/wiki/Maze_generation_algorithm\" \"Maze generation on wikipedia\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Articles#Map\" \"Rogue Basin page\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm\" \"Dungeon Building Algorithm\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python\" \"Dungeon Builder in Python\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels\" \"Cellular Automata for Terrain\"))
 (:li (:a :href \"http://pixelenvy.ca/wa/ca_cave.html\" \"More cellular automata for terrain\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Abstract_Dungeons\" \"Abstract dungeons from RogueBasin\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern\" \"Cavern delving\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation\" \"BSP Dungeon gen\")))

(:br)

(:b \"Clojure\")
(:ul
 (:li (:a :href \"https://github.com/JonyEpsilon/gorilla-repl\" \"Gorilla Repl\"))
 (:li (:a :href \"https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer\" \"core.logic Primer\"))
 (:li (:a :href \"https://github.com/clojure/core.logic\" \"core.logic GitHub\"))
 (:li (:a :href \"http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html\" \"Namespace Primer\"))
 (:li (:a :href \"https://gist.github.com/ghoseb/287710\" \"NS cheat-sheet\")))

(:br)
(:b \"LightTable\")
(:ul
 (:li (:a :href \"https://github.com/darthdeus/LightTable-Ruby\" \"Ruby mode\")))

(:br)
(:b \"Misc...\")
(:ul
 (:li (:a :href \"http://code.google.com/p/key-mon/source/checkout\" \"KeyMon -- tool for showing keystrokes in screencasts\"))
 (:li (:a :href \"http://www.subtext-lang.org/\" \"Subtext Lang\"))
 (:li (:a :href \"http://byorgey.wordpress.com/catsters-guide-2/\" \"The Catsters\"))
 (:li (:a :href \"http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53\" \"Share Elm -- Line of Sight\"))
 (:li (:a :href \"http://codemirror.net/doc/manual.html#overview\" \"CodeMirror manual\"))
 (:li (:a :href \"https://github.com/nkmathew/yasi-sexp-indenter\" \"batch s-exp indenter test\")))

(:br)"))
((5139 76337 471588000) :DELETE
 (22 :VALUE
  ((:RESULT
    . "<h3>Ok, serious notes now...</h3><p>This is all stuff I should read up on.</p><b>Terrain generation</b><ul><li><a href='http://en.wikipedia.org/wiki/Maze_generation_algorithm'>Maze generation on wikipedia</a></li><li><a href='http://www.roguebasin.com/index.php?title=Articles#Map'>Rogue Basin page</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm'>Dungeon Building Algorithm</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python'>Dungeon Builder in Python</a></li><li><a href='http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels'>Cellular Automata for Terrain</a></li><li><a href='http://pixelenvy.ca/wa/ca_cave.html'>More cellular automata for terrain</a></li><li><a href='http://www.roguebasin.com/index.php?title=Abstract_Dungeons'>Abstract dungeons from RogueBasin</a></li><li><a href='http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern'>Cavern delving</a></li><li><a href='http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation'>BSP Dungeon gen</a></li></ul><br /><b>Clojure</b><ul><li><a href='https://github.com/JonyEpsilon/gorilla-repl'>Gorilla Repl</a></li><li><a href='https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer'>core.logic Primer</a></li><li><a href='https://github.com/clojure/core.logic'>core.logic GitHub</a></li><li><a href='http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html'>Namespace Primer</a></li><li><a href='https://gist.github.com/ghoseb/287710'>NS cheat-sheet</a></li></ul><br /><b>LightTable</b><ul><li><a href='https://github.com/darthdeus/LightTable-Ruby'>Ruby mode</a></li></ul><br /><b>Misc...</b><ul><li><a href='http://code.google.com/p/key-mon/source/checkout'>KeyMon -- tool for showing keystrokes in screencasts</a></li><li><a href='http://www.subtext-lang.org/'>Subtext Lang</a></li><li><a href='http://byorgey.wordpress.com/catsters-guide-2/'>The Catsters</a></li><li><a href='http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53'>Share Elm -- Line of Sight</a></li><li><a href='http://codemirror.net/doc/manual.html#overview'>CodeMirror manual</a></li><li><a href='https://github.com/nkmathew/yasi-sexp-indenter'>batch s-exp indenter test</a></li></ul><br />"))))
((5139 76337 471626000) :INSERT
 (22 :CONTENTS "(:h3 \"Ok, serious notes now...\")

(:p \"This is all stuff I should read up on.\")

(:b \"Terrain generation\")
(:ul
 (:li (:a :href \"http://en.wikipedia.org/wiki/Maze_generation_algorithm\" \"Maze generation on wikipedia\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Articles#Map\" \"Rogue Basin page\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm\" \"Dungeon Building Algorithm\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python\" \"Dungeon Builder in Python\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels\" \"Cellular Automata for Terrain\"))
 (:li (:a :href \"http://pixelenvy.ca/wa/ca_cave.html\" \"More cellular automata for terrain\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Abstract_Dungeons\" \"Abstract dungeons from RogueBasin\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern\" \"Cavern delving\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation\" \"BSP Dungeon gen\")))

(:br)

(:b \"Clojure\")
(:ul
 (:li (:a :href \"https://github.com/JonyEpsilon/gorilla-repl\" \"Gorilla Repl\"))
 (:li (:a :href \"https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer\" \"core.logic Primer\"))
 (:li (:a :href \"https://github.com/clojure/core.logic\" \"core.logic GitHub\"))
 (:li (:a :href \"http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html\" \"Namespace Primer\"))
 (:li (:a :href \"https://gist.github.com/ghoseb/287710\" \"NS cheat-sheet\")))

(:br)
(:b \"LightTable\")
(:ul
 (:li (:a :href \"https://github.com/darthdeus/LightTable-Ruby\" \"Ruby mode\")))"))
((5139 76337 471642000) :INSERT
 (22 :VALUE
  ((:RESULT
    . "<h3>Ok, serious notes now...</h3><p>This is all stuff I should read up on.</p><b>Terrain generation</b><ul><li><a href='http://en.wikipedia.org/wiki/Maze_generation_algorithm'>Maze generation on wikipedia</a></li><li><a href='http://www.roguebasin.com/index.php?title=Articles#Map'>Rogue Basin page</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm'>Dungeon Building Algorithm</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python'>Dungeon Builder in Python</a></li><li><a href='http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels'>Cellular Automata for Terrain</a></li><li><a href='http://pixelenvy.ca/wa/ca_cave.html'>More cellular automata for terrain</a></li><li><a href='http://www.roguebasin.com/index.php?title=Abstract_Dungeons'>Abstract dungeons from RogueBasin</a></li><li><a href='http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern'>Cavern delving</a></li><li><a href='http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation'>BSP Dungeon gen</a></li></ul><br /><b>Clojure</b><ul><li><a href='https://github.com/JonyEpsilon/gorilla-repl'>Gorilla Repl</a></li><li><a href='https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer'>core.logic Primer</a></li><li><a href='https://github.com/clojure/core.logic'>core.logic GitHub</a></li><li><a href='http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html'>Namespace Primer</a></li><li><a href='https://gist.github.com/ghoseb/287710'>NS cheat-sheet</a></li></ul><br /><b>LightTable</b><ul><li><a href='https://github.com/darthdeus/LightTable-Ruby'>Ruby mode</a></li></ul>"))))
((5139 76370 92744000) :DELETE
 (51 :CONTENTS "(flet ((section (title &rest uris)
         (htm (:div (:p (:b (str title)))
                    (:ul (loop for (u name) on uris by #'cddr
                               do (htm (:li (:a :href u (str name))))))))))
   (section \"cl-notebook Dev\"
		\"http://genericons.com/#draggable\" \"Genericons\")
      
   (section \"Misc...\"
		\"http://code.google.com/p/key-mon/source/checkout\" \"KeyMon -- tool for showing keystrokes in screencasts\"
		\"http://www.subtext-lang.org/\" \"Subtext Lang\"
		\"http://byorgey.wordpress.com/catsters-guide-2/\" \"The Catsters\"
		\"http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53\" \"Share Elm -- Line of Sight\"
		\"http://codemirror.net/doc/manual.html#overview\" \"CodeMirror manual\"
		\"https://github.com/nkmathew/yasi-sexp-indenter\" \"batch s-exp indenter test\"))"))
((5139 76370 92770000) :DELETE
 (51 :VALUE
  ((:RESULT
    . "<div><p><b>cl-notebook Dev</b></p><ul><li><a href='http://genericons.com/#draggable'>Genericons</a></li></ul></div><div><p><b>Misc...</b></p><ul><li><a href='http://code.google.com/p/key-mon/source/checkout'>KeyMon -- tool for showing keystrokes in screencasts</a></li><li><a href='http://www.subtext-lang.org/'>Subtext Lang</a></li><li><a href='http://byorgey.wordpress.com/catsters-guide-2/'>The Catsters</a></li><li><a href='http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53'>Share Elm -- Line of Sight</a></li><li><a href='http://codemirror.net/doc/manual.html#overview'>CodeMirror manual</a></li><li><a href='https://github.com/nkmathew/yasi-sexp-indenter'>batch s-exp indenter test</a></li></ul></div>"))))
((5139 76370 92784000) :INSERT
 (51 :CONTENTS "(flet ((section (title &rest uris)
         (htm (:div (:p (:b (str title)))
                    (:ul (loop for (u name) on uris by #'cddr
                               do (htm (:li (:a :href u (str name))))))))))
   (section \"cl-notebook Dev\"
		\"http://genericons.com/#draggable\" \"Genericons\")
      
   (section \"Misc...\"
        \"https://github.com/darthdeus/LightTable-Ruby\" \"LightTable Ruby mode\"
		\"http://code.google.com/p/key-mon/source/checkout\" \"KeyMon -- tool for showing keystrokes in screencasts\"
		\"http://www.subtext-lang.org/\" \"Subtext Lang\"
		\"http://byorgey.wordpress.com/catsters-guide-2/\" \"The Catsters\"
		\"http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53\" \"Share Elm -- Line of Sight\"
		\"http://codemirror.net/doc/manual.html#overview\" \"CodeMirror manual\"
		\"https://github.com/nkmathew/yasi-sexp-indenter\" \"batch s-exp indenter test\"))"))
((5139 76370 92793000) :INSERT
 (51 :VALUE
  ((:RESULT
    . "<div><p><b>cl-notebook Dev</b></p><ul><li><a href='http://genericons.com/#draggable'>Genericons</a></li></ul></div><div><p><b>Misc...</b></p><ul><li><a href='https://github.com/darthdeus/LightTable-Ruby'>LightTable Ruby mode</a></li><li><a href='http://code.google.com/p/key-mon/source/checkout'>KeyMon -- tool for showing keystrokes in screencasts</a></li><li><a href='http://www.subtext-lang.org/'>Subtext Lang</a></li><li><a href='http://byorgey.wordpress.com/catsters-guide-2/'>The Catsters</a></li><li><a href='http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53'>Share Elm -- Line of Sight</a></li><li><a href='http://codemirror.net/doc/manual.html#overview'>CodeMirror manual</a></li><li><a href='https://github.com/nkmathew/yasi-sexp-indenter'>batch s-exp indenter test</a></li></ul></div>"))))
((5139 76428 215745000) :DELETE
 (51 :CONTENTS "(flet ((section (title &rest uris)
         (htm (:div (:p (:b (str title)))
                    (:ul (loop for (u name) on uris by #'cddr
                               do (htm (:li (:a :href u (str name))))))))))
   (section \"cl-notebook Dev\"
		\"http://genericons.com/#draggable\" \"Genericons\")
      
   (section \"Misc...\"
        \"https://github.com/darthdeus/LightTable-Ruby\" \"LightTable Ruby mode\"
		\"http://code.google.com/p/key-mon/source/checkout\" \"KeyMon -- tool for showing keystrokes in screencasts\"
		\"http://www.subtext-lang.org/\" \"Subtext Lang\"
		\"http://byorgey.wordpress.com/catsters-guide-2/\" \"The Catsters\"
		\"http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53\" \"Share Elm -- Line of Sight\"
		\"http://codemirror.net/doc/manual.html#overview\" \"CodeMirror manual\"
		\"https://github.com/nkmathew/yasi-sexp-indenter\" \"batch s-exp indenter test\"))"))
((5139 76428 215771000) :DELETE
 (51 :VALUE
  ((:RESULT
    . "<div><p><b>cl-notebook Dev</b></p><ul><li><a href='http://genericons.com/#draggable'>Genericons</a></li></ul></div><div><p><b>Misc...</b></p><ul><li><a href='https://github.com/darthdeus/LightTable-Ruby'>LightTable Ruby mode</a></li><li><a href='http://code.google.com/p/key-mon/source/checkout'>KeyMon -- tool for showing keystrokes in screencasts</a></li><li><a href='http://www.subtext-lang.org/'>Subtext Lang</a></li><li><a href='http://byorgey.wordpress.com/catsters-guide-2/'>The Catsters</a></li><li><a href='http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53'>Share Elm -- Line of Sight</a></li><li><a href='http://codemirror.net/doc/manual.html#overview'>CodeMirror manual</a></li><li><a href='https://github.com/nkmathew/yasi-sexp-indenter'>batch s-exp indenter test</a></li></ul></div>"))))
((5139 76428 215786000) :INSERT
 (51 :CONTENTS "(flet ((section (title &rest uris)
         (htm (:div (:p (:b (str title)))
                    (:ul (loop for (u name) on uris by #'cddr
                               do (htm (:li (:a :href u (str name))))))))))
      
   (section \"Clojure\"
		\"https://github.com/JonyEpsilon/gorilla-repl\" \"Gorilla Repl\"
		\"https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer\" \"core.logic Primer\"
		\"https://github.com/clojure/core.logic\" \"core.logic GitHub\"
		\"http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html\" \"Namespace Primer\"
		\"https://gist.github.com/ghoseb/287710\" \"NS cheat-sheet\")
      
   (section \"cl-notebook Dev\"
		\"http://genericons.com/#draggable\" \"Genericons\")
      
   (section \"Misc...\"
        \"https://github.com/darthdeus/LightTable-Ruby\" \"LightTable Ruby mode\"
		\"http://code.google.com/p/key-mon/source/checkout\" \"KeyMon -- tool for showing keystrokes in screencasts\"
		\"http://www.subtext-lang.org/\" \"Subtext Lang\"
		\"http://byorgey.wordpress.com/catsters-guide-2/\" \"The Catsters\"
		\"http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53\" \"Share Elm -- Line of Sight\"
		\"http://codemirror.net/doc/manual.html#overview\" \"CodeMirror manual\"
		\"https://github.com/nkmathew/yasi-sexp-indenter\" \"batch s-exp indenter test\"))"))
((5139 76428 215799000) :INSERT
 (51 :VALUE
  ((:RESULT
    . "<div><p><b>Clojure</b></p><ul><li><a href='https://github.com/JonyEpsilon/gorilla-repl'>Gorilla Repl</a></li><li><a href='https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer'>core.logic Primer</a></li><li><a href='https://github.com/clojure/core.logic'>core.logic GitHub</a></li><li><a href='http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html'>Namespace Primer</a></li><li><a href='https://gist.github.com/ghoseb/287710'>NS cheat-sheet</a></li></ul></div><div><p><b>cl-notebook Dev</b></p><ul><li><a href='http://genericons.com/#draggable'>Genericons</a></li></ul></div><div><p><b>Misc...</b></p><ul><li><a href='https://github.com/darthdeus/LightTable-Ruby'>LightTable Ruby mode</a></li><li><a href='http://code.google.com/p/key-mon/source/checkout'>KeyMon -- tool for showing keystrokes in screencasts</a></li><li><a href='http://www.subtext-lang.org/'>Subtext Lang</a></li><li><a href='http://byorgey.wordpress.com/catsters-guide-2/'>The Catsters</a></li><li><a href='http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53'>Share Elm -- Line of Sight</a></li><li><a href='http://codemirror.net/doc/manual.html#overview'>CodeMirror manual</a></li><li><a href='https://github.com/nkmathew/yasi-sexp-indenter'>batch s-exp indenter test</a></li></ul></div>"))))
((5139 76446 226024000) :DELETE (53 :CELL-ORDER (23 2 15 1 7 10 22 51)))
((5139 76446 226078000) :INSERT (54 :CELL-ORDER (23 2 15 1 7 10 22 51)))
((5139 76493 483342000) :DELETE
 (51 :CONTENTS "(flet ((section (title &rest uris)
         (htm (:div (:p (:b (str title)))
                    (:ul (loop for (u name) on uris by #'cddr
                               do (htm (:li (:a :href u (str name))))))))))
      
   (section \"Clojure\"
		\"https://github.com/JonyEpsilon/gorilla-repl\" \"Gorilla Repl\"
		\"https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer\" \"core.logic Primer\"
		\"https://github.com/clojure/core.logic\" \"core.logic GitHub\"
		\"http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html\" \"Namespace Primer\"
		\"https://gist.github.com/ghoseb/287710\" \"NS cheat-sheet\")
      
   (section \"cl-notebook Dev\"
		\"http://genericons.com/#draggable\" \"Genericons\")
      
   (section \"Misc...\"
        \"https://github.com/darthdeus/LightTable-Ruby\" \"LightTable Ruby mode\"
		\"http://code.google.com/p/key-mon/source/checkout\" \"KeyMon -- tool for showing keystrokes in screencasts\"
		\"http://www.subtext-lang.org/\" \"Subtext Lang\"
		\"http://byorgey.wordpress.com/catsters-guide-2/\" \"The Catsters\"
		\"http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53\" \"Share Elm -- Line of Sight\"
		\"http://codemirror.net/doc/manual.html#overview\" \"CodeMirror manual\"
		\"https://github.com/nkmathew/yasi-sexp-indenter\" \"batch s-exp indenter test\"))"))
((5139 76493 483382000) :DELETE
 (51 :VALUE
  ((:RESULT
    . "<div><p><b>Clojure</b></p><ul><li><a href='https://github.com/JonyEpsilon/gorilla-repl'>Gorilla Repl</a></li><li><a href='https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer'>core.logic Primer</a></li><li><a href='https://github.com/clojure/core.logic'>core.logic GitHub</a></li><li><a href='http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html'>Namespace Primer</a></li><li><a href='https://gist.github.com/ghoseb/287710'>NS cheat-sheet</a></li></ul></div><div><p><b>cl-notebook Dev</b></p><ul><li><a href='http://genericons.com/#draggable'>Genericons</a></li></ul></div><div><p><b>Misc...</b></p><ul><li><a href='https://github.com/darthdeus/LightTable-Ruby'>LightTable Ruby mode</a></li><li><a href='http://code.google.com/p/key-mon/source/checkout'>KeyMon -- tool for showing keystrokes in screencasts</a></li><li><a href='http://www.subtext-lang.org/'>Subtext Lang</a></li><li><a href='http://byorgey.wordpress.com/catsters-guide-2/'>The Catsters</a></li><li><a href='http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53'>Share Elm -- Line of Sight</a></li><li><a href='http://codemirror.net/doc/manual.html#overview'>CodeMirror manual</a></li><li><a href='https://github.com/nkmathew/yasi-sexp-indenter'>batch s-exp indenter test</a></li></ul></div>"))))
((5139 76493 483405000) :INSERT
 (51 :CONTENTS "(flet ((section (title &rest uris)
         (htm (:div (:p (:b (str title)))
                    (:ul (loop for (u name) on uris by #'cddr
                               do (htm (:li (:a :href u (str name))))))))))
      
   (section \"Terrain Generation\"
		\"http://en.wikipedia.org/wiki/Maze_generation_algorithm\" \"Maze generation on wikipedia\"
		\"http://www.roguebasin.com/index.php?title=Articles#Map\" \"Rogue Basin page\"
		\"http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm\" \"Dungeon Building Algorithm\"
		\"http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python\" \"Dungeon Builder in Python\"
		\"http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels\" \"Cellular Automata for Terrain\"
		\"http://pixelenvy.ca/wa/ca_cave.html\" \"More cellular automata for terrain\"
		\"http://www.roguebasin.com/index.php?title=Abstract_Dungeons\" \"Abstract dungeons from RogueBasin\"
		\"http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern\" \"Cavern delving\"
		\"http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation\" \"BSP Dungeon gen\")
      
   (section \"Clojure\"
		\"https://github.com/JonyEpsilon/gorilla-repl\" \"Gorilla Repl\"
		\"https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer\" \"core.logic Primer\"
		\"https://github.com/clojure/core.logic\" \"core.logic GitHub\"
		\"http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html\" \"Namespace Primer\"
		\"https://gist.github.com/ghoseb/287710\" \"NS cheat-sheet\")
      
   (section \"cl-notebook Dev\"
		\"http://genericons.com/#draggable\" \"Genericons\")
      
   (section \"Misc...\"
        \"https://github.com/darthdeus/LightTable-Ruby\" \"LightTable Ruby mode\"
		\"http://code.google.com/p/key-mon/source/checkout\" \"KeyMon -- tool for showing keystrokes in screencasts\"
		\"http://www.subtext-lang.org/\" \"Subtext Lang\"
		\"http://byorgey.wordpress.com/catsters-guide-2/\" \"The Catsters\"
		\"http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53\" \"Share Elm -- Line of Sight\"
		\"http://codemirror.net/doc/manual.html#overview\" \"CodeMirror manual\"
		\"https://github.com/nkmathew/yasi-sexp-indenter\" \"batch s-exp indenter test\"))"))
((5139 76493 483423000) :INSERT
 (51 :VALUE
  ((:RESULT
    . "<div><p><b>Terrain Generation</b></p><ul><li><a href='http://en.wikipedia.org/wiki/Maze_generation_algorithm'>Maze generation on wikipedia</a></li><li><a href='http://www.roguebasin.com/index.php?title=Articles#Map'>Rogue Basin page</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm'>Dungeon Building Algorithm</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python'>Dungeon Builder in Python</a></li><li><a href='http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels'>Cellular Automata for Terrain</a></li><li><a href='http://pixelenvy.ca/wa/ca_cave.html'>More cellular automata for terrain</a></li><li><a href='http://www.roguebasin.com/index.php?title=Abstract_Dungeons'>Abstract dungeons from RogueBasin</a></li><li><a href='http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern'>Cavern delving</a></li><li><a href='http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation'>BSP Dungeon gen</a></li></ul></div><div><p><b>Clojure</b></p><ul><li><a href='https://github.com/JonyEpsilon/gorilla-repl'>Gorilla Repl</a></li><li><a href='https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer'>core.logic Primer</a></li><li><a href='https://github.com/clojure/core.logic'>core.logic GitHub</a></li><li><a href='http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html'>Namespace Primer</a></li><li><a href='https://gist.github.com/ghoseb/287710'>NS cheat-sheet</a></li></ul></div><div><p><b>cl-notebook Dev</b></p><ul><li><a href='http://genericons.com/#draggable'>Genericons</a></li></ul></div><div><p><b>Misc...</b></p><ul><li><a href='https://github.com/darthdeus/LightTable-Ruby'>LightTable Ruby mode</a></li><li><a href='http://code.google.com/p/key-mon/source/checkout'>KeyMon -- tool for showing keystrokes in screencasts</a></li><li><a href='http://www.subtext-lang.org/'>Subtext Lang</a></li><li><a href='http://byorgey.wordpress.com/catsters-guide-2/'>The Catsters</a></li><li><a href='http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53'>Share Elm -- Line of Sight</a></li><li><a href='http://codemirror.net/doc/manual.html#overview'>CodeMirror manual</a></li><li><a href='https://github.com/nkmathew/yasi-sexp-indenter'>batch s-exp indenter test</a></li></ul></div>"))))
((5139 76515 201457000) :DELETE
 (51 :CONTENTS "(flet ((section (title &rest uris)
         (htm (:div (:p (:b (str title)))
                    (:ul (loop for (u name) on uris by #'cddr
                               do (htm (:li (:a :href u (str name))))))))))
      
   (section \"Terrain Generation\"
		\"http://en.wikipedia.org/wiki/Maze_generation_algorithm\" \"Maze generation on wikipedia\"
		\"http://www.roguebasin.com/index.php?title=Articles#Map\" \"Rogue Basin page\"
		\"http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm\" \"Dungeon Building Algorithm\"
		\"http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python\" \"Dungeon Builder in Python\"
		\"http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels\" \"Cellular Automata for Terrain\"
		\"http://pixelenvy.ca/wa/ca_cave.html\" \"More cellular automata for terrain\"
		\"http://www.roguebasin.com/index.php?title=Abstract_Dungeons\" \"Abstract dungeons from RogueBasin\"
		\"http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern\" \"Cavern delving\"
		\"http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation\" \"BSP Dungeon gen\")
      
   (section \"Clojure\"
		\"https://github.com/JonyEpsilon/gorilla-repl\" \"Gorilla Repl\"
		\"https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer\" \"core.logic Primer\"
		\"https://github.com/clojure/core.logic\" \"core.logic GitHub\"
		\"http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html\" \"Namespace Primer\"
		\"https://gist.github.com/ghoseb/287710\" \"NS cheat-sheet\")
      
   (section \"cl-notebook Dev\"
		\"http://genericons.com/#draggable\" \"Genericons\")
      
   (section \"Misc...\"
        \"https://github.com/darthdeus/LightTable-Ruby\" \"LightTable Ruby mode\"
		\"http://code.google.com/p/key-mon/source/checkout\" \"KeyMon -- tool for showing keystrokes in screencasts\"
		\"http://www.subtext-lang.org/\" \"Subtext Lang\"
		\"http://byorgey.wordpress.com/catsters-guide-2/\" \"The Catsters\"
		\"http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53\" \"Share Elm -- Line of Sight\"
		\"http://codemirror.net/doc/manual.html#overview\" \"CodeMirror manual\"
		\"https://github.com/nkmathew/yasi-sexp-indenter\" \"batch s-exp indenter test\"))"))
((5139 76515 201530000) :DELETE
 (51 :VALUE
  ((:RESULT
    . "<div><p><b>Terrain Generation</b></p><ul><li><a href='http://en.wikipedia.org/wiki/Maze_generation_algorithm'>Maze generation on wikipedia</a></li><li><a href='http://www.roguebasin.com/index.php?title=Articles#Map'>Rogue Basin page</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm'>Dungeon Building Algorithm</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python'>Dungeon Builder in Python</a></li><li><a href='http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels'>Cellular Automata for Terrain</a></li><li><a href='http://pixelenvy.ca/wa/ca_cave.html'>More cellular automata for terrain</a></li><li><a href='http://www.roguebasin.com/index.php?title=Abstract_Dungeons'>Abstract dungeons from RogueBasin</a></li><li><a href='http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern'>Cavern delving</a></li><li><a href='http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation'>BSP Dungeon gen</a></li></ul></div><div><p><b>Clojure</b></p><ul><li><a href='https://github.com/JonyEpsilon/gorilla-repl'>Gorilla Repl</a></li><li><a href='https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer'>core.logic Primer</a></li><li><a href='https://github.com/clojure/core.logic'>core.logic GitHub</a></li><li><a href='http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html'>Namespace Primer</a></li><li><a href='https://gist.github.com/ghoseb/287710'>NS cheat-sheet</a></li></ul></div><div><p><b>cl-notebook Dev</b></p><ul><li><a href='http://genericons.com/#draggable'>Genericons</a></li></ul></div><div><p><b>Misc...</b></p><ul><li><a href='https://github.com/darthdeus/LightTable-Ruby'>LightTable Ruby mode</a></li><li><a href='http://code.google.com/p/key-mon/source/checkout'>KeyMon -- tool for showing keystrokes in screencasts</a></li><li><a href='http://www.subtext-lang.org/'>Subtext Lang</a></li><li><a href='http://byorgey.wordpress.com/catsters-guide-2/'>The Catsters</a></li><li><a href='http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53'>Share Elm -- Line of Sight</a></li><li><a href='http://codemirror.net/doc/manual.html#overview'>CodeMirror manual</a></li><li><a href='https://github.com/nkmathew/yasi-sexp-indenter'>batch s-exp indenter test</a></li></ul></div>"))))
((5139 76515 201565000) :INSERT
 (51 :CONTENTS "(:h2 \"Shit to read up on...\")

(flet ((section (title &rest uris)
         (htm (:div (:p (:b (str title)))
                    (:ul (loop for (u name) on uris by #'cddr
                               do (htm (:li (:a :href u (str name))))))))))
      
   (section \"Terrain Generation\"
		\"http://en.wikipedia.org/wiki/Maze_generation_algorithm\" \"Maze generation on wikipedia\"
		\"http://www.roguebasin.com/index.php?title=Articles#Map\" \"Rogue Basin page\"
		\"http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm\" \"Dungeon Building Algorithm\"
		\"http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python\" \"Dungeon Builder in Python\"
		\"http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels\" \"Cellular Automata for Terrain\"
		\"http://pixelenvy.ca/wa/ca_cave.html\" \"More cellular automata for terrain\"
		\"http://www.roguebasin.com/index.php?title=Abstract_Dungeons\" \"Abstract dungeons from RogueBasin\"
		\"http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern\" \"Cavern delving\"
		\"http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation\" \"BSP Dungeon gen\")
      
   (section \"Clojure\"
		\"https://github.com/JonyEpsilon/gorilla-repl\" \"Gorilla Repl\"
		\"https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer\" \"core.logic Primer\"
		\"https://github.com/clojure/core.logic\" \"core.logic GitHub\"
		\"http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html\" \"Namespace Primer\"
		\"https://gist.github.com/ghoseb/287710\" \"NS cheat-sheet\")
      
   (section \"cl-notebook Dev\"
		\"http://genericons.com/#draggable\" \"Genericons\")
      
   (section \"Misc...\"
        \"https://github.com/darthdeus/LightTable-Ruby\" \"LightTable Ruby mode\"
		\"http://code.google.com/p/key-mon/source/checkout\" \"KeyMon -- tool for showing keystrokes in screencasts\"
		\"http://www.subtext-lang.org/\" \"Subtext Lang\"
		\"http://byorgey.wordpress.com/catsters-guide-2/\" \"The Catsters\"
		\"http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53\" \"Share Elm -- Line of Sight\"
		\"http://codemirror.net/doc/manual.html#overview\" \"CodeMirror manual\"
		\"https://github.com/nkmathew/yasi-sexp-indenter\" \"batch s-exp indenter test\"))"))
((5139 76515 201584000) :INSERT
 (51 :VALUE
  ((:RESULT
    . "<h2>Shit to read up on...</h2><div><p><b>Terrain Generation</b></p><ul><li><a href='http://en.wikipedia.org/wiki/Maze_generation_algorithm'>Maze generation on wikipedia</a></li><li><a href='http://www.roguebasin.com/index.php?title=Articles#Map'>Rogue Basin page</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm'>Dungeon Building Algorithm</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python'>Dungeon Builder in Python</a></li><li><a href='http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels'>Cellular Automata for Terrain</a></li><li><a href='http://pixelenvy.ca/wa/ca_cave.html'>More cellular automata for terrain</a></li><li><a href='http://www.roguebasin.com/index.php?title=Abstract_Dungeons'>Abstract dungeons from RogueBasin</a></li><li><a href='http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern'>Cavern delving</a></li><li><a href='http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation'>BSP Dungeon gen</a></li></ul></div><div><p><b>Clojure</b></p><ul><li><a href='https://github.com/JonyEpsilon/gorilla-repl'>Gorilla Repl</a></li><li><a href='https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer'>core.logic Primer</a></li><li><a href='https://github.com/clojure/core.logic'>core.logic GitHub</a></li><li><a href='http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html'>Namespace Primer</a></li><li><a href='https://gist.github.com/ghoseb/287710'>NS cheat-sheet</a></li></ul></div><div><p><b>cl-notebook Dev</b></p><ul><li><a href='http://genericons.com/#draggable'>Genericons</a></li></ul></div><div><p><b>Misc...</b></p><ul><li><a href='https://github.com/darthdeus/LightTable-Ruby'>LightTable Ruby mode</a></li><li><a href='http://code.google.com/p/key-mon/source/checkout'>KeyMon -- tool for showing keystrokes in screencasts</a></li><li><a href='http://www.subtext-lang.org/'>Subtext Lang</a></li><li><a href='http://byorgey.wordpress.com/catsters-guide-2/'>The Catsters</a></li><li><a href='http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53'>Share Elm -- Line of Sight</a></li><li><a href='http://codemirror.net/doc/manual.html#overview'>CodeMirror manual</a></li><li><a href='https://github.com/nkmathew/yasi-sexp-indenter'>batch s-exp indenter test</a></li></ul></div>"))))
((5139 76531 75378000) :DELETE
 (22 :VALUE
  ((:RESULT
    . "<h3>Ok, serious notes now...</h3><p>This is all stuff I should read up on.</p><b>Terrain generation</b><ul><li><a href='http://en.wikipedia.org/wiki/Maze_generation_algorithm'>Maze generation on wikipedia</a></li><li><a href='http://www.roguebasin.com/index.php?title=Articles#Map'>Rogue Basin page</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm'>Dungeon Building Algorithm</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python'>Dungeon Builder in Python</a></li><li><a href='http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels'>Cellular Automata for Terrain</a></li><li><a href='http://pixelenvy.ca/wa/ca_cave.html'>More cellular automata for terrain</a></li><li><a href='http://www.roguebasin.com/index.php?title=Abstract_Dungeons'>Abstract dungeons from RogueBasin</a></li><li><a href='http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern'>Cavern delving</a></li><li><a href='http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation'>BSP Dungeon gen</a></li></ul><br /><b>Clojure</b><ul><li><a href='https://github.com/JonyEpsilon/gorilla-repl'>Gorilla Repl</a></li><li><a href='https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer'>core.logic Primer</a></li><li><a href='https://github.com/clojure/core.logic'>core.logic GitHub</a></li><li><a href='http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html'>Namespace Primer</a></li><li><a href='https://gist.github.com/ghoseb/287710'>NS cheat-sheet</a></li></ul><br /><b>LightTable</b><ul><li><a href='https://github.com/darthdeus/LightTable-Ruby'>Ruby mode</a></li></ul>"))))
((5139 76531 75413000) :DELETE
 (22 :CONTENTS "(:h3 \"Ok, serious notes now...\")

(:p \"This is all stuff I should read up on.\")

(:b \"Terrain generation\")
(:ul
 (:li (:a :href \"http://en.wikipedia.org/wiki/Maze_generation_algorithm\" \"Maze generation on wikipedia\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Articles#Map\" \"Rogue Basin page\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm\" \"Dungeon Building Algorithm\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python\" \"Dungeon Builder in Python\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels\" \"Cellular Automata for Terrain\"))
 (:li (:a :href \"http://pixelenvy.ca/wa/ca_cave.html\" \"More cellular automata for terrain\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Abstract_Dungeons\" \"Abstract dungeons from RogueBasin\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern\" \"Cavern delving\"))
 (:li (:a :href \"http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation\" \"BSP Dungeon gen\")))

(:br)

(:b \"Clojure\")
(:ul
 (:li (:a :href \"https://github.com/JonyEpsilon/gorilla-repl\" \"Gorilla Repl\"))
 (:li (:a :href \"https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer\" \"core.logic Primer\"))
 (:li (:a :href \"https://github.com/clojure/core.logic\" \"core.logic GitHub\"))
 (:li (:a :href \"http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html\" \"Namespace Primer\"))
 (:li (:a :href \"https://gist.github.com/ghoseb/287710\" \"NS cheat-sheet\")))

(:br)
(:b \"LightTable\")
(:ul
 (:li (:a :href \"https://github.com/darthdeus/LightTable-Ruby\" \"Ruby mode\")))"))
((5139 76531 75440000) :DELETE (22 :CELL NIL))
((5139 76531 75446000) :DELETE (22 :CELL-TYPE :CL-WHO))
((5139 76553 504648000) :DELETE (54 :CELL-ORDER (23 2 15 1 7 10 22 51)))
((5139 76553 504664000) :INSERT (55 :CELL-ORDER (23 2 15 7 1 10 51)))
((5139 76555 97522000) :DELETE (55 :CELL-ORDER (23 2 15 7 1 10 51)))
((5139 76555 97541000) :INSERT (56 :CELL-ORDER (23 2 15 1 7 10 51)))
((5139 76560 952372000) :DELETE (56 :CELL-ORDER (23 2 15 1 7 10 51)))
((5139 76560 952387000) :INSERT (57 :CELL-ORDER (23 2 15 1 7 10 51)))
((5139 76563 881068000) :DELETE (57 :CELL-ORDER (23 2 15 1 7 10 51)))
((5139 76563 881082000) :INSERT (58 :CELL-ORDER (23 2 15 7 1 10 51)))
((5139 76565 277106000) :DELETE (58 :CELL-ORDER (23 2 15 7 1 10 51)))
((5139 76565 277120000) :INSERT (59 :CELL-ORDER (23 2 15 1 7 10 51)))
((5140 5424 597718000) :DELETE (59 :CELL-ORDER (23 2 15 1 7 10 51)))
((5140 5424 597934000) :INSERT (60 :CELL-ORDER (23 2 1 15 7 10 51)))
((5140 6276 378126000) :INSERT (61 :CELL NIL))
((5140 6276 378153000) :INSERT (61 :CELL-TYPE :CL-WHO))
((5140 6276 378169000) :INSERT (61 :CONTENTS ""))
((5140 6276 378172000) :INSERT (61 :VALUE ""))
((5140 6294 118041000) :DELETE (61 :CONTENTS ""))
((5140 6294 118091000) :DELETE (61 :VALUE ""))
((5140 6294 118100000) :INSERT (61 :CONTENTS "(:p \"Blah\")"))
((5140 6294 118104000) :INSERT (61 :VALUE ((:RESULT . "<p>Blah</p>"))))
((5140 6311 647281000) :DELETE (61 :CONTENTS "(:p \"Blah\")"))
((5140 6311 647301000) :DELETE (61 :VALUE ((:RESULT . "<p>Blah</p>"))))
((5140 6311 647308000) :INSERT (61 :CONTENTS "((:p \"Blah\")"))
((5140 6311 647314000) :INSERT
 (61 :VALUE ((:RESULT (ERROR ((ERROR-TYPE . END-OF-FILE)))))))
((5140 6316 997795000) :DELETE (61 :CONTENTS "((:p \"Blah\")"))
((5140 6316 997809000) :DELETE
 (61 :VALUE ((:RESULT (ERROR ((ERROR-TYPE . END-OF-FILE)))))))
((5140 6316 997818000) :INSERT (61 :CONTENTS "((:p \"Blah\")"))
((5140 6316 997823000) :INSERT
 (61 :VALUE ((:RESULT (ERROR ((ERROR-TYPE . END-OF-FILE)))))))
((5140 6518 844030000) :DELETE (61 :CONTENTS "((:p \"Blah\")"))
((5140 6518 844067000) :DELETE
 (61 :VALUE ((:RESULT (ERROR ((ERROR-TYPE . END-OF-FILE)))))))
((5140 6518 844073000) :INSERT (61 :CONTENTS "((:p \"Blah\")))"))
((5140 6518 844078000) :INSERT
 (61 :VALUE ((:RESULT (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR)))))))
((5140 6694 765455000) :DELETE (23 :CONTENTS "(:h1 \"Test Book\")"))
((5140 6694 765479000) :DELETE (23 :VALUE ((:RESULT . "<h1>Test Book</h1>"))))
((5140 6694 765489000) :INSERT (23 :CONTENTS "(:h1 \"Test Book\"))"))
((5140 6694 765498000) :INSERT
 (23 :VALUE ((:RESULT (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR)))))))
((5140 6698 423714000) :DELETE (23 :CONTENTS "(:h1 \"Test Book\"))"))
((5140 6698 423731000) :DELETE
 (23 :VALUE ((:RESULT (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR)))))))
((5140 6698 423737000) :INSERT (23 :CONTENTS "(:h1 \"Test Book\")"))
((5140 6698 423742000) :INSERT (23 :VALUE ((:RESULT . "<h1>Test Book</h1>"))))
((5140 7974 945472000) :DELETE (23 :CONTENTS "(:h1 \"Test Book\")"))
((5140 7974 945488000) :DELETE (23 :VALUE ((:RESULT . "<h1>Test Book</h1>"))))
((5140 7974 945494000) :INSERT (23 :CONTENTS "(:h1 \"Test Book\"))"))
((5140 7974 945499000) :INSERT
 (23 :VALUE ((:RESULT (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR)))))))
((5140 7987 408035000) :DELETE (23 :CONTENTS "(:h1 \"Test Book\"))"))
((5140 7987 408051000) :DELETE
 (23 :VALUE ((:RESULT (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR)))))))
((5140 7987 408058000) :INSERT (23 :CONTENTS "(:h1 \"Test Book\")"))
((5140 7987 408063000) :INSERT (23 :VALUE ((:RESULT . "<h1>Test Book</h1>"))))
((5140 7990 279919000) :DELETE (23 :CONTENTS "(:h1 \"Test Book\")"))
((5140 7990 279938000) :DELETE (23 :VALUE ((:RESULT . "<h1>Test Book</h1>"))))
((5140 7990 279946000) :INSERT (23 :CONTENTS "(:h1 \"Test Book\""))
((5140 7990 279952000) :INSERT
 (23 :VALUE ((:RESULT (ERROR ((ERROR-TYPE . END-OF-FILE)))))))
((5140 7998 676045000) :DELETE (23 :CONTENTS "(:h1 \"Test Book\""))
((5140 7998 676064000) :DELETE
 (23 :VALUE ((:RESULT (ERROR ((ERROR-TYPE . END-OF-FILE)))))))
((5140 7998 676071000) :INSERT (23 :CONTENTS "(:h1 \"Test Book\")"))
((5140 7998 676077000) :INSERT (23 :VALUE ((:RESULT . "<h1>Test Book</h1>"))))
((5140 8031 999998000) :DELETE (60 :CELL-ORDER (23 2 1 15 7 10 51)))
((5140 8032 99000) :INSERT (62 :CELL-ORDER (23 2 1 15 7 10 51 61)))
((5140 8033 894195000) :DELETE (23 :CONTENTS "(:h1 \"Test Book\")"))
((5140 8033 894215000) :DELETE (23 :VALUE ((:RESULT . "<h1>Test Book</h1>"))))
((5140 8033 894223000) :INSERT (23 :CONTENTS "(:h1 \"Test Book\")"))
((5140 8033 894229000) :INSERT (23 :VALUE ((:RESULT . "<h1>Test Book</h1>"))))
((5140 8063 854595000) :DELETE (23 :CONTENTS "(:h1 \"Test Book\")"))
((5140 8063 854618000) :DELETE (23 :VALUE ((:RESULT . "<h1>Test Book</h1>"))))
((5140 8063 854630000) :INSERT (23 :CONTENTS "(:h1 \"Test Book\"))"))
((5140 8063 854638000) :INSERT
 (23 :VALUE ((:RESULT (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR)))))))
((5140 8093 526388000) :DELETE (61 :CONTENTS "((:p \"Blah\")))"))
((5140 8093 526408000) :DELETE
 (61 :VALUE ((:RESULT (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR)))))))
((5140 8093 526416000) :INSERT (61 :CONTENTS "(:p \"Blah\")"))
((5140 8093 526422000) :INSERT (61 :VALUE ((:RESULT . "<p>Blah</p>"))))
((5140 8175 848071000) :DELETE (61 :CONTENTS "(:p \"Blah\")"))
((5140 8175 848093000) :DELETE (61 :VALUE ((:RESULT . "<p>Blah</p>"))))
((5140 8175 848103000) :INSERT (61 :CONTENTS "(:p \"Blah\"))"))
((5140 8175 848115000) :INSERT
 (61 :VALUE ((:RESULT (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR)))))))
((5140 8239 487179000) :DELETE (61 :CONTENTS "(:p \"Blah\"))"))
((5140 8239 487205000) :DELETE
 (61 :VALUE ((:RESULT (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR)))))))
((5140 8239 487218000) :INSERT (61 :CONTENTS "(:p \"Blah\"))"))
((5140 8239 487227000) :INSERT
 (61 :VALUE ((:RESULT (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR)))))))
((5140 8246 214316000) :DELETE (61 :CONTENTS "(:p \"Blah\"))"))
((5140 8246 214329000) :DELETE
 (61 :VALUE ((:RESULT (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR)))))))
((5140 8246 214335000) :INSERT (61 :CONTENTS "(:p \"Blah\") (foo))"))
((5140 8246 214340000) :INSERT
 (61 :VALUE ((:RESULT (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR)))))))
((5140 8295 588685000) :DELETE (61 :CONTENTS "(:p \"Blah\") (foo))"))
((5140 8295 588726000) :DELETE
 (61 :VALUE ((:RESULT (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR)))))))
((5140 8295 588735000) :INSERT (61 :CONTENTS "(:p \"Blah\") (foo))"))
((5140 8295 588740000) :INSERT
 (61 :VALUE
  ((:RESULT (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR))))
   (:STDOUT . ""))))
((5140 8454 565820000) :DELETE (23 :CONTENTS "(:h1 \"Test Book\"))"))
((5140 8454 565840000) :DELETE
 (23 :VALUE ((:RESULT (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR)))))))
((5140 8454 565850000) :INSERT (23 :CONTENTS "(:h1 \"Test Book\"))"))
((5140 8454 565857000) :INSERT
 (23 :VALUE
  ((:RESULT (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR))))
   (:STDOUT . ""))))
((5140 8604 159751000) :DELETE (61 :CONTENTS "(:p \"Blah\") (foo))"))
((5140 8604 159782000) :DELETE
 (61 :VALUE
  ((:RESULT (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR))))
   (:STDOUT . ""))))
((5140 8604 159789000) :INSERT (61 :CONTENTS "(:p \"Blah\") (foo))"))
((5140 8604 159794000) :INSERT
 (61 :VALUE
  ((:RESULT (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR))))
   (:STDOUT . ""))))
((5140 8610 701321000) :DELETE (23 :CONTENTS "(:h1 \"Test Book\"))"))
((5140 8610 701335000) :DELETE
 (23 :VALUE
  ((:RESULT (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR))))
   (:STDOUT . ""))))
((5140 8610 701343000) :INSERT (23 :CONTENTS "(:h1 \"Test Book\"))"))
((5140 8610 701347000) :INSERT
 (23 :VALUE
  ((:RESULT (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR))))
   (:STDOUT . ""))))
((5140 8626 556354000) :DELETE (23 :CONTENTS "(:h1 \"Test Book\"))"))
((5140 8626 556369000) :DELETE
 (23 :VALUE
  ((:RESULT (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR))))
   (:STDOUT . ""))))
((5140 8626 556376000) :INSERT (23 :CONTENTS "(:h1 \"Test Book\"))"))
((5140 8626 556381000) :INSERT
 (23 :VALUE
  ((:RESULT (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR))))
   (:STDOUT . ""))))
((5140 8657 383697000) :DELETE (23 :CONTENTS "(:h1 \"Test Book\"))"))
((5140 8657 383730000) :DELETE
 (23 :VALUE
  ((:RESULT (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR))))
   (:STDOUT . ""))))
((5140 8657 383738000) :INSERT (23 :CONTENTS "(:h1 \"Test Book\"))"))
((5140 8657 383745000) :INSERT
 (23 :VALUE
  ((:RESULT
    (ERROR
     ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR)
      (:FORM
       (ALIST :RESULT (HTML-TREE-TO-STRING (READ-ALL-FROM-STRING CONTENTS))
              :STDOUT "")))))
   (:STDOUT . ""))))
((5140 8679 604756000) :DELETE (23 :CONTENTS "(:h1 \"Test Book\"))"))
((5140 8679 604775000) :DELETE
 (23 :VALUE
  ((:RESULT
    (ERROR
     ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR)
      (:FORM
       (ALIST :RESULT (HTML-TREE-TO-STRING (READ-ALL-FROM-STRING CONTENTS))
              :STDOUT "")))))
   (:STDOUT . ""))))
((5140 8679 604783000) :INSERT (23 :CONTENTS "(:h1 \"Test Book\"))"))
((5140 8679 604789000) :INSERT
 (23 :VALUE
  ((:RESULT (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR))))
   (:STDOUT . ""))))
((5140 8685 449033000) :DELETE (61 :CONTENTS "(:p \"Blah\") (foo))"))
((5140 8685 449050000) :DELETE
 (61 :VALUE
  ((:RESULT (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR))))
   (:STDOUT . ""))))
((5140 8685 449058000) :INSERT (61 :CONTENTS "(:p \"Blah\") (foo))"))
((5140 8685 449064000) :INSERT
 (61 :VALUE
  ((:RESULT (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR))))
   (:STDOUT . ""))))
((5140 8740 567043000) :DELETE
 (7 :CONTENTS ";; errors!

(+ 2 3 4 :test)"))
((5140 8740 567065000) :DELETE
 (7 :VALUE
  ((:RESULT
    ((ERROR
      ((ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 2 3 4 :TEST)") (:DATUM . :TEST)
       (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . ""))))
((5140 8740 567083000) :INSERT
 (7 :CONTENTS ";; errors!

(+ 2 3 4 :test 7)"))
((5140 8740 567090000) :INSERT
 (7 :VALUE
  ((:RESULT
    ((ERROR
      ((ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 2 3 4 :TEST 7)") (:DATUM . :TEST)
       (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . ""))))
((5140 8743 998886000) :DELETE
 (7 :CONTENTS ";; errors!

(+ 2 3 4 :test 7)"))
((5140 8743 998902000) :DELETE
 (7 :VALUE
  ((:RESULT
    ((ERROR
      ((ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 2 3 4 :TEST 7)") (:DATUM . :TEST)
       (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . ""))))
((5140 8743 998909000) :INSERT
 (7 :CONTENTS ";; errors!

(+ 2 3 4 :test)"))
((5140 8743 998914000) :INSERT
 (7 :VALUE
  ((:RESULT
    ((ERROR
      ((ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 2 3 4 :TEST)") (:DATUM . :TEST)
       (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . ""))))
((5140 8748 521878000) :DELETE (23 :CONTENTS "(:h1 \"Test Book\"))"))
((5140 8748 521903000) :DELETE
 (23 :VALUE
  ((:RESULT (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR))))
   (:STDOUT . ""))))
((5140 8748 521921000) :INSERT (23 :CONTENTS "(:h1 \"Test Book\"))"))
((5140 8748 521928000) :INSERT
 (23 :VALUE
  ((:RESULT (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR))))
   (:STDOUT . ""))))
((5140 8849 358793000) :DELETE (23 :CONTENTS "(:h1 \"Test Book\"))"))
((5140 8849 358816000) :DELETE
 (23 :VALUE
  ((:RESULT (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR))))
   (:STDOUT . ""))))
((5140 8849 358830000) :INSERT (23 :CONTENTS "(:h1 \"Test Book\"))"))
((5140 8849 358837000) :INSERT
 (23 :VALUE
  ((:RESULT
    (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR) (:FORM . :UNKNOWN))))
   (:STDOUT . ""))))
((5140 8860 632358000) :DELETE (23 :CONTENTS "(:h1 \"Test Book\"))"))
((5140 8860 632424000) :DELETE
 (23 :VALUE
  ((:RESULT
    (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR) (:FORM . :UNKNOWN))))
   (:STDOUT . ""))))
((5140 8860 632433000) :INSERT (23 :CONTENTS "(:h1 \"Test Book\"))"))
((5140 8860 632440000) :INSERT
 (23 :VALUE
  ((:RESULT
    (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR) (:FORM . :UNKNOWN))))
   (:STDOUT . ""))))
((5140 8881 881742000) :DELETE (23 :CONTENTS "(:h1 \"Test Book\"))"))
((5140 8881 881973000) :DELETE
 (23 :VALUE
  ((:RESULT
    (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR) (:FORM . :UNKNOWN))))
   (:STDOUT . ""))))
((5140 8881 882021000) :INSERT (23 :CONTENTS "(:h1 \"Test Book\"))"))
((5140 8881 882049000) :INSERT
 (23 :VALUE
  ((:RESULT
    (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR) (:FORM . :UNKNOWN))))
   (:STDOUT . ""))))
((5140 8905 406012000) :DELETE (23 :CONTENTS "(:h1 \"Test Book\"))"))
((5140 8905 406029000) :DELETE
 (23 :VALUE
  ((:RESULT
    (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR) (:FORM . :UNKNOWN))))
   (:STDOUT . ""))))
((5140 8905 406036000) :INSERT (23 :CONTENTS "(:h1 \"Test Book\"))"))
((5140 8905 406042000) :INSERT
 (23 :VALUE
  ((:RESULT
    (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR) (:FORM . :UNKNOWN))))
   (:STDOUT . ""))))
((5140 9071 756947000) :DELETE (23 :CONTENTS "(:h1 \"Test Book\"))"))
((5140 9071 756970000) :DELETE
 (23 :VALUE
  ((:RESULT
    (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR) (:FORM . :UNKNOWN))))
   (:STDOUT . ""))))
((5140 9071 756979000) :INSERT (23 :CONTENTS "(:h1 \"Test Book\"))"))
((5140 9071 756985000) :INSERT
 (23 :VALUE
  ((:RESULT
    (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR) (:FORM . :UNKNOWN))))
   (:STDOUT . ""))))
((5140 9093 301372000) :DELETE (23 :CONTENTS "(:h1 \"Test Book\"))"))
((5140 9093 301389000) :DELETE
 (23 :VALUE
  ((:RESULT
    (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR) (:FORM . :UNKNOWN))))
   (:STDOUT . ""))))
((5140 9093 301396000) :INSERT (23 :CONTENTS "(:h1 \"Test Book\"))"))
((5140 9093 301402000) :INSERT
 (23 :VALUE
  ((:RESULT
    (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR) (:FORM . :UNKNOWN))))
   (:STDOUT . ""))))
((5140 9106 359033000) :DELETE (23 :CONTENTS "(:h1 \"Test Book\"))"))
((5140 9106 359050000) :DELETE
 (23 :VALUE
  ((:RESULT
    (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR) (:FORM . :UNKNOWN))))
   (:STDOUT . ""))))
((5140 9106 359057000) :INSERT (23 :CONTENTS "(:h1 \"Test Book\"))"))
((5140 9106 359063000) :INSERT
 (23 :VALUE
  ((:RESULT
    (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR) (:FORM . :UNKNOWN))))
   (:STDOUT . ""))))
((5140 9313 633861000) :DELETE (23 :CONTENTS "(:h1 \"Test Book\"))"))
((5140 9313 633903000) :DELETE
 (23 :VALUE
  ((:RESULT
    (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR) (:FORM . :UNKNOWN))))
   (:STDOUT . ""))))
((5140 9313 633913000) :INSERT (23 :CONTENTS "(:h1 \"Test Book\"))"))
((5140 9313 633920000) :INSERT
 (23 :VALUE
  ((:RESULT
    (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR) (:FORM . :UNKNOWN))))
   (:STDOUT . ""))))
((5140 9380 892183000) :DELETE (23 :CONTENTS "(:h1 \"Test Book\"))"))
((5140 9380 892208000) :DELETE
 (23 :VALUE
  ((:RESULT
    (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR) (:FORM . :UNKNOWN))))
   (:STDOUT . ""))))
((5140 9380 892220000) :INSERT (23 :CONTENTS "(:h1 \"Test Book\""))
((5140 9380 892229000) :INSERT
 (23 :VALUE
  ((:RESULT (ERROR ((ERROR-TYPE . END-OF-FILE) (:FORM . :UNKNOWN))))
   (:STDOUT . ""))))
((5140 9384 931504000) :DELETE (23 :CONTENTS "(:h1 \"Test Book\""))
((5140 9384 931525000) :DELETE
 (23 :VALUE
  ((:RESULT (ERROR ((ERROR-TYPE . END-OF-FILE) (:FORM . :UNKNOWN))))
   (:STDOUT . ""))))
((5140 9384 931533000) :INSERT (23 :CONTENTS "(:h1 \"Test Book\")"))
((5140 9384 931540000) :INSERT
 (23 :VALUE ((:RESULT . "<h1>Test Book</h1>") (:STDOUT . ""))))
((5140 9400 217340000) :DELETE (61 :CONTENTS "(:p \"Blah\") (foo))"))
((5140 9400 217360000) :DELETE
 (61 :VALUE
  ((:RESULT (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR))))
   (:STDOUT . ""))))
((5140 9400 217370000) :INSERT (61 :CONTENTS "(:p \"Blah\")"))
((5140 9400 217376000) :INSERT
 (61 :VALUE ((:RESULT . "<p>Blah</p>") (:STDOUT . ""))))
((5140 9402 388548000) :DELETE
 (61 :VALUE ((:RESULT . "<p>Blah</p>") (:STDOUT . ""))))
((5140 9402 388578000) :DELETE (61 :CONTENTS "(:p \"Blah\")"))
((5140 9402 388594000) :DELETE (61 :CELL NIL))
((5140 9402 388611000) :DELETE (61 :CELL-TYPE :CL-WHO))
((5140 9989 873386000) :DELETE (23 :CONTENTS "(:h1 \"Test Book\")"))
((5140 9989 873432000) :DELETE
 (23 :VALUE ((:RESULT . "<h1>Test Book</h1>") (:STDOUT . ""))))
((5140 9989 873442000) :INSERT (23 :CONTENTS "(:h1 \"Test Book\"))"))
((5140 9989 873450000) :INSERT
 (23 :VALUE
  ((:RESULT
    (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR) (:FORM . :UNKNOWN))))
   (:STDOUT . ""))))
((5140 9993 247147000) :DELETE (23 :CONTENTS "(:h1 \"Test Book\"))"))
((5140 9993 247167000) :DELETE
 (23 :VALUE
  ((:RESULT
    (ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR) (:FORM . :UNKNOWN))))
   (:STDOUT . ""))))
((5140 9993 247179000) :INSERT (23 :CONTENTS "(:h1 \"Test Book\")"))
((5140 9993 247185000) :INSERT
 (23 :VALUE ((:RESULT . "<h1>Test Book</h1>") (:STDOUT . ""))))
((5140 11082 671630000) :INSERT (63 :CELL NIL))
((5140 11082 671682000) :INSERT (63 :CELL-TYPE :COMMON-LISP))
((5140 11082 671687000) :INSERT (63 :CONTENTS ""))
((5140 11082 671690000) :INSERT (63 :VALUE ""))
((5140 11246 823388000) :DELETE (63 :CELL-TYPE :COMMON-LISP))
((5140 11246 823404000) :DELETE (63 :VALUE ""))
((5140 11246 823409000) :INSERT (63 :CELL-TYPE :CL-WHO))
((5140 11246 823414000) :INSERT (63 :VALUE ((:RESULT . "") (:STDOUT . ""))))
((5140 11250 692264000) :DELETE (63 :VALUE ((:RESULT . "") (:STDOUT . ""))))
((5140 11250 692279000) :DELETE (63 :CELL-TYPE :CL-WHO))
((5140 11250 692286000) :DELETE (63 :CONTENTS ""))
((5140 11250 692292000) :DELETE (63 :CELL NIL))
((5140 11256 190202000) :DELETE (1 :CELL-TYPE :COMMON-LISP))
((5140 11256 190219000) :DELETE
 (1 :VALUE ((:RESULT ((INTEGER "14"))) (:STDOUT . ""))))
((5140 11256 190225000) :INSERT (1 :CELL-TYPE :CL-WHO))
((5140 11256 190230000) :INSERT (1 :VALUE ((:RESULT . "") (:STDOUT . ""))))
((5140 11263 234061000) :DELETE (1 :CELL-TYPE :CL-WHO))
((5140 11263 234077000) :DELETE (1 :VALUE ((:RESULT . "") (:STDOUT . ""))))
((5140 11263 234084000) :INSERT (1 :CELL-TYPE :COMMON-LISP))
((5140 11263 234090000) :INSERT
 (1 :VALUE ((:RESULT ((INTEGER "14"))) (:STDOUT . ""))))
((5140 11274 770210000) :DELETE (1 :CELL-TYPE :COMMON-LISP))
((5140 11274 770226000) :DELETE
 (1 :VALUE ((:RESULT ((INTEGER "14"))) (:STDOUT . ""))))
((5140 11274 770232000) :INSERT (1 :CELL-TYPE :CL-WHO))
((5140 11274 770236000) :INSERT (1 :VALUE ((:RESULT . "") (:STDOUT . ""))))
((5140 11319 19317000) :DELETE (1 :CELL-TYPE :CL-WHO))
((5140 11319 19336000) :DELETE (1 :VALUE ((:RESULT . "") (:STDOUT . ""))))
((5140 11319 19345000) :INSERT (1 :CELL-TYPE :COMMON-LISP))
((5140 11319 19352000) :INSERT
 (1 :VALUE ((:RESULT ((INTEGER "14"))) (:STDOUT . ""))))
((5140 11460 395000) :DELETE (1 :CELL-TYPE :COMMON-LISP))
((5140 11460 417000) :DELETE
 (1 :VALUE ((:RESULT ((INTEGER "14"))) (:STDOUT . ""))))
((5140 11460 426000) :INSERT (1 :CELL-TYPE :CL-WHO))
((5140 11460 432000) :INSERT (1 :VALUE ((:RESULT . "") (:STDOUT . ""))))
((5140 11463 560594000) :DELETE (1 :CELL-TYPE :CL-WHO))
((5140 11463 560607000) :DELETE (1 :VALUE ((:RESULT . "") (:STDOUT . ""))))
((5140 11463 560612000) :INSERT (1 :CELL-TYPE :COMMON-LISP))
((5140 11463 560617000) :INSERT
 (1 :VALUE ((:RESULT ((INTEGER "14"))) (:STDOUT . ""))))
((5140 11477 577229000) :DELETE (1 :CELL-TYPE :COMMON-LISP))
((5140 11477 577270000) :DELETE
 (1 :VALUE ((:RESULT ((INTEGER "14"))) (:STDOUT . ""))))
((5140 11477 577279000) :INSERT (1 :CELL-TYPE :CL-WHO))
((5140 11477 577284000) :INSERT (1 :VALUE ((:RESULT . "") (:STDOUT . ""))))
((5140 11480 427015000) :DELETE (1 :CELL-TYPE :CL-WHO))
((5140 11480 427031000) :DELETE (1 :VALUE ((:RESULT . "") (:STDOUT . ""))))
((5140 11480 427038000) :INSERT (1 :CELL-TYPE :COMMON-LISP))
((5140 11480 427044000) :INSERT
 (1 :VALUE ((:RESULT ((INTEGER "14"))) (:STDOUT . ""))))
((5140 11612 377094000) :DELETE (62 :CELL-ORDER (23 2 1 15 7 10 51 61)))
((5140 11612 377312000) :INSERT (64 :CELL-ORDER (23 2 1 7 15 10 51)))
((5140 11614 176572000) :DELETE (64 :CELL-ORDER (23 2 1 7 15 10 51)))
((5140 11614 176661000) :INSERT (65 :CELL-ORDER (23 2 1 15 7 10 51)))
((5140 11619 393429000) :DELETE (65 :CELL-ORDER (23 2 1 15 7 10 51)))
((5140 11619 393473000) :INSERT (66 :CELL-ORDER (23 2 15 1 7 10 51)))
((5140 11621 282269000) :DELETE (66 :CELL-ORDER (23 2 15 1 7 10 51)))
((5140 11621 282287000) :INSERT (67 :CELL-ORDER (23 2 1 15 7 10 51)))
((5140 11624 385278000) :DELETE (67 :CELL-ORDER (23 2 1 15 7 10 51)))
((5140 11624 385297000) :INSERT (68 :CELL-ORDER (2 23 1 15 7 10 51)))
((5140 11625 485287000) :DELETE (68 :CELL-ORDER (2 23 1 15 7 10 51)))
((5140 11625 485307000) :INSERT (69 :CELL-ORDER (23 2 1 15 7 10 51)))
((5140 11791 676739000) :DELETE
 (51 :CONTENTS "(:h2 \"Shit to read up on...\")

(flet ((section (title &rest uris)
         (htm (:div (:p (:b (str title)))
                    (:ul (loop for (u name) on uris by #'cddr
                               do (htm (:li (:a :href u (str name))))))))))
      
   (section \"Terrain Generation\"
		\"http://en.wikipedia.org/wiki/Maze_generation_algorithm\" \"Maze generation on wikipedia\"
		\"http://www.roguebasin.com/index.php?title=Articles#Map\" \"Rogue Basin page\"
		\"http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm\" \"Dungeon Building Algorithm\"
		\"http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python\" \"Dungeon Builder in Python\"
		\"http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels\" \"Cellular Automata for Terrain\"
		\"http://pixelenvy.ca/wa/ca_cave.html\" \"More cellular automata for terrain\"
		\"http://www.roguebasin.com/index.php?title=Abstract_Dungeons\" \"Abstract dungeons from RogueBasin\"
		\"http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern\" \"Cavern delving\"
		\"http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation\" \"BSP Dungeon gen\")
      
   (section \"Clojure\"
		\"https://github.com/JonyEpsilon/gorilla-repl\" \"Gorilla Repl\"
		\"https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer\" \"core.logic Primer\"
		\"https://github.com/clojure/core.logic\" \"core.logic GitHub\"
		\"http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html\" \"Namespace Primer\"
		\"https://gist.github.com/ghoseb/287710\" \"NS cheat-sheet\")
      
   (section \"cl-notebook Dev\"
		\"http://genericons.com/#draggable\" \"Genericons\")
      
   (section \"Misc...\"
        \"https://github.com/darthdeus/LightTable-Ruby\" \"LightTable Ruby mode\"
		\"http://code.google.com/p/key-mon/source/checkout\" \"KeyMon -- tool for showing keystrokes in screencasts\"
		\"http://www.subtext-lang.org/\" \"Subtext Lang\"
		\"http://byorgey.wordpress.com/catsters-guide-2/\" \"The Catsters\"
		\"http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53\" \"Share Elm -- Line of Sight\"
		\"http://codemirror.net/doc/manual.html#overview\" \"CodeMirror manual\"
		\"https://github.com/nkmathew/yasi-sexp-indenter\" \"batch s-exp indenter test\"))"))
((5140 11791 676793000) :DELETE
 (51 :VALUE
  ((:RESULT
    . "<h2>Shit to read up on...</h2><div><p><b>Terrain Generation</b></p><ul><li><a href='http://en.wikipedia.org/wiki/Maze_generation_algorithm'>Maze generation on wikipedia</a></li><li><a href='http://www.roguebasin.com/index.php?title=Articles#Map'>Rogue Basin page</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm'>Dungeon Building Algorithm</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python'>Dungeon Builder in Python</a></li><li><a href='http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels'>Cellular Automata for Terrain</a></li><li><a href='http://pixelenvy.ca/wa/ca_cave.html'>More cellular automata for terrain</a></li><li><a href='http://www.roguebasin.com/index.php?title=Abstract_Dungeons'>Abstract dungeons from RogueBasin</a></li><li><a href='http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern'>Cavern delving</a></li><li><a href='http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation'>BSP Dungeon gen</a></li></ul></div><div><p><b>Clojure</b></p><ul><li><a href='https://github.com/JonyEpsilon/gorilla-repl'>Gorilla Repl</a></li><li><a href='https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer'>core.logic Primer</a></li><li><a href='https://github.com/clojure/core.logic'>core.logic GitHub</a></li><li><a href='http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html'>Namespace Primer</a></li><li><a href='https://gist.github.com/ghoseb/287710'>NS cheat-sheet</a></li></ul></div><div><p><b>cl-notebook Dev</b></p><ul><li><a href='http://genericons.com/#draggable'>Genericons</a></li></ul></div><div><p><b>Misc...</b></p><ul><li><a href='https://github.com/darthdeus/LightTable-Ruby'>LightTable Ruby mode</a></li><li><a href='http://code.google.com/p/key-mon/source/checkout'>KeyMon -- tool for showing keystrokes in screencasts</a></li><li><a href='http://www.subtext-lang.org/'>Subtext Lang</a></li><li><a href='http://byorgey.wordpress.com/catsters-guide-2/'>The Catsters</a></li><li><a href='http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53'>Share Elm -- Line of Sight</a></li><li><a href='http://codemirror.net/doc/manual.html#overview'>CodeMirror manual</a></li><li><a href='https://github.com/nkmathew/yasi-sexp-indenter'>batch s-exp indenter test</a></li></ul></div>"))))
((5140 11791 676836000) :INSERT
 (51 :CONTENTS "(:h2 \"Shit to read up on...\")

(flet ((section (title &rest uris)
         (htm (:div (:p (:b (str title)))
                    (:ul (loop for (u name) on uris by #'cddr
                               do (htm (:li (:a :href u (str name))))))))))
   (section \"Terrain Generation\"
	\"http://en.wikipedia.org/wiki/Maze_generation_algorithm\" \"Maze generation on wikipedia\"
	\"http://www.roguebasin.com/index.php?title=Articles#Map\" \"Rogue Basin page\"
	\"http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm\" \"Dungeon Building Algorithm\"
	\"http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python\" \"Dungeon Builder in Python\"
	\"http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels\" \"Cellular Automata for Terrain\"
	\"http://pixelenvy.ca/wa/ca_cave.html\" \"More cellular automata for terrain\"
	\"http://www.roguebasin.com/index.php?title=Abstract_Dungeons\" \"Abstract dungeons from RogueBasin\"
	\"http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern\" \"Cavern delving\"
	\"http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation\" \"BSP Dungeon gen\")
      
   (section \"Clojure\"
	\"https://github.com/JonyEpsilon/gorilla-repl\" \"Gorilla Repl\"
	\"https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer\" \"core.logic Primer\"
	\"https://github.com/clojure/core.logic\" \"core.logic GitHub\"
	\"http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html\" \"Namespace Primer\"
	\"https://gist.github.com/ghoseb/287710\" \"NS cheat-sheet\")
      
   (section \"cl-notebook Dev\"
	\"http://genericons.com/#draggable\" \"Genericons\")
      
   (section \"Misc...\"
	\"https://github.com/darthdeus/LightTable-Ruby\" \"LightTable Ruby mode\"
	\"http://code.google.com/p/key-mon/source/checkout\" \"KeyMon -- tool for showing keystrokes in screencasts\"
	\"http://www.subtext-lang.org/\" \"Subtext Lang\"
	\"http://byorgey.wordpress.com/catsters-guide-2/\" \"The Catsters\"
	\"http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53\" \"Share Elm -- Line of Sight\"
	\"http://codemirror.net/doc/manual.html#overview\" \"CodeMirror manual\"
	\"https://github.com/nkmathew/yasi-sexp-indenter\" \"batch s-exp indenter test\"))"))
((5140 11791 676857000) :INSERT
 (51 :VALUE
  ((:RESULT
    . "<h2>Shit to read up on...</h2><div><p><b>Terrain Generation</b></p><ul><li><a href='http://en.wikipedia.org/wiki/Maze_generation_algorithm'>Maze generation on wikipedia</a></li><li><a href='http://www.roguebasin.com/index.php?title=Articles#Map'>Rogue Basin page</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon-Building_Algorithm'>Dungeon Building Algorithm</a></li><li><a href='http://www.roguebasin.com/index.php?title=Dungeon_builder_written_in_Python'>Dungeon Builder in Python</a></li><li><a href='http://www.roguebasin.com/index.php?title=Cellular_Automata_Method_for_Generating_Random_Cave-Like_Levels'>Cellular Automata for Terrain</a></li><li><a href='http://pixelenvy.ca/wa/ca_cave.html'>More cellular automata for terrain</a></li><li><a href='http://www.roguebasin.com/index.php?title=Abstract_Dungeons'>Abstract dungeons from RogueBasin</a></li><li><a href='http://www.roguebasin.com/index.php?title=Delving_a_connected_cavern'>Cavern delving</a></li><li><a href='http://www.roguebasin.com/index.php?title=Basic_BSP_Dungeon_generation'>BSP Dungeon gen</a></li></ul></div><div><p><b>Clojure</b></p><ul><li><a href='https://github.com/JonyEpsilon/gorilla-repl'>Gorilla Repl</a></li><li><a href='https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer'>core.logic Primer</a></li><li><a href='https://github.com/clojure/core.logic'>core.logic GitHub</a></li><li><a href='http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html'>Namespace Primer</a></li><li><a href='https://gist.github.com/ghoseb/287710'>NS cheat-sheet</a></li></ul></div><div><p><b>cl-notebook Dev</b></p><ul><li><a href='http://genericons.com/#draggable'>Genericons</a></li></ul></div><div><p><b>Misc...</b></p><ul><li><a href='https://github.com/darthdeus/LightTable-Ruby'>LightTable Ruby mode</a></li><li><a href='http://code.google.com/p/key-mon/source/checkout'>KeyMon -- tool for showing keystrokes in screencasts</a></li><li><a href='http://www.subtext-lang.org/'>Subtext Lang</a></li><li><a href='http://byorgey.wordpress.com/catsters-guide-2/'>The Catsters</a></li><li><a href='http://share-elm.com/sprout/532fa8fee4b0f7cc0dd4ef53'>Share Elm -- Line of Sight</a></li><li><a href='http://codemirror.net/doc/manual.html#overview'>CodeMirror manual</a></li><li><a href='https://github.com/nkmathew/yasi-sexp-indenter'>batch s-exp indenter test</a></li></ul></div>")
   (:STDOUT . ""))))
((5140 76722 123470000) :DELETE (69 :CELL-ORDER (23 2 1 15 7 10 51)))
((5140 76722 123503000) :INSERT (70 :CELL-ORDER (2 23 1 15 7 10 51)))
((5140 76723 789522000) :DELETE (70 :CELL-ORDER (2 23 1 15 7 10 51)))
((5140 76723 789538000) :INSERT (71 :CELL-ORDER (23 2 1 15 7 10 51)))
((5140 78620 537584000) :INSERT (72 :CELL NIL))
((5140 78620 537611000) :INSERT (72 :CELL-TYPE :COMMON-LISP))
((5140 78620 537615000) :INSERT (72 :CONTENTS ""))
((5140 78620 537619000) :INSERT (72 :VALUE ""))
((5140 78624 48749000) :DELETE (72 :VALUE ""))
((5140 78624 48766000) :DELETE (72 :CONTENTS ""))
((5140 78624 48773000) :DELETE (72 :CELL-TYPE :COMMON-LISP))
((5140 78624 48780000) :DELETE (72 :CELL NIL))
((5140 78965 546413000) :DELETE (23 :CELL-TYPE :CL-WHO))
((5140 78965 546437000) :DELETE
 (23 :VALUE ((:RESULT . "<h1>Test Book</h1>") (:STDOUT . ""))))
((5140 78965 546449000) :INSERT (23 :CELL-TYPE :COMMON-LISP))
((5140 78965 546456000) :INSERT
 (23 :VALUE
  ((:RESULT
    ((ERROR
      ((ERROR-TYPE . UNDEFINED-FUNCTION) (:FORM . "(:H1 \"Test Book\")")
       (:NAME . :H1)))))
   (:STDOUT . ""))))
((5140 78968 393570000) :DELETE (23 :CELL-TYPE :COMMON-LISP))
((5140 78968 393586000) :DELETE
 (23 :VALUE
  ((:RESULT
    ((ERROR
      ((ERROR-TYPE . UNDEFINED-FUNCTION) (:FORM . "(:H1 \"Test Book\")")
       (:NAME . :H1)))))
   (:STDOUT . ""))))
((5140 78968 393592000) :INSERT (23 :CELL-TYPE :CL-WHO))
((5140 78968 393597000) :INSERT
 (23 :VALUE ((:RESULT . "<h1>Test Book</h1>") (:STDOUT . ""))))
((5140 80090 114565000) :INSERT (73 :CELL NIL))
((5140 80090 114603000) :INSERT (73 :CELL-TYPE :COMMON-LISP))
((5140 80090 114608000) :INSERT (73 :CONTENTS ""))
((5140 80090 114613000) :INSERT (73 :VALUE ""))
((5140 80093 536569000) :DELETE (73 :VALUE ""))
((5140 80093 536592000) :DELETE (73 :CONTENTS ""))
((5140 80093 536602000) :DELETE (73 :CELL-TYPE :COMMON-LISP))
((5140 80093 536611000) :DELETE (73 :CELL NIL))
((5140 80122 612003000) :INSERT (74 :CELL NIL))
((5140 80122 612017000) :INSERT (74 :CELL-TYPE :COMMON-LISP))
((5140 80122 612021000) :INSERT (74 :CONTENTS ""))
((5140 80122 612025000) :INSERT (74 :VALUE ""))
((5140 80127 542946000) :DELETE (74 :CELL-TYPE :COMMON-LISP))
((5140 80127 542967000) :DELETE (74 :VALUE ""))
((5140 80127 542978000) :INSERT (74 :CELL-TYPE :CL-WHO))
((5140 80127 542984000) :INSERT (74 :VALUE ((:RESULT . "") (:STDOUT . ""))))
((5140 80140 769091000) :DELETE (74 :CONTENTS ""))
((5140 80140 769115000) :DELETE (74 :VALUE ((:RESULT . "") (:STDOUT . ""))))
((5140 80140 769124000) :INSERT (74 :CONTENTS "(:p \"Something\")"))
((5140 80140 769130000) :INSERT
 (74 :VALUE ((:RESULT . "<p>Something</p>") (:STDOUT . ""))))
((5140 80144 636867000) :DELETE
 (74 :VALUE ((:RESULT . "<p>Something</p>") (:STDOUT . ""))))
((5140 80144 636884000) :DELETE (74 :CONTENTS "(:p \"Something\")"))
((5140 80144 636892000) :DELETE (74 :CELL-TYPE :CL-WHO))
((5140 80144 636898000) :DELETE (74 :CELL NIL))
((5141 1801 221790000) :INSERT (75 :CELL NIL))
((5141 1801 221877000) :INSERT (75 :CELL-TYPE :COMMON-LISP))
((5141 1801 221889000) :INSERT (75 :CONTENTS ""))
((5141 1801 221892000) :INSERT (75 :VALUE ""))
((5141 1834 569113000) :DELETE (75 :CONTENTS ""))
((5141 1834 569209000) :DELETE (75 :VALUE ""))
((5141 1834 569231000) :INSERT (75 :CONTENTS "(+ 2 3)"))
((5141 1834 569238000) :INSERT
 (75 :VALUE ((:RESULT ((INTEGER "5"))) (:STDOUT . ""))))
((5141 1974 314199000) :DELETE (75 :CONTENTS "(+ 2 3)"))
((5141 1974 314220000) :DELETE
 (75 :VALUE ((:RESULT ((INTEGER "5"))) (:STDOUT . ""))))
((5141 1974 314228000) :INSERT
 (75 :CONTENTS "(defgeneric dependency-tree (system))"))
((5141 1974 314234000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((STANDARD-GENERIC-FUNCTION
      "#<STANDARD-GENERIC-FUNCTION DEPENDENCY-TREE (0)>")))
   (:STDOUT . ""))))
((5141 2045 666888000) :DELETE
 (75 :CONTENTS "(defgeneric dependency-tree (system))"))
((5141 2045 666909000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((STANDARD-GENERIC-FUNCTION
      "#<STANDARD-GENERIC-FUNCTION DEPENDENCY-TREE (0)>")))
   (:STDOUT . ""))))
((5141 2045 666917000) :INSERT
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
	     (rec (sys) 
	       (loop for s in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
		  unless (gethash s res) do (rec s)
		  do (incf (gethash s res 0)))))
      (rec system))))"))
((5141 2045 666926000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((STANDARD-METHOD
      "#<STANDARD-METHOD DEPENDENCY-TREE (SYMBOL) {10055AF0D3}>")))
   (:STDOUT . ""))))
((5141 2062 153131000) :INSERT (76 :CELL NIL))
((5141 2062 153145000) :INSERT (76 :CELL-TYPE :COMMON-LISP))
((5141 2062 153150000) :INSERT (76 :CONTENTS ""))
((5141 2062 153154000) :INSERT (76 :VALUE ""))
((5141 2067 189313000) :DELETE (76 :CONTENTS ""))
((5141 2067 189328000) :DELETE (76 :VALUE ""))
((5141 2067 189334000) :INSERT (76 :CONTENTS "(dependency-tree :cl-notebook)"))
((5141 2067 189338000) :INSERT
 (76 :VALUE ((:RESULT ((NULL "NIL"))) (:STDOUT . ""))))
((5141 2075 164520000) :DELETE (76 :CONTENTS "(dependency-tree :cl-notebook)"))
((5141 2075 164542000) :DELETE
 (76 :VALUE ((:RESULT ((NULL "NIL"))) (:STDOUT . ""))))
((5141 2075 164551000) :INSERT (76 :CONTENTS "(dependency-tree :cl-who)"))
((5141 2075 164558000) :INSERT
 (76 :VALUE ((:RESULT ((NULL "NIL"))) (:STDOUT . ""))))
((5141 2155 757154000) :DELETE
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
	     (rec (sys) 
	       (loop for s in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
		  unless (gethash s res) do (rec s)
		  do (incf (gethash s res 0)))))
      (rec system))))"))
((5141 2155 757189000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((STANDARD-METHOD
      "#<STANDARD-METHOD DEPENDENCY-TREE (SYMBOL) {10055AF0D3}>")))
   (:STDOUT . ""))))
((5141 2155 757201000) :INSERT
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
	     (rec (sys) 
	       (loop for s in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
		  unless (gethash s res) do (rec s)
		  do (incf (gethash s res 0)))))
      (rec system))
     (alexandria:hash-table-keys res)))"))
((5141 2155 757212000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((STANDARD-METHOD
      "#<STANDARD-METHOD DEPENDENCY-TREE (SYMBOL) {1006E47F33}>")))
   (:STDOUT . ""))))
((5141 2158 473347000) :DELETE (76 :CONTENTS "(dependency-tree :cl-who)"))
((5141 2158 473367000) :DELETE
 (76 :VALUE ((:RESULT ((NULL "NIL"))) (:STDOUT . ""))))
((5141 2158 473376000) :INSERT (76 :CONTENTS "(dependency-tree :cl-who)"))
((5141 2158 473381000) :INSERT
 (76 :VALUE ((:RESULT ((NULL "NIL"))) (:STDOUT . ""))))
((5141 2160 754967000) :DELETE (76 :CONTENTS "(dependency-tree :cl-who)"))
((5141 2160 754987000) :DELETE
 (76 :VALUE ((:RESULT ((NULL "NIL"))) (:STDOUT . ""))))
((5141 2160 754994000) :INSERT (76 :CONTENTS "(dependency-tree :cl-who)"))
((5141 2160 755000000) :INSERT
 (76 :VALUE ((:RESULT ((NULL "NIL"))) (:STDOUT . ""))))
((5141 2170 698347000) :DELETE
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
	     (rec (sys) 
	       (loop for s in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
		  unless (gethash s res) do (rec s)
		  do (incf (gethash s res 0)))))
      (rec system))
     (alexandria:hash-table-keys res)))"))
((5141 2170 698369000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((STANDARD-METHOD
      "#<STANDARD-METHOD DEPENDENCY-TREE (SYMBOL) {1006E47F33}>")))
   (:STDOUT . ""))))
((5141 2170 698376000) :INSERT
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
	     (rec (sys) 
	       (loop for s in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
		  unless (gethash s res) do (rec s)
		  do (incf (gethash s res 0)))))
      (rec system))
     (alexandria:hash-table-keys res)))"))
((5141 2170 698382000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((STANDARD-METHOD
      "#<STANDARD-METHOD DEPENDENCY-TREE (SYMBOL) {10071686C3}>")))
   (:STDOUT . ""))))
((5141 2172 923568000) :DELETE (71 :CELL-ORDER (23 2 1 15 7 10 51)))
((5141 2172 923668000) :INSERT (77 :CELL-ORDER (23 2 1 15 7 10 51 75 76)))
((5141 2174 584957000) :DELETE (76 :CONTENTS "(dependency-tree :cl-who)"))
((5141 2174 584978000) :DELETE
 (76 :VALUE ((:RESULT ((NULL "NIL"))) (:STDOUT . ""))))
((5141 2174 584988000) :INSERT (76 :CONTENTS "(dependency-tree :cl-who)"))
((5141 2174 584994000) :INSERT
 (76 :VALUE ((:RESULT ((NULL "NIL"))) (:STDOUT . ""))))
((5141 2179 76294000) :DELETE (76 :CONTENTS "(dependency-tree :cl-who)"))
((5141 2179 76313000) :DELETE
 (76 :VALUE ((:RESULT ((NULL "NIL"))) (:STDOUT . ""))))
((5141 2179 76319000) :INSERT (76 :CONTENTS "(dependency-tree :cl-notebook)"))
((5141 2179 76324000) :INSERT
 (76 :VALUE
  ((:RESULT
    ((CONS
      "(#:CL-MOP #:CL-CSS #:CL-WHO #:PARENSCRIPT :NAMED-READTABLES :ANAPHORA :CL-PPCRE
 #:FACT-BASE #:CL-FAD #:OPTIMA #:LOCAL-TIME :CL-FAD #:ANAPHORA #:ALEXANDRIA
 #:HOUSE #:FLEXI-STREAMS :TRIVIAL-GRAY-STREAMS #:OPTIMA :CLOSER-MOP #:CL-PPCRE
 #:USOCKET :SB-BSD-SOCKETS #:CL-FAD :BORDEAUX-THREADS :SB-POSIX
 #:BORDEAUX-THREADS :ALEXANDRIA #:CL-JSON #:CL-PPCRE #:CL-BASE64 #:ANAPHORA
 #:ALEXANDRIA #:ANAPHORA #:ALEXANDRIA)")))
   (:STDOUT . ""))))
((5141 8669 930798000) :DELETE (77 :CELL-ORDER (23 2 1 15 7 10 51 75 76)))
((5141 8669 930984000) :INSERT (78 :CELL-ORDER (23 2 15 1 7 10 51 75 76)))
((5141 8672 398991000) :DELETE (78 :CELL-ORDER (23 2 15 1 7 10 51 75 76)))
((5141 8672 399069000) :INSERT (79 :CELL-ORDER (23 2 1 15 7 10 51 75 76)))
((5141 8674 428387000) :DELETE (79 :CELL-ORDER (23 2 1 15 7 10 51 75 76)))
((5141 8674 428421000) :INSERT (80 :CELL-ORDER (23 2 15 1 7 10 51 75 76)))
((5141 8678 379296000) :DELETE
 (15 :CONTENTS
  "(format t \"Standard output capture!~%Yes, even with multiple lines!~%\")
(format t \"And yes, it will show you\")
(format t \" total \")
(format t \"output for a group of printing procs.\")"))
((5141 8678 379316000) :DELETE
 (15 :VALUE
  ((:RESULT ((NULL "NIL")))
   (:STDOUT . "Standard output capture!
Yes, even with multiple lines!
And yes, it will show you total output for a group of printing procs."))))
((5141 8678 379325000) :INSERT
 (15 :CONTENTS
  "(format t \"Standard output capture!~%Yes, even with multiple lines!~%\")
(format t \"And yes, it will show you\")
(format t \" total \")
(format t \"output for a group of printing procs.\")"))
((5141 8678 379331000) :INSERT
 (15 :VALUE
  ((:RESULT ((NULL "NIL")))
   (:STDOUT . "Standard output capture!
Yes, even with multiple lines!
And yes, it will show you total output for a group of printing procs."))))
((5141 8684 261686000) :DELETE (80 :CELL-ORDER (23 2 15 1 7 10 51 75 76)))
((5141 8684 261701000) :INSERT (81 :CELL-ORDER (23 2 15 1 7 10 51 75 76)))
((5141 8695 919527000) :DELETE
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
	     (rec (sys) 
	       (loop for s in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
		  unless (gethash s res) do (rec s)
		  do (incf (gethash s res 0)))))
      (rec system))
     (alexandria:hash-table-keys res)))"))
((5141 8695 919556000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((STANDARD-METHOD
      "#<STANDARD-METHOD DEPENDENCY-TREE (SYMBOL) {10071686C3}>")))
   (:STDOUT . ""))))
((5141 8695 919566000) :INSERT
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
	     (rec (sys) 
	       (loop for s in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
		  unless (gethash s res) do (rec s)
		  do (incf (gethash s res 0)))))
      (rec system))
     (alexandria:hash-table-keys res)))"))
((5141 8695 919575000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((STANDARD-METHOD
      "#<STANDARD-METHOD DEPENDENCY-TREE (SYMBOL) {1004AA43E3}>")))
   (:STDOUT . ""))))
((5141 8732 367162000) :DELETE
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
	     (rec (sys) 
	       (loop for s in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
		  unless (gethash s res) do (rec s)
		  do (incf (gethash s res 0)))))
      (rec system))
     (alexandria:hash-table-keys res)))"))
((5141 8732 367189000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((STANDARD-METHOD
      "#<STANDARD-METHOD DEPENDENCY-TREE (SYMBOL) {1004AA43E3}>")))
   (:STDOUT . ""))))
((5141 8732 367195000) :INSERT
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
	     (rec (sys) 
	       (loop for s in (asdf/component:sideway-dependencies (find-sys sys))
		  unless (gethash s res) do (rec s)
		  do (incf (gethash s res 0)))))
      (rec system))
     (alexandria:hash-table-keys res)))"))
((5141 8732 367203000) :INSERT
 (75 :VALUE
  ((:RESULT
    (ERROR
     ((ERROR-TYPE . SIMPLE-ERROR)
      (:ERROR-MESSAGE . "There is no applicable method for the generic function
  #<STANDARD-GENERIC-FUNCTION CL-MOP:TO-ALIST (2)>
when called with arguments
  (#<SB-INT:SIMPLE-STYLE-WARNING \"undefined ~(~A~): ~S\" {1004C22E63}>)."))))
   (:STDOUT . ""))))
((5141 8749 919549000) :DELETE
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
	     (rec (sys) 
	       (loop for s in (asdf/component:sideway-dependencies (find-sys sys))
		  unless (gethash s res) do (rec s)
		  do (incf (gethash s res 0)))))
      (rec system))
     (alexandria:hash-table-keys res)))"))
((5141 8749 919578000) :DELETE
 (75 :VALUE
  ((:RESULT
    (ERROR
     ((ERROR-TYPE . SIMPLE-ERROR)
      (:ERROR-MESSAGE . "There is no applicable method for the generic function
  #<STANDARD-GENERIC-FUNCTION CL-MOP:TO-ALIST (2)>
when called with arguments
  (#<SB-INT:SIMPLE-STYLE-WARNING \"undefined ~(~A~): ~S\" {1004C22E63}>)."))))
   (:STDOUT . ""))))
((5141 8749 919586000) :INSERT
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
	     (rec (sys) 
	       (loop for s in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
		  unless (gethash s res) do (rec s)
		  do (incf (gethash s res 0)))))
      (rec system))
     (alexandria:hash-table-keys res)))"))
((5141 8749 919596000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((STANDARD-METHOD
      "#<STANDARD-METHOD DEPENDENCY-TREE (SYMBOL) {1004FEA733}>")))
   (:STDOUT . ""))))
((5141 18336 911325000) :DELETE (23 :CONTENTS "(:h1 \"Test Book\")"))
((5141 18336 911478000) :DELETE
 (23 :VALUE ((:RESULT . "<h1>Test Book</h1>") (:STDOUT . ""))))
((5141 18336 911501000) :INSERT (23 :CONTENTS "(:h1 \"Test Book\""))
((5141 18336 911524000) :INSERT
 (23 :VALUE ((:RESULT ((ERROR ((ERROR-TYPE . END-OF-FILE))))) (:STDOUT . ""))))
((5141 18446 990057000) :DELETE (23 :CONTENTS "(:h1 \"Test Book\""))
((5141 18446 990073000) :DELETE
 (23 :VALUE ((:RESULT ((ERROR ((ERROR-TYPE . END-OF-FILE))))) (:STDOUT . ""))))
((5141 18446 990080000) :INSERT (23 :CONTENTS "(:h1 \"Test Book\""))
((5141 18446 990085000) :INSERT
 (23 :VALUE ((:RESULT ((ERROR ((ERROR-TYPE . END-OF-FILE))))) (:STDOUT . ""))))
((5141 18515 10939000) :DELETE (23 :CONTENTS "(:h1 \"Test Book\""))
((5141 18515 11004000) :DELETE
 (23 :VALUE ((:RESULT ((ERROR ((ERROR-TYPE . END-OF-FILE))))) (:STDOUT . ""))))
((5141 18515 11013000) :INSERT (23 :CONTENTS "(:h1 \"Test Book\")"))
((5141 18515 11019000) :INSERT
 (23 :VALUE ((:RESULT . "<h1>Test Book</h1>") (:STDOUT . ""))))
((5141 18520 645227000) :DELETE (23 :CONTENTS "(:h1 \"Test Book\")"))
((5141 18520 645242000) :DELETE
 (23 :VALUE ((:RESULT . "<h1>Test Book</h1>") (:STDOUT . ""))))
((5141 18520 645248000) :INSERT (23 :CONTENTS "(:h1 \"Test Book\"))"))
((5141 18520 645253000) :INSERT
 (23 :VALUE
  ((:RESULT ((ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR)))))
   (:STDOUT . ""))))
((5141 18525 18377000) :DELETE (23 :CONTENTS "(:h1 \"Test Book\"))"))
((5141 18525 18395000) :DELETE
 (23 :VALUE
  ((:RESULT ((ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR)))))
   (:STDOUT . ""))))
((5141 18525 18401000) :INSERT (23 :CONTENTS "(:h1 \"Test Book\")"))
((5141 18525 18405000) :INSERT
 (23 :VALUE ((:RESULT . "<h1>Test Book</h1>") (:STDOUT . ""))))
((5141 18545 593080000) :DELETE
 (7 :CONTENTS ";; errors!

(+ 2 3 4 :test)"))
((5141 18545 593108000) :DELETE
 (7 :VALUE
  ((:RESULT
    ((ERROR
      ((ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 2 3 4 :TEST)") (:DATUM . :TEST)
       (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . ""))))
((5141 18545 593126000) :INSERT
 (7 :CONTENTS ";; errors!

(+ 2 3 4 :test)"))
((5141 18545 593133000) :INSERT
 (7 :VALUE
  ((:RESULT
    (((ERROR
       ((ERROR-TYPE . SIMPLE-TYPE-ERROR)
        (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
        (:FORM . "(+ 2 3 4 :TEST)") (:DATUM . :TEST)
        (:EXPECTED-TYPE . NUMBER))))))
   (:STDOUT . ""))))
((5141 18549 171802000) :DELETE
 (7 :CONTENTS ";; errors!

(+ 2 3 4 :test)"))
((5141 18549 171831000) :DELETE
 (7 :VALUE
  ((:RESULT
    (((ERROR
       ((ERROR-TYPE . SIMPLE-TYPE-ERROR)
        (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
        (:FORM . "(+ 2 3 4 :TEST)") (:DATUM . :TEST)
        (:EXPECTED-TYPE . NUMBER))))))
   (:STDOUT . ""))))
((5141 18549 171842000) :INSERT
 (7 :CONTENTS ";; errors!

(+ 2 3 4 :test)"))
((5141 18549 171850000) :INSERT
 (7 :VALUE
  ((:RESULT
    (((ERROR
       ((ERROR-TYPE . SIMPLE-TYPE-ERROR)
        (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
        (:FORM . "(+ 2 3 4 :TEST)") (:DATUM . :TEST)
        (:EXPECTED-TYPE . NUMBER))))))
   (:STDOUT . ""))))
((5141 18595 886982000) :DELETE
 (7 :CONTENTS ";; errors!

(+ 2 3 4 :test)"))
((5141 18595 887000000) :DELETE
 (7 :VALUE
  ((:RESULT
    (((ERROR
       ((ERROR-TYPE . SIMPLE-TYPE-ERROR)
        (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
        (:FORM . "(+ 2 3 4 :TEST)") (:DATUM . :TEST)
        (:EXPECTED-TYPE . NUMBER))))))
   (:STDOUT . ""))))
((5141 18595 887007000) :INSERT
 (7 :CONTENTS ";; errors!

(+ 2 3 4 :test)"))
((5141 18595 887012000) :INSERT
 (7 :VALUE
  ((:RESULT
    (((ERROR
       ((ERROR-TYPE . SIMPLE-TYPE-ERROR)
        (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
        (:FORM . "(+ 2 3 4 :TEST)") (:DATUM . :TEST)
        (:EXPECTED-TYPE . NUMBER))))))
   (:STDOUT . ""))))
((5141 18832 552894000) :DELETE
 (7 :CONTENTS ";; errors!

(+ 2 3 4 :test)"))
((5141 18832 552937000) :DELETE
 (7 :VALUE
  ((:RESULT
    (((ERROR
       ((ERROR-TYPE . SIMPLE-TYPE-ERROR)
        (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
        (:FORM . "(+ 2 3 4 :TEST)") (:DATUM . :TEST)
        (:EXPECTED-TYPE . NUMBER))))))
   (:STDOUT . ""))))
((5141 18832 552944000) :INSERT
 (7 :CONTENTS ";; errors!

(+ 2 3 4 :test)"))
((5141 18832 552950000) :INSERT
 (7 :VALUE
  ((:RESULT
    (((ERROR
       ((ERROR-TYPE . SIMPLE-TYPE-ERROR)
        (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
        (:FORM . "(+ 2 3 4 :TEST)") (:DATUM . :TEST)
        (:EXPECTED-TYPE . NUMBER))))))
   (:STDOUT . ""))))
((5141 18835 10580000) :DELETE
 (7 :CONTENTS ";; errors!

(+ 2 3 4 :test)"))
((5141 18835 10607000) :DELETE
 (7 :VALUE
  ((:RESULT
    (((ERROR
       ((ERROR-TYPE . SIMPLE-TYPE-ERROR)
        (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
        (:FORM . "(+ 2 3 4 :TEST)") (:DATUM . :TEST)
        (:EXPECTED-TYPE . NUMBER))))))
   (:STDOUT . ""))))
((5141 18835 10620000) :INSERT
 (7 :CONTENTS ";; errors!

(+ 2 3 4 :test)"))
((5141 18835 10628000) :INSERT
 (7 :VALUE
  ((:RESULT
    (((ERROR
       ((ERROR-TYPE . SIMPLE-TYPE-ERROR)
        (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
        (:FORM . "(+ 2 3 4 :TEST)") (:DATUM . :TEST)
        (:EXPECTED-TYPE . NUMBER))))))
   (:STDOUT . ""))))
((5141 18839 508430000) :DELETE
 (7 :CONTENTS ";; errors!

(+ 2 3 4 :test)"))
((5141 18839 508456000) :DELETE
 (7 :VALUE
  ((:RESULT
    (((ERROR
       ((ERROR-TYPE . SIMPLE-TYPE-ERROR)
        (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
        (:FORM . "(+ 2 3 4 :TEST)") (:DATUM . :TEST)
        (:EXPECTED-TYPE . NUMBER))))))
   (:STDOUT . ""))))
((5141 18839 508467000) :INSERT
 (7 :CONTENTS ";; errors!

(+ 2 3 4 :test 5)"))
((5141 18839 508475000) :INSERT
 (7 :VALUE
  ((:RESULT
    (((ERROR
       ((ERROR-TYPE . SIMPLE-TYPE-ERROR)
        (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
        (:FORM . "(+ 2 3 4 :TEST 5)") (:DATUM . :TEST)
        (:EXPECTED-TYPE . NUMBER))))))
   (:STDOUT . ""))))
((5141 18892 521204000) :DELETE
 (7 :CONTENTS ";; errors!

(+ 2 3 4 :test 5)"))
((5141 18892 521219000) :DELETE
 (7 :VALUE
  ((:RESULT
    (((ERROR
       ((ERROR-TYPE . SIMPLE-TYPE-ERROR)
        (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
        (:FORM . "(+ 2 3 4 :TEST 5)") (:DATUM . :TEST)
        (:EXPECTED-TYPE . NUMBER))))))
   (:STDOUT . ""))))
((5141 18892 521225000) :INSERT
 (7 :CONTENTS ";; errors!

(+ 2 3 4 :test 5)"))
((5141 18892 521229000) :INSERT
 (7 :VALUE
  ((:RESULT
    ((ERROR
      ((ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 2 3 4 :TEST 5)") (:DATUM . :TEST)
       (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . ""))))
((5141 18896 459637000) :DELETE (23 :CONTENTS "(:h1 \"Test Book\")"))
((5141 18896 459659000) :DELETE
 (23 :VALUE ((:RESULT . "<h1>Test Book</h1>") (:STDOUT . ""))))
((5141 18896 459699000) :INSERT (23 :CONTENTS "(:h1 \"Test Book\""))
((5141 18896 459707000) :INSERT
 (23 :VALUE ((:RESULT (ERROR ((ERROR-TYPE . END-OF-FILE)))) (:STDOUT . ""))))
((5141 19095 980626000) :DELETE (23 :CONTENTS "(:h1 \"Test Book\""))
((5141 19095 980660000) :DELETE
 (23 :VALUE ((:RESULT (ERROR ((ERROR-TYPE . END-OF-FILE)))) (:STDOUT . ""))))
((5141 19095 980675000) :INSERT (23 :CONTENTS "(:h1 \"Test Book\""))
((5141 19095 980686000) :INSERT
 (23 :VALUE ((:RESULT ((ERROR ((ERROR-TYPE . END-OF-FILE))))) (:STDOUT . ""))))
((5141 19099 479211000) :DELETE (23 :CONTENTS "(:h1 \"Test Book\""))
((5141 19099 479236000) :DELETE
 (23 :VALUE ((:RESULT ((ERROR ((ERROR-TYPE . END-OF-FILE))))) (:STDOUT . ""))))
((5141 19099 479248000) :INSERT (23 :CONTENTS "(:h1 \"Test Book\"))"))
((5141 19099 479256000) :INSERT
 (23 :VALUE
  ((:RESULT ((ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR)))))
   (:STDOUT . ""))))
((5141 19101 369076000) :DELETE (23 :CONTENTS "(:h1 \"Test Book\"))"))
((5141 19101 369115000) :DELETE
 (23 :VALUE
  ((:RESULT ((ERROR ((ERROR-TYPE . SB-INT:SIMPLE-READER-ERROR)))))
   (:STDOUT . ""))))
((5141 19101 369121000) :INSERT (23 :CONTENTS "(:h1 \"Test Book\")"))
((5141 19101 369125000) :INSERT
 (23 :VALUE ((:RESULT . "<h1>Test Book</h1>") (:STDOUT . ""))))
((5141 19103 434124000) :DELETE
 (7 :CONTENTS ";; errors!

(+ 2 3 4 :test 5)"))
((5141 19103 434141000) :DELETE
 (7 :VALUE
  ((:RESULT
    ((ERROR
      ((ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 2 3 4 :TEST 5)") (:DATUM . :TEST)
       (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . ""))))
((5141 19103 434148000) :INSERT
 (7 :CONTENTS ";; errors!

(+ 2 3 4 :test 5)"))
((5141 19103 434152000) :INSERT
 (7 :VALUE
  ((:RESULT
    ((ERROR
      ((ERROR-TYPE . SIMPLE-TYPE-ERROR)
       (:ERROR-MESSAGE . "Argument Y is not a NUMBER: :TEST")
       (:FORM . "(+ 2 3 4 :TEST 5)") (:DATUM . :TEST)
       (:EXPECTED-TYPE . NUMBER)))))
   (:STDOUT . ""))))
((5141 19107 536462000) :DELETE
 (10 :CONTENTS
  ";; The working forms get evaled when an error happens part-way through!
(+ 2 3)
(+ 3 4)
(+ 4 5)
(values :yes :multiple :values :also :work!)
(list :no :they :are :not :the :same :as :a :list :of :values)
(format \"blah\")"))
((5141 19107 536503000) :DELETE
 (10 :VALUE
  ((:RESULT ((INTEGER "5")) ((INTEGER "7")) ((INTEGER "9"))
    ((KEYWORD ":YES") (KEYWORD ":MULTIPLE") (KEYWORD ":VALUES")
     (KEYWORD ":ALSO") (KEYWORD ":WORK!"))
    ((CONS "(:NO :THEY :ARE :NOT :THE :SAME :AS :A :LIST :OF :VALUES)"))
    ((ERROR
      ((ERROR-TYPE . SB-INT:SIMPLE-PROGRAM-ERROR)
       (:ERROR-MESSAGE . "invalid number of arguments: 1")
       (:FORM . "(FORMAT \"blah\")")))))
   (:STDOUT . ""))))
((5141 19107 536515000) :INSERT
 (10 :CONTENTS
  ";; The working forms get evaled when an error happens part-way through!
(+ 2 3)
(+ 3 4)
(+ 4 5)
(values :yes :multiple :values :also :work!)
(list :no :they :are :not :the :same :as :a :list :of :values)
(format \"blah\")"))
((5141 19107 536525000) :INSERT
 (10 :VALUE
  ((:RESULT ((INTEGER "5")) ((INTEGER "7")) ((INTEGER "9"))
    ((KEYWORD ":YES") (KEYWORD ":MULTIPLE") (KEYWORD ":VALUES")
     (KEYWORD ":ALSO") (KEYWORD ":WORK!"))
    ((CONS "(:NO :THEY :ARE :NOT :THE :SAME :AS :A :LIST :OF :VALUES)"))
    ((ERROR
      ((ERROR-TYPE . SB-INT:SIMPLE-PROGRAM-ERROR)
       (:ERROR-MESSAGE . "invalid number of arguments: 1")
       (:FORM . "(FORMAT \"blah\")")))))
   (:STDOUT . ""))))
((5141 19118 721732000) :DELETE
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
	     (rec (sys) 
	       (loop for s in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
		  unless (gethash s res) do (rec s)
		  do (incf (gethash s res 0)))))
      (rec system))
     (alexandria:hash-table-keys res)))"))
((5141 19118 721762000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((STANDARD-METHOD
      "#<STANDARD-METHOD DEPENDENCY-TREE (SYMBOL) {1004FEA733}>")))
   (:STDOUT . ""))))
((5141 19118 721773000) :INSERT
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
	     (rec (sys) 
	       (loop for s in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
		  unless (gethash s res) do (rec s)
		  do (incf (gethash s res 0)))))
      (rec system))
     (alexandria:hash-table-keys res)))"))
((5141 19118 721783000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((STANDARD-METHOD
      "#<STANDARD-METHOD DEPENDENCY-TREE (SYMBOL) {1004CD6D63}>")))
   (:STDOUT . ""))))
((5141 19122 510510000) :DELETE
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
	     (rec (sys) 
	       (loop for s in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
		  unless (gethash s res) do (rec s)
		  do (incf (gethash s res 0)))))
      (rec system))
     (alexandria:hash-table-keys res)))"))
((5141 19122 510545000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((STANDARD-METHOD
      "#<STANDARD-METHOD DEPENDENCY-TREE (SYMBOL) {1004CD6D63}>")))
   (:STDOUT . ""))))
((5141 19122 510564000) :INSERT
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
	     (rec (sys) 
	       (loop for s in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
		  unless (gethash s res) do (rec s)
		  do (incf (gethash s res 0)))))
      (rec system))
     (alexandria:hash-table-keys res))"))
((5141 19122 510576000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((STANDARD-GENERIC-FUNCTION
      "#<STANDARD-GENERIC-FUNCTION DEPENDENCY-TREE (1)>"))
    ((ERROR ((ERROR-TYPE . END-OF-FILE)))))
   (:STDOUT . ""))))
((5141 19126 608959000) :DELETE
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
	     (rec (sys) 
	       (loop for s in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
		  unless (gethash s res) do (rec s)
		  do (incf (gethash s res 0)))))
      (rec system))
     (alexandria:hash-table-keys res))"))
((5141 19126 608989000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((STANDARD-GENERIC-FUNCTION
      "#<STANDARD-GENERIC-FUNCTION DEPENDENCY-TREE (1)>"))
    ((ERROR ((ERROR-TYPE . END-OF-FILE)))))
   (:STDOUT . ""))))
((5141 19126 608998000) :INSERT
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
	     (rec (sys) 
	       (loop for s in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
		  unless (gethash s res) do (rec s)
		  do (incf (gethash s res 0)))))
      (rec system))
     (alexandria:hash-table-keys res)))"))
((5141 19126 609008000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((STANDARD-METHOD
      "#<STANDARD-METHOD DEPENDENCY-TREE (SYMBOL) {1004F187D3}>")))
   (:STDOUT . ""))))
((5141 19128 732550000) :DELETE
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
	     (rec (sys) 
	       (loop for s in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
		  unless (gethash s res) do (rec s)
		  do (incf (gethash s res 0)))))
      (rec system))
     (alexandria:hash-table-keys res)))"))
((5141 19128 732568000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((STANDARD-METHOD
      "#<STANDARD-METHOD DEPENDENCY-TREE (SYMBOL) {1004F187D3}>")))
   (:STDOUT . ""))))
((5141 19128 732573000) :INSERT
 (75 :CONTENTS "(defgeneric dependency-tree (system)

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
	     (rec (sys) 
	       (loop for s in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
		  unless (gethash s res) do (rec s)
		  do (incf (gethash s res 0)))))
      (rec system))
     (alexandria:hash-table-keys res)))"))
((5141 19128 732579000) :INSERT
 (75 :VALUE ((:RESULT ((ERROR ((ERROR-TYPE . END-OF-FILE))))) (:STDOUT . ""))))
((5141 19130 614329000) :DELETE
 (75 :CONTENTS "(defgeneric dependency-tree (system)

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
	     (rec (sys) 
	       (loop for s in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
		  unless (gethash s res) do (rec s)
		  do (incf (gethash s res 0)))))
      (rec system))
     (alexandria:hash-table-keys res)))"))
((5141 19130 614359000) :DELETE
 (75 :VALUE ((:RESULT ((ERROR ((ERROR-TYPE . END-OF-FILE))))) (:STDOUT . ""))))
((5141 19130 614368000) :INSERT
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
	     (rec (sys) 
	       (loop for s in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
		  unless (gethash s res) do (rec s)
		  do (incf (gethash s res 0)))))
      (rec system))
     (alexandria:hash-table-keys res)))"))
((5141 19130 614378000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((STANDARD-METHOD
      "#<STANDARD-METHOD DEPENDENCY-TREE (SYMBOL) {1005157873}>")))
   (:STDOUT . ""))))
((5141 19139 14599000) :DELETE (76 :CONTENTS "(dependency-tree :cl-notebook)"))
((5141 19139 14627000) :DELETE
 (76 :VALUE
  ((:RESULT
    ((CONS
      "(#:CL-MOP #:CL-CSS #:CL-WHO #:PARENSCRIPT :NAMED-READTABLES :ANAPHORA :CL-PPCRE
 #:FACT-BASE #:CL-FAD #:OPTIMA #:LOCAL-TIME :CL-FAD #:ANAPHORA #:ALEXANDRIA
 #:HOUSE #:FLEXI-STREAMS :TRIVIAL-GRAY-STREAMS #:OPTIMA :CLOSER-MOP #:CL-PPCRE
 #:USOCKET :SB-BSD-SOCKETS #:CL-FAD :BORDEAUX-THREADS :SB-POSIX
 #:BORDEAUX-THREADS :ALEXANDRIA #:CL-JSON #:CL-PPCRE #:CL-BASE64 #:ANAPHORA
 #:ALEXANDRIA #:ANAPHORA #:ALEXANDRIA)")))
   (:STDOUT . ""))))
((5141 19139 14643000) :INSERT (76 :CONTENTS "(dependency-tree :cl-notebook)"))
((5141 19139 14651000) :INSERT
 (76 :VALUE
  ((:RESULT
    ((CONS
      "(#:CL-CSS #:CL-WHO #:PARENSCRIPT :NAMED-READTABLES :ANAPHORA :CL-PPCRE
 #:FACT-BASE #:CL-FAD #:OPTIMA #:LOCAL-TIME :CL-FAD #:ANAPHORA #:ALEXANDRIA
 #:HOUSE #:FLEXI-STREAMS :TRIVIAL-GRAY-STREAMS #:OPTIMA :CLOSER-MOP #:CL-PPCRE
 #:USOCKET :SB-BSD-SOCKETS #:CL-FAD :BORDEAUX-THREADS :SB-POSIX
 #:BORDEAUX-THREADS :ALEXANDRIA #:CL-JSON #:CL-PPCRE #:CL-BASE64 #:ANAPHORA
 #:ALEXANDRIA #:ANAPHORA #:ALEXANDRIA)")))
   (:STDOUT . ""))))
((5141 19303 231403000) :DELETE
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
	     (rec (sys) 
	       (loop for s in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
		  unless (gethash s res) do (rec s)
		  do (incf (gethash s res 0)))))
      (rec system))
     (alexandria:hash-table-keys res)))"))
((5141 19303 231425000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((STANDARD-METHOD
      "#<STANDARD-METHOD DEPENDENCY-TREE (SYMBOL) {1005157873}>")))
   (:STDOUT . ""))))
((5141 19303 231432000) :INSERT
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
	     (rec (sys) 
	       (loop for s in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
		  unless (gethash s res) do (rec s)
		  do (incf (gethash s res 0)))))
      (rec system))
     (alexandria:hash-table-keys res)))

(dependency-tree :cl-notebook)"))
((5141 19303 231439000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((CONS
      "(#:CL-CSS #:CL-WHO #:PARENSCRIPT :NAMED-READTABLES :ANAPHORA :CL-PPCRE
 #:FACT-BASE #:CL-FAD #:OPTIMA #:LOCAL-TIME :CL-FAD #:ANAPHORA #:ALEXANDRIA
 #:HOUSE #:FLEXI-STREAMS :TRIVIAL-GRAY-STREAMS #:OPTIMA :CLOSER-MOP #:CL-PPCRE
 #:USOCKET :SB-BSD-SOCKETS #:CL-FAD :BORDEAUX-THREADS :SB-POSIX
 #:BORDEAUX-THREADS :ALEXANDRIA #:CL-JSON #:CL-PPCRE #:CL-BASE64 #:ANAPHORA
 #:ALEXANDRIA #:ANAPHORA #:ALEXANDRIA)")))
   (:STDOUT . ""))))
((5141 19305 883025000) :DELETE
 (76 :VALUE
  ((:RESULT
    ((CONS
      "(#:CL-CSS #:CL-WHO #:PARENSCRIPT :NAMED-READTABLES :ANAPHORA :CL-PPCRE
 #:FACT-BASE #:CL-FAD #:OPTIMA #:LOCAL-TIME :CL-FAD #:ANAPHORA #:ALEXANDRIA
 #:HOUSE #:FLEXI-STREAMS :TRIVIAL-GRAY-STREAMS #:OPTIMA :CLOSER-MOP #:CL-PPCRE
 #:USOCKET :SB-BSD-SOCKETS #:CL-FAD :BORDEAUX-THREADS :SB-POSIX
 #:BORDEAUX-THREADS :ALEXANDRIA #:CL-JSON #:CL-PPCRE #:CL-BASE64 #:ANAPHORA
 #:ALEXANDRIA #:ANAPHORA #:ALEXANDRIA)")))
   (:STDOUT . ""))))
((5141 19305 883038000) :DELETE (76 :CONTENTS "(dependency-tree :cl-notebook)"))
((5141 19305 883045000) :DELETE (76 :CELL NIL))
((5141 19305 883051000) :DELETE (76 :CELL-TYPE :COMMON-LISP))
((5141 49910 738987000) :DELETE
 (15 :CONTENTS
  "(format t \"Standard output capture!~%Yes, even with multiple lines!~%\")
(format t \"And yes, it will show you\")
(format t \" total \")
(format t \"output for a group of printing procs.\")"))
((5141 49910 739031000) :DELETE
 (15 :VALUE
  ((:RESULT ((NULL "NIL")))
   (:STDOUT . "Standard output capture!
Yes, even with multiple lines!
And yes, it will show you total output for a group of printing procs."))))
((5141 49910 739044000) :INSERT
 (15 :CONTENTS
  "(format t \"Standard output capture!~%Yes, even with multiple lines!~%\")
(format t \"And yes, it will show you\")
(format t \" total \")
(format t \"output for a group of printing procs.\")"))
((5141 49910 739052000) :INSERT
 (15 :VALUE
  ((:RESULT ((NULL "NIL")))
   (:STDOUT . "Standard output capture!
Yes, even with multiple lines!
And yes, it will show you total output for a group of printing procs."))))
((5141 51354 926781000) :DELETE
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
	     (rec (sys) 
	       (loop for s in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
		  unless (gethash s res) do (rec s)
		  do (incf (gethash s res 0)))))
      (rec system))
     (alexandria:hash-table-keys res)))

(dependency-tree :cl-notebook)"))
((5141 51354 926819000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((CONS
      "(#:CL-CSS #:CL-WHO #:PARENSCRIPT :NAMED-READTABLES :ANAPHORA :CL-PPCRE
 #:FACT-BASE #:CL-FAD #:OPTIMA #:LOCAL-TIME :CL-FAD #:ANAPHORA #:ALEXANDRIA
 #:HOUSE #:FLEXI-STREAMS :TRIVIAL-GRAY-STREAMS #:OPTIMA :CLOSER-MOP #:CL-PPCRE
 #:USOCKET :SB-BSD-SOCKETS #:CL-FAD :BORDEAUX-THREADS :SB-POSIX
 #:BORDEAUX-THREADS :ALEXANDRIA #:CL-JSON #:CL-PPCRE #:CL-BASE64 #:ANAPHORA
 #:ALEXANDRIA #:ANAPHORA #:ALEXANDRIA)")))
   (:STDOUT . ""))))
((5141 51354 926838000) :INSERT
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
		     (rec (sys) 
		       (loop for dep in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  dep-k = (intern (symbol-name dep) :keyword)
				  unless (gethash dep res) do (rec dep)
				  do (push (gethash dep res) sys))))
      (rec system))
     (alexandria:hash-table-keys res)))

(dependency-tree :cl-notebook)"))
((5141 51354 926845000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((STANDARD-GENERIC-FUNCTION
      "#<STANDARD-GENERIC-FUNCTION DEPENDENCY-TREE (1)>"))
    ((ERROR
      ((ERROR-TYPE . SB-INT:SIMPLE-PROGRAM-ERROR)
       (:ERROR-MESSAGE . "unknown LOOP keyword: DEP-K
current LOOP context: DEP-K =.")
       (:FORM . "(DEFMETHOD DEPENDENCY-TREE ((SYSTEM SYMBOL))
  (LET ((RES (MAKE-HASH-TABLE)))
    (LABELS ((FIND-SYS (SYS-NAME)
               (ASDF/SYSTEM:FIND-SYSTEM SYS-NAME))
             (REC (SYS)
               (LOOP FOR DEP IN (SLOT-VALUE (FIND-SYS SYS)
                                            'ASDF/COMPONENT:SIDEWAY-DEPENDENCIES) DEP-K = (INTERN
                                                                                           (SYMBOL-NAME
                                                                                            DEP)
                                                                                           :KEYWORD)
                     UNLESS (GETHASH DEP RES)
                     DO (REC DEP)
                     DO (PUSH (GETHASH DEP RES) SYS))))
      (REC SYSTEM))
    (ALEXANDRIA.0.DEV:HASH-TABLE-KEYS RES)))")))))
   (:STDOUT . ""))))
((5141 51362 729145000) :DELETE
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
		     (rec (sys) 
		       (loop for dep in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  dep-k = (intern (symbol-name dep) :keyword)
				  unless (gethash dep res) do (rec dep)
				  do (push (gethash dep res) sys))))
      (rec system))
     (alexandria:hash-table-keys res)))

(dependency-tree :cl-notebook)"))
((5141 51362 729189000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((STANDARD-GENERIC-FUNCTION
      "#<STANDARD-GENERIC-FUNCTION DEPENDENCY-TREE (1)>"))
    ((ERROR
      ((ERROR-TYPE . SB-INT:SIMPLE-PROGRAM-ERROR)
       (:ERROR-MESSAGE . "unknown LOOP keyword: DEP-K
current LOOP context: DEP-K =.")
       (:FORM . "(DEFMETHOD DEPENDENCY-TREE ((SYSTEM SYMBOL))
  (LET ((RES (MAKE-HASH-TABLE)))
    (LABELS ((FIND-SYS (SYS-NAME)
               (ASDF/SYSTEM:FIND-SYSTEM SYS-NAME))
             (REC (SYS)
               (LOOP FOR DEP IN (SLOT-VALUE (FIND-SYS SYS)
                                            'ASDF/COMPONENT:SIDEWAY-DEPENDENCIES) DEP-K = (INTERN
                                                                                           (SYMBOL-NAME
                                                                                            DEP)
                                                                                           :KEYWORD)
                     UNLESS (GETHASH DEP RES)
                     DO (REC DEP)
                     DO (PUSH (GETHASH DEP RES) SYS))))
      (REC SYSTEM))
    (ALEXANDRIA.0.DEV:HASH-TABLE-KEYS RES)))")))))
   (:STDOUT . ""))))
((5141 51362 729195000) :INSERT
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
		     (rec (sys) 
		       (loop for dep in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  for dep-k = (intern (symbol-name dep) :keyword)
				  unless (gethash dep res) do (rec dep)
				  do (push (gethash dep res) sys))))
      (rec system))
     (alexandria:hash-table-keys res)))

(dependency-tree :cl-notebook)"))
((5141 51362 729202000) :INSERT
 (75 :VALUE ((:RESULT ((NULL "NIL"))) (:STDOUT . ""))))
((5141 51392 494276000) :DELETE
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
		     (rec (sys) 
		       (loop for dep in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  for dep-k = (intern (symbol-name dep) :keyword)
				  unless (gethash dep res) do (rec dep)
				  do (push (gethash dep res) sys))))
      (rec system))
     (alexandria:hash-table-keys res)))

(dependency-tree :cl-notebook)"))
((5141 51392 494307000) :DELETE
 (75 :VALUE ((:RESULT ((NULL "NIL"))) (:STDOUT . ""))))
((5141 51392 494313000) :INSERT
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
		     (rec (sys) 
		       (loop for dep in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  for dep-k = (intern (symbol-name dep) :keyword)
				  unless (gethash dep-k res) do (rec dep)
				  do (push (gethash dep-k res) sys))))
      (rec system))
     (alexandria:hash-table-keys res)))

(dependency-tree :cl-notebook)"))
((5141 51392 494321000) :INSERT
 (75 :VALUE ((:RESULT ((NULL "NIL"))) (:STDOUT . ""))))
((5141 51403 754107000) :DELETE
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
		     (rec (sys) 
		       (loop for dep in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  for dep-k = (intern (symbol-name dep) :keyword)
				  unless (gethash dep-k res) do (rec dep)
				  do (push (gethash dep-k res) sys))))
      (rec system))
     (alexandria:hash-table-keys res)))

(dependency-tree :cl-notebook)"))
((5141 51403 754128000) :DELETE
 (75 :VALUE ((:RESULT ((NULL "NIL"))) (:STDOUT . ""))))
((5141 51403 754133000) :INSERT
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
		     (rec (sys) 
		       (loop for dep in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  for dep-k = (intern (symbol-name dep) :keyword)
				  unless (gethash dep-k res) do (rec dep)
				  do (push (gethash dep-k res) sys))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 51403 754141000) :INSERT
 (75 :VALUE ((:RESULT ((NULL "NIL"))) (:STDOUT . ""))))
((5141 51458 947609000) :DELETE
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
		     (rec (sys) 
		       (loop for dep in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  for dep-k = (intern (symbol-name dep) :keyword)
				  unless (gethash dep-k res) do (rec dep)
				  do (push (gethash dep-k res) sys))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 51458 947630000) :DELETE
 (75 :VALUE ((:RESULT ((NULL "NIL"))) (:STDOUT . ""))))
((5141 51458 947636000) :INSERT
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
		     (rec (sys) 
		       (loop for dep in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  ;; for dep-k = (intern (symbol-name dep) :keyword)
				  unless (gethash dep res) do (rec dep)
				  do (incf (gethash dep res 0)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 51458 947643000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((#:CL-CSS . 1) (#:CL-WHO . 1) (#:PARENSCRIPT . 1) (:NAMED-READTABLES . 1)
 (:ANAPHORA . 1) (:CL-PPCRE . 1) (#:FACT-BASE . 1) (#:CL-FAD . 1)
 (#:OPTIMA . 1) (#:LOCAL-TIME . 1) (:CL-FAD . 1) (#:ANAPHORA . 1)
 (#:ALEXANDRIA . 1) (#:HOUSE . 1) (#:FLEXI-STREAMS . 1)
 (:TRIVIAL-GRAY-STREAMS . 1) (#:OPTIMA . 1) (:CLOSER-MOP . 2) (#:CL-PPCRE . 1)
 (#:USOCKET . 1) (:SB-BSD-SOCKETS . 1) (#:CL-FAD . 1) (:BORDEAUX-THREADS . 3)
 (:SB-POSIX . 3) (#:BORDEAUX-THREADS . 1) (:ALEXANDRIA . 7) (#:CL-JSON . 1)
 (#:CL-PPCRE . 1) (#:CL-BASE64 . 1) (#:ANAPHORA . 1) (#:ALEXANDRIA . 1)
 (#:ANAPHORA . 1) (#:ALEXANDRIA . 1))")))
   (:STDOUT . ""))))
((5141 51486 78603000) :DELETE
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
		     (rec (sys) 
		       (loop for dep in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  ;; for dep-k = (intern (symbol-name dep) :keyword)
				  unless (gethash dep res) do (rec dep)
				  do (incf (gethash dep res 0)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 51486 78625000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((#:CL-CSS . 1) (#:CL-WHO . 1) (#:PARENSCRIPT . 1) (:NAMED-READTABLES . 1)
 (:ANAPHORA . 1) (:CL-PPCRE . 1) (#:FACT-BASE . 1) (#:CL-FAD . 1)
 (#:OPTIMA . 1) (#:LOCAL-TIME . 1) (:CL-FAD . 1) (#:ANAPHORA . 1)
 (#:ALEXANDRIA . 1) (#:HOUSE . 1) (#:FLEXI-STREAMS . 1)
 (:TRIVIAL-GRAY-STREAMS . 1) (#:OPTIMA . 1) (:CLOSER-MOP . 2) (#:CL-PPCRE . 1)
 (#:USOCKET . 1) (:SB-BSD-SOCKETS . 1) (#:CL-FAD . 1) (:BORDEAUX-THREADS . 3)
 (:SB-POSIX . 3) (#:BORDEAUX-THREADS . 1) (:ALEXANDRIA . 7) (#:CL-JSON . 1)
 (#:CL-PPCRE . 1) (#:CL-BASE64 . 1) (#:ANAPHORA . 1) (#:ALEXANDRIA . 1)
 (#:ANAPHORA . 1) (#:ALEXANDRIA . 1))")))
   (:STDOUT . ""))))
((5141 51486 78631000) :INSERT
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
		     (rec (sys) 
		       (loop for dep in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  ;; for dep-k = (intern (symbol-name dep) :keyword)
				  unless (gethash dep res) do (rec dep)
				  do (push (gethash dep res nil) sys))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 51486 78639000) :INSERT
 (75 :VALUE ((:RESULT ((NULL "NIL"))) (:STDOUT . ""))))
((5141 51513 119720000) :DELETE
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
		     (rec (sys) 
		       (loop for dep in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  ;; for dep-k = (intern (symbol-name dep) :keyword)
				  unless (gethash dep res) do (rec dep)
				  do (push (gethash dep res nil) sys))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 51513 119742000) :DELETE
 (75 :VALUE ((:RESULT ((NULL "NIL"))) (:STDOUT . ""))))
((5141 51513 119747000) :INSERT
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
		     (rec (sys) 
		       (loop for dep in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  ;; for dep-k = (intern (symbol-name dep) :keyword)
				  unless (gethash dep res) do (rec dep)
                  do (format t \"~a~%\" sys)
				  do (incf (gethash dep res 0)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 51513 119755000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((#:CL-CSS . 1) (#:CL-WHO . 1) (#:PARENSCRIPT . 1) (:NAMED-READTABLES . 1)
 (:ANAPHORA . 1) (:CL-PPCRE . 1) (#:FACT-BASE . 1) (#:CL-FAD . 1)
 (#:OPTIMA . 1) (#:LOCAL-TIME . 1) (:CL-FAD . 1) (#:ANAPHORA . 1)
 (#:ALEXANDRIA . 1) (#:HOUSE . 1) (#:FLEXI-STREAMS . 1)
 (:TRIVIAL-GRAY-STREAMS . 1) (#:OPTIMA . 1) (:CLOSER-MOP . 2) (#:CL-PPCRE . 1)
 (#:USOCKET . 1) (:SB-BSD-SOCKETS . 1) (#:CL-FAD . 1) (:BORDEAUX-THREADS . 3)
 (:SB-POSIX . 3) (#:BORDEAUX-THREADS . 1) (:ALEXANDRIA . 7) (#:CL-JSON . 1)
 (#:CL-PPCRE . 1) (#:CL-BASE64 . 1) (#:ANAPHORA . 1) (#:ALEXANDRIA . 1)
 (#:ANAPHORA . 1) (#:ALEXANDRIA . 1))")))
   (:STDOUT . "CL-NOTEBOOK
CL-NOTEBOOK
HOUSE
HOUSE
HOUSE
HOUSE
HOUSE
BORDEAUX-THREADS
HOUSE
CL-FAD
BORDEAUX-THREADS
CL-FAD
CL-FAD
HOUSE
USOCKET
HOUSE
HOUSE
OPTIMA
OPTIMA
HOUSE
FLEXI-STREAMS
HOUSE
CL-NOTEBOOK
FACT-BASE
FACT-BASE
CL-FAD
CL-FAD
CL-FAD
LOCAL-TIME
FACT-BASE
OPTIMA
OPTIMA
FACT-BASE
CL-FAD
CL-FAD
CL-FAD
FACT-BASE
CL-NOTEBOOK
PARENSCRIPT
PARENSCRIPT
PARENSCRIPT
CL-NOTEBOOK
CL-NOTEBOOK
CL-NOTEBOOK
"))))
((5141 51569 529928000) :DELETE
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
		     (rec (sys) 
		       (loop for dep in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  ;; for dep-k = (intern (symbol-name dep) :keyword)
				  unless (gethash dep res) do (rec dep)
                  do (format t \"~a~%\" sys)
				  do (incf (gethash dep res 0)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 51569 529960000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((#:CL-CSS . 1) (#:CL-WHO . 1) (#:PARENSCRIPT . 1) (:NAMED-READTABLES . 1)
 (:ANAPHORA . 1) (:CL-PPCRE . 1) (#:FACT-BASE . 1) (#:CL-FAD . 1)
 (#:OPTIMA . 1) (#:LOCAL-TIME . 1) (:CL-FAD . 1) (#:ANAPHORA . 1)
 (#:ALEXANDRIA . 1) (#:HOUSE . 1) (#:FLEXI-STREAMS . 1)
 (:TRIVIAL-GRAY-STREAMS . 1) (#:OPTIMA . 1) (:CLOSER-MOP . 2) (#:CL-PPCRE . 1)
 (#:USOCKET . 1) (:SB-BSD-SOCKETS . 1) (#:CL-FAD . 1) (:BORDEAUX-THREADS . 3)
 (:SB-POSIX . 3) (#:BORDEAUX-THREADS . 1) (:ALEXANDRIA . 7) (#:CL-JSON . 1)
 (#:CL-PPCRE . 1) (#:CL-BASE64 . 1) (#:ANAPHORA . 1) (#:ALEXANDRIA . 1)
 (#:ANAPHORA . 1) (#:ALEXANDRIA . 1))")))
   (:STDOUT . "CL-NOTEBOOK
CL-NOTEBOOK
HOUSE
HOUSE
HOUSE
HOUSE
HOUSE
BORDEAUX-THREADS
HOUSE
CL-FAD
BORDEAUX-THREADS
CL-FAD
CL-FAD
HOUSE
USOCKET
HOUSE
HOUSE
OPTIMA
OPTIMA
HOUSE
FLEXI-STREAMS
HOUSE
CL-NOTEBOOK
FACT-BASE
FACT-BASE
CL-FAD
CL-FAD
CL-FAD
LOCAL-TIME
FACT-BASE
OPTIMA
OPTIMA
FACT-BASE
CL-FAD
CL-FAD
CL-FAD
FACT-BASE
CL-NOTEBOOK
PARENSCRIPT
PARENSCRIPT
PARENSCRIPT
CL-NOTEBOOK
CL-NOTEBOOK
CL-NOTEBOOK
"))))
((5141 51569 529971000) :INSERT
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
		     (rec (sys) 
		       (loop for dep in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  ;; for dep-k = (intern (symbol-name dep) :keyword)
				  unless (gethash dep res) do (rec dep)
                  do (format t \"~a~%\" sys)
				  do (push sys (gethash dep res)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 51569 529978000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((#:CL-CSS :CL-NOTEBOOK) (#:CL-WHO :CL-NOTEBOOK) (#:PARENSCRIPT :CL-NOTEBOOK)
 (:NAMED-READTABLES #:PARENSCRIPT) (:ANAPHORA #:PARENSCRIPT)
 (:CL-PPCRE #:PARENSCRIPT) (#:FACT-BASE :CL-NOTEBOOK) (#:CL-FAD #:FACT-BASE)
 (#:OPTIMA #:FACT-BASE) (#:LOCAL-TIME #:FACT-BASE) (:CL-FAD #:LOCAL-TIME)
 (#:ANAPHORA #:FACT-BASE) (#:ALEXANDRIA #:FACT-BASE) (#:HOUSE :CL-NOTEBOOK)
 (#:FLEXI-STREAMS #:HOUSE) (:TRIVIAL-GRAY-STREAMS #:FLEXI-STREAMS)
 (#:OPTIMA #:HOUSE) (:CLOSER-MOP #:OPTIMA #:OPTIMA) (#:CL-PPCRE #:HOUSE)
 (#:USOCKET #:HOUSE) (:SB-BSD-SOCKETS #:USOCKET) (#:CL-FAD #:HOUSE)
 (:BORDEAUX-THREADS #:CL-FAD :CL-FAD #:CL-FAD)
 (:SB-POSIX #:CL-FAD :CL-FAD #:CL-FAD) (#:BORDEAUX-THREADS #:HOUSE)
 (:ALEXANDRIA #:CL-FAD #:OPTIMA :CL-FAD #:OPTIMA #:CL-FAD :BORDEAUX-THREADS
  #:BORDEAUX-THREADS)
 (#:CL-JSON #:HOUSE) (#:CL-PPCRE #:HOUSE) (#:CL-BASE64 #:HOUSE)
 (#:ANAPHORA #:HOUSE) (#:ALEXANDRIA #:HOUSE) (#:ANAPHORA :CL-NOTEBOOK)
 (#:ALEXANDRIA :CL-NOTEBOOK))")))
   (:STDOUT . "CL-NOTEBOOK
CL-NOTEBOOK
HOUSE
HOUSE
HOUSE
HOUSE
HOUSE
BORDEAUX-THREADS
HOUSE
CL-FAD
BORDEAUX-THREADS
CL-FAD
CL-FAD
HOUSE
USOCKET
HOUSE
HOUSE
OPTIMA
OPTIMA
HOUSE
FLEXI-STREAMS
HOUSE
CL-NOTEBOOK
FACT-BASE
FACT-BASE
CL-FAD
CL-FAD
CL-FAD
LOCAL-TIME
FACT-BASE
OPTIMA
OPTIMA
FACT-BASE
CL-FAD
CL-FAD
CL-FAD
FACT-BASE
CL-NOTEBOOK
PARENSCRIPT
PARENSCRIPT
PARENSCRIPT
CL-NOTEBOOK
CL-NOTEBOOK
CL-NOTEBOOK
"))))
((5141 51581 849130000) :DELETE
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
		     (rec (sys) 
		       (loop for dep in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  ;; for dep-k = (intern (symbol-name dep) :keyword)
				  unless (gethash dep res) do (rec dep)
                  do (format t \"~a~%\" sys)
				  do (push sys (gethash dep res)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 51581 849152000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((#:CL-CSS :CL-NOTEBOOK) (#:CL-WHO :CL-NOTEBOOK) (#:PARENSCRIPT :CL-NOTEBOOK)
 (:NAMED-READTABLES #:PARENSCRIPT) (:ANAPHORA #:PARENSCRIPT)
 (:CL-PPCRE #:PARENSCRIPT) (#:FACT-BASE :CL-NOTEBOOK) (#:CL-FAD #:FACT-BASE)
 (#:OPTIMA #:FACT-BASE) (#:LOCAL-TIME #:FACT-BASE) (:CL-FAD #:LOCAL-TIME)
 (#:ANAPHORA #:FACT-BASE) (#:ALEXANDRIA #:FACT-BASE) (#:HOUSE :CL-NOTEBOOK)
 (#:FLEXI-STREAMS #:HOUSE) (:TRIVIAL-GRAY-STREAMS #:FLEXI-STREAMS)
 (#:OPTIMA #:HOUSE) (:CLOSER-MOP #:OPTIMA #:OPTIMA) (#:CL-PPCRE #:HOUSE)
 (#:USOCKET #:HOUSE) (:SB-BSD-SOCKETS #:USOCKET) (#:CL-FAD #:HOUSE)
 (:BORDEAUX-THREADS #:CL-FAD :CL-FAD #:CL-FAD)
 (:SB-POSIX #:CL-FAD :CL-FAD #:CL-FAD) (#:BORDEAUX-THREADS #:HOUSE)
 (:ALEXANDRIA #:CL-FAD #:OPTIMA :CL-FAD #:OPTIMA #:CL-FAD :BORDEAUX-THREADS
  #:BORDEAUX-THREADS)
 (#:CL-JSON #:HOUSE) (#:CL-PPCRE #:HOUSE) (#:CL-BASE64 #:HOUSE)
 (#:ANAPHORA #:HOUSE) (#:ALEXANDRIA #:HOUSE) (#:ANAPHORA :CL-NOTEBOOK)
 (#:ALEXANDRIA :CL-NOTEBOOK))")))
   (:STDOUT . "CL-NOTEBOOK
CL-NOTEBOOK
HOUSE
HOUSE
HOUSE
HOUSE
HOUSE
BORDEAUX-THREADS
HOUSE
CL-FAD
BORDEAUX-THREADS
CL-FAD
CL-FAD
HOUSE
USOCKET
HOUSE
HOUSE
OPTIMA
OPTIMA
HOUSE
FLEXI-STREAMS
HOUSE
CL-NOTEBOOK
FACT-BASE
FACT-BASE
CL-FAD
CL-FAD
CL-FAD
LOCAL-TIME
FACT-BASE
OPTIMA
OPTIMA
FACT-BASE
CL-FAD
CL-FAD
CL-FAD
FACT-BASE
CL-NOTEBOOK
PARENSCRIPT
PARENSCRIPT
PARENSCRIPT
CL-NOTEBOOK
CL-NOTEBOOK
CL-NOTEBOOK
"))))
((5141 51581 849163000) :INSERT
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
		     (rec (sys) 
		       (loop for dep in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  for dep-k = (intern (symbol-name dep) :keyword)
				  unless (gethash dep-k res) do (rec dep)
                  do (format t \"~a~%\" sys)
				  do (push sys (gethash dep-k res)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 51581 849170000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:PARENSCRIPT :CL-NOTEBOOK)
 (:NAMED-READTABLES #:PARENSCRIPT) (:FACT-BASE :CL-NOTEBOOK)
 (:LOCAL-TIME #:FACT-BASE) (:HOUSE :CL-NOTEBOOK) (:FLEXI-STREAMS #:HOUSE)
 (:TRIVIAL-GRAY-STREAMS #:FLEXI-STREAMS) (:OPTIMA #:FACT-BASE #:HOUSE)
 (:CLOSER-MOP #:OPTIMA) (:USOCKET #:HOUSE) (:SB-BSD-SOCKETS #:USOCKET)
 (:CL-FAD #:FACT-BASE #:LOCAL-TIME #:HOUSE) (:SB-POSIX #:CL-FAD)
 (:BORDEAUX-THREADS #:CL-FAD #:HOUSE) (:CL-JSON #:HOUSE)
 (:CL-PPCRE #:PARENSCRIPT #:HOUSE #:HOUSE) (:CL-BASE64 #:HOUSE)
 (:ANAPHORA #:PARENSCRIPT #:FACT-BASE #:HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA #:FACT-BASE #:OPTIMA #:CL-FAD #:BORDEAUX-THREADS #:HOUSE
  :CL-NOTEBOOK))")))
   (:STDOUT . "CL-NOTEBOOK
CL-NOTEBOOK
HOUSE
HOUSE
HOUSE
HOUSE
HOUSE
BORDEAUX-THREADS
HOUSE
CL-FAD
CL-FAD
CL-FAD
HOUSE
USOCKET
HOUSE
HOUSE
OPTIMA
OPTIMA
HOUSE
FLEXI-STREAMS
HOUSE
CL-NOTEBOOK
FACT-BASE
FACT-BASE
LOCAL-TIME
FACT-BASE
FACT-BASE
FACT-BASE
CL-NOTEBOOK
PARENSCRIPT
PARENSCRIPT
PARENSCRIPT
CL-NOTEBOOK
CL-NOTEBOOK
CL-NOTEBOOK
"))))
((5141 51612 640055000) :DELETE
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
		     (rec (sys) 
		       (loop for dep in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  for dep-k = (intern (symbol-name dep) :keyword)
				  unless (gethash dep-k res) do (rec dep)
                  do (format t \"~a~%\" sys)
				  do (push sys (gethash dep-k res)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 51612 640077000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:PARENSCRIPT :CL-NOTEBOOK)
 (:NAMED-READTABLES #:PARENSCRIPT) (:FACT-BASE :CL-NOTEBOOK)
 (:LOCAL-TIME #:FACT-BASE) (:HOUSE :CL-NOTEBOOK) (:FLEXI-STREAMS #:HOUSE)
 (:TRIVIAL-GRAY-STREAMS #:FLEXI-STREAMS) (:OPTIMA #:FACT-BASE #:HOUSE)
 (:CLOSER-MOP #:OPTIMA) (:USOCKET #:HOUSE) (:SB-BSD-SOCKETS #:USOCKET)
 (:CL-FAD #:FACT-BASE #:LOCAL-TIME #:HOUSE) (:SB-POSIX #:CL-FAD)
 (:BORDEAUX-THREADS #:CL-FAD #:HOUSE) (:CL-JSON #:HOUSE)
 (:CL-PPCRE #:PARENSCRIPT #:HOUSE #:HOUSE) (:CL-BASE64 #:HOUSE)
 (:ANAPHORA #:PARENSCRIPT #:FACT-BASE #:HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA #:FACT-BASE #:OPTIMA #:CL-FAD #:BORDEAUX-THREADS #:HOUSE
  :CL-NOTEBOOK))")))
   (:STDOUT . "CL-NOTEBOOK
CL-NOTEBOOK
HOUSE
HOUSE
HOUSE
HOUSE
HOUSE
BORDEAUX-THREADS
HOUSE
CL-FAD
CL-FAD
CL-FAD
HOUSE
USOCKET
HOUSE
HOUSE
OPTIMA
OPTIMA
HOUSE
FLEXI-STREAMS
HOUSE
CL-NOTEBOOK
FACT-BASE
FACT-BASE
LOCAL-TIME
FACT-BASE
FACT-BASE
FACT-BASE
CL-NOTEBOOK
PARENSCRIPT
PARENSCRIPT
PARENSCRIPT
CL-NOTEBOOK
CL-NOTEBOOK
CL-NOTEBOOK
"))))
((5141 51612 640087000) :INSERT
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
		     (rec (sys) 
		       (loop for dep in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  for dep-k = (intern (symbol-name dep) :keyword)
				  unless (gethash dep-k res) do (rec dep)
				  do (push sys (gethash dep-k res)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 51612 640094000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:PARENSCRIPT :CL-NOTEBOOK)
 (:NAMED-READTABLES #:PARENSCRIPT) (:FACT-BASE :CL-NOTEBOOK)
 (:LOCAL-TIME #:FACT-BASE) (:HOUSE :CL-NOTEBOOK) (:FLEXI-STREAMS #:HOUSE)
 (:TRIVIAL-GRAY-STREAMS #:FLEXI-STREAMS) (:OPTIMA #:FACT-BASE #:HOUSE)
 (:CLOSER-MOP #:OPTIMA) (:USOCKET #:HOUSE) (:SB-BSD-SOCKETS #:USOCKET)
 (:CL-FAD #:FACT-BASE #:LOCAL-TIME #:HOUSE) (:SB-POSIX #:CL-FAD)
 (:BORDEAUX-THREADS #:CL-FAD #:HOUSE) (:CL-JSON #:HOUSE)
 (:CL-PPCRE #:PARENSCRIPT #:HOUSE #:HOUSE) (:CL-BASE64 #:HOUSE)
 (:ANAPHORA #:PARENSCRIPT #:FACT-BASE #:HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA #:FACT-BASE #:OPTIMA #:CL-FAD #:BORDEAUX-THREADS #:HOUSE
  :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 51695 845116000) :DELETE
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
		     (rec (sys) 
		       (loop for dep in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  for dep-k = (intern (symbol-name dep) :keyword)
				  unless (gethash dep-k res) do (rec dep)
				  do (push sys (gethash dep-k res)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 51695 845146000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:PARENSCRIPT :CL-NOTEBOOK)
 (:NAMED-READTABLES #:PARENSCRIPT) (:FACT-BASE :CL-NOTEBOOK)
 (:LOCAL-TIME #:FACT-BASE) (:HOUSE :CL-NOTEBOOK) (:FLEXI-STREAMS #:HOUSE)
 (:TRIVIAL-GRAY-STREAMS #:FLEXI-STREAMS) (:OPTIMA #:FACT-BASE #:HOUSE)
 (:CLOSER-MOP #:OPTIMA) (:USOCKET #:HOUSE) (:SB-BSD-SOCKETS #:USOCKET)
 (:CL-FAD #:FACT-BASE #:LOCAL-TIME #:HOUSE) (:SB-POSIX #:CL-FAD)
 (:BORDEAUX-THREADS #:CL-FAD #:HOUSE) (:CL-JSON #:HOUSE)
 (:CL-PPCRE #:PARENSCRIPT #:HOUSE #:HOUSE) (:CL-BASE64 #:HOUSE)
 (:ANAPHORA #:PARENSCRIPT #:FACT-BASE #:HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA #:FACT-BASE #:OPTIMA #:CL-FAD #:BORDEAUX-THREADS #:HOUSE
  :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 51695 845152000) :INSERT
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
             (->key (sym) (intern (symbol-name sym) :keyword))
		     (rec (sys) 
		       (loop for dep in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  for dep-k = (->key dep)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew (->key sys) (gethash dep-k res)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 51695 845159000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:PARENSCRIPT :CL-NOTEBOOK)
 (:NAMED-READTABLES :PARENSCRIPT) (:FACT-BASE :CL-NOTEBOOK)
 (:LOCAL-TIME :FACT-BASE) (:HOUSE :CL-NOTEBOOK) (:FLEXI-STREAMS :HOUSE)
 (:TRIVIAL-GRAY-STREAMS :FLEXI-STREAMS) (:OPTIMA :FACT-BASE :HOUSE)
 (:CLOSER-MOP :OPTIMA) (:USOCKET :HOUSE) (:SB-BSD-SOCKETS :USOCKET)
 (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE) (:SB-POSIX :CL-FAD)
 (:BORDEAUX-THREADS :CL-FAD :HOUSE) (:CL-JSON :HOUSE)
 (:CL-PPCRE :PARENSCRIPT :HOUSE) (:CL-BASE64 :HOUSE)
 (:ANAPHORA :PARENSCRIPT :FACT-BASE :HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA :FACT-BASE :OPTIMA :CL-FAD :BORDEAUX-THREADS :HOUSE :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 51733 455853000) :DELETE
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
             (->key (sym) (intern (symbol-name sym) :keyword))
		     (rec (sys) 
		       (loop for dep in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  for dep-k = (->key dep)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew (->key sys) (gethash dep-k res)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 51733 455875000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:PARENSCRIPT :CL-NOTEBOOK)
 (:NAMED-READTABLES :PARENSCRIPT) (:FACT-BASE :CL-NOTEBOOK)
 (:LOCAL-TIME :FACT-BASE) (:HOUSE :CL-NOTEBOOK) (:FLEXI-STREAMS :HOUSE)
 (:TRIVIAL-GRAY-STREAMS :FLEXI-STREAMS) (:OPTIMA :FACT-BASE :HOUSE)
 (:CLOSER-MOP :OPTIMA) (:USOCKET :HOUSE) (:SB-BSD-SOCKETS :USOCKET)
 (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE) (:SB-POSIX :CL-FAD)
 (:BORDEAUX-THREADS :CL-FAD :HOUSE) (:CL-JSON :HOUSE)
 (:CL-PPCRE :PARENSCRIPT :HOUSE) (:CL-BASE64 :HOUSE)
 (:ANAPHORA :PARENSCRIPT :FACT-BASE :HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA :FACT-BASE :OPTIMA :CL-FAD :BORDEAUX-THREADS :HOUSE :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 51733 455881000) :INSERT
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
             (->key (sym) (intern (symbol-name sym) :keyword))
		     (rec (sys) 
		       (loop for dep in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  for dep-k = (->key dep)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew (->key sys) (gethash dep-k res)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 51733 455889000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:PARENSCRIPT :CL-NOTEBOOK)
 (:NAMED-READTABLES :PARENSCRIPT) (:FACT-BASE :CL-NOTEBOOK)
 (:LOCAL-TIME :FACT-BASE) (:HOUSE :CL-NOTEBOOK) (:FLEXI-STREAMS :HOUSE)
 (:TRIVIAL-GRAY-STREAMS :FLEXI-STREAMS) (:OPTIMA :FACT-BASE :HOUSE)
 (:CLOSER-MOP :OPTIMA) (:USOCKET :HOUSE) (:SB-BSD-SOCKETS :USOCKET)
 (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE) (:SB-POSIX :CL-FAD)
 (:BORDEAUX-THREADS :CL-FAD :HOUSE) (:CL-JSON :HOUSE)
 (:CL-PPCRE :PARENSCRIPT :HOUSE) (:CL-BASE64 :HOUSE)
 (:ANAPHORA :PARENSCRIPT :FACT-BASE :HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA :FACT-BASE :OPTIMA :CL-FAD :BORDEAUX-THREADS :HOUSE :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 52841 647743000) :DELETE
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
             (->key (sym) (intern (symbol-name sym) :keyword))
		     (rec (sys) 
		       (loop for dep in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  for dep-k = (->key dep)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew (->key sys) (gethash dep-k res)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 52841 647773000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:PARENSCRIPT :CL-NOTEBOOK)
 (:NAMED-READTABLES :PARENSCRIPT) (:FACT-BASE :CL-NOTEBOOK)
 (:LOCAL-TIME :FACT-BASE) (:HOUSE :CL-NOTEBOOK) (:FLEXI-STREAMS :HOUSE)
 (:TRIVIAL-GRAY-STREAMS :FLEXI-STREAMS) (:OPTIMA :FACT-BASE :HOUSE)
 (:CLOSER-MOP :OPTIMA) (:USOCKET :HOUSE) (:SB-BSD-SOCKETS :USOCKET)
 (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE) (:SB-POSIX :CL-FAD)
 (:BORDEAUX-THREADS :CL-FAD :HOUSE) (:CL-JSON :HOUSE)
 (:CL-PPCRE :PARENSCRIPT :HOUSE) (:CL-BASE64 :HOUSE)
 (:ANAPHORA :PARENSCRIPT :FACT-BASE :HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA :FACT-BASE :OPTIMA :CL-FAD :BORDEAUX-THREADS :HOUSE :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 52841 647780000) :INSERT
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
             (->key (s) (intern (if (stringp s) (string-upcase s) (symbol-name sym)) :keyword))
		     (rec (sys) 
		       (loop for dep in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  for dep-k = (->key dep)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew (->key sys) (gethash dep-k res)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 52841 647787000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((STANDARD-GENERIC-FUNCTION
      "#<STANDARD-GENERIC-FUNCTION DEPENDENCY-TREE (1)>"))
    ((ERROR
      ((ERROR-TYPE . SIMPLE-WARNING)
       (:ERROR-MESSAGE . "undefined variable: SYM")
       (:FORM . "(DEFMETHOD DEPENDENCY-TREE ((SYSTEM SYMBOL))
  (LET ((RES (MAKE-HASH-TABLE)))
    (LABELS ((FIND-SYS (SYS-NAME)
               (ASDF/SYSTEM:FIND-SYSTEM SYS-NAME))
             (->KEY (S)
               (INTERN
                (IF (STRINGP S)
                    (STRING-UPCASE S)
                    (SYMBOL-NAME SYM))
                :KEYWORD))
             (REC (SYS)
               (LOOP FOR DEP IN (SLOT-VALUE (FIND-SYS SYS)
                                            'ASDF/COMPONENT:SIDEWAY-DEPENDENCIES)
                     FOR DEP-K = (->KEY DEP)
                     UNLESS (GETHASH DEP-K RES)
                     DO (REC DEP)
                     DO (PUSHNEW (->KEY SYS) (GETHASH DEP-K RES)))))
      (REC SYSTEM))
    (ALEXANDRIA.0.DEV:HASH-TABLE-ALIST RES)))")))))
   (:STDOUT . ""))))
((5141 52852 931765000) :DELETE
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
             (->key (s) (intern (if (stringp s) (string-upcase s) (symbol-name sym)) :keyword))
		     (rec (sys) 
		       (loop for dep in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  for dep-k = (->key dep)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew (->key sys) (gethash dep-k res)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 52852 931788000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((STANDARD-GENERIC-FUNCTION
      "#<STANDARD-GENERIC-FUNCTION DEPENDENCY-TREE (1)>"))
    ((ERROR
      ((ERROR-TYPE . SIMPLE-WARNING)
       (:ERROR-MESSAGE . "undefined variable: SYM")
       (:FORM . "(DEFMETHOD DEPENDENCY-TREE ((SYSTEM SYMBOL))
  (LET ((RES (MAKE-HASH-TABLE)))
    (LABELS ((FIND-SYS (SYS-NAME)
               (ASDF/SYSTEM:FIND-SYSTEM SYS-NAME))
             (->KEY (S)
               (INTERN
                (IF (STRINGP S)
                    (STRING-UPCASE S)
                    (SYMBOL-NAME SYM))
                :KEYWORD))
             (REC (SYS)
               (LOOP FOR DEP IN (SLOT-VALUE (FIND-SYS SYS)
                                            'ASDF/COMPONENT:SIDEWAY-DEPENDENCIES)
                     FOR DEP-K = (->KEY DEP)
                     UNLESS (GETHASH DEP-K RES)
                     DO (REC DEP)
                     DO (PUSHNEW (->KEY SYS) (GETHASH DEP-K RES)))))
      (REC SYSTEM))
    (ALEXANDRIA.0.DEV:HASH-TABLE-ALIST RES)))")))))
   (:STDOUT . ""))))
((5141 52852 931794000) :INSERT
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
             (->key (s) (intern (if (stringp s) (string-upcase s) (symbol-name s)) :keyword))
		     (rec (sys) 
		       (loop for dep in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  for dep-k = (->key dep)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew (->key sys) (gethash dep-k res)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 52852 931802000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:PARENSCRIPT :CL-NOTEBOOK)
 (:NAMED-READTABLES :PARENSCRIPT) (:FACT-BASE :CL-NOTEBOOK)
 (:LOCAL-TIME :FACT-BASE) (:HOUSE :CL-NOTEBOOK) (:FLEXI-STREAMS :HOUSE)
 (:TRIVIAL-GRAY-STREAMS :FLEXI-STREAMS) (:OPTIMA :FACT-BASE :HOUSE)
 (:CLOSER-MOP :OPTIMA) (:USOCKET :HOUSE) (:SB-BSD-SOCKETS :USOCKET)
 (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE) (:SB-POSIX :CL-FAD)
 (:BORDEAUX-THREADS :CL-FAD :HOUSE) (:CL-JSON :HOUSE)
 (:CL-PPCRE :PARENSCRIPT :HOUSE) (:CL-BASE64 :HOUSE)
 (:ANAPHORA :PARENSCRIPT :FACT-BASE :HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA :FACT-BASE :OPTIMA :CL-FAD :BORDEAUX-THREADS :HOUSE :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 53496 71764000) :DELETE
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
             (->key (s) (intern (if (stringp s) (string-upcase s) (symbol-name s)) :keyword))
		     (rec (sys) 
		       (loop for dep in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  for dep-k = (->key dep)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew (->key sys) (gethash dep-k res)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 53496 71796000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:PARENSCRIPT :CL-NOTEBOOK)
 (:NAMED-READTABLES :PARENSCRIPT) (:FACT-BASE :CL-NOTEBOOK)
 (:LOCAL-TIME :FACT-BASE) (:HOUSE :CL-NOTEBOOK) (:FLEXI-STREAMS :HOUSE)
 (:TRIVIAL-GRAY-STREAMS :FLEXI-STREAMS) (:OPTIMA :FACT-BASE :HOUSE)
 (:CLOSER-MOP :OPTIMA) (:USOCKET :HOUSE) (:SB-BSD-SOCKETS :USOCKET)
 (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE) (:SB-POSIX :CL-FAD)
 (:BORDEAUX-THREADS :CL-FAD :HOUSE) (:CL-JSON :HOUSE)
 (:CL-PPCRE :PARENSCRIPT :HOUSE) (:CL-BASE64 :HOUSE)
 (:ANAPHORA :PARENSCRIPT :FACT-BASE :HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA :FACT-BASE :OPTIMA :CL-FAD :BORDEAUX-THREADS :HOUSE :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 53496 71802000) :INSERT
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
             (->key (s) (intern (if (stringp s) (string-upcase s) (symbol-name s)) :keyword))
		     (rec (sys) 
		       (loop with deps = (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  for dep in deps for dep-k = (->key dep)
                  when (null deps) do (setf (gethash (->key sys) res) nil)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew (->key sys) (gethash dep-k res)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 53496 71810000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:PARENSCRIPT :CL-NOTEBOOK)
 (:NAMED-READTABLES :PARENSCRIPT) (:FACT-BASE :CL-NOTEBOOK)
 (:LOCAL-TIME :FACT-BASE) (:HOUSE :CL-NOTEBOOK) (:FLEXI-STREAMS :HOUSE)
 (:TRIVIAL-GRAY-STREAMS :FLEXI-STREAMS) (:OPTIMA :FACT-BASE :HOUSE)
 (:CLOSER-MOP :OPTIMA) (:USOCKET :HOUSE) (:SB-BSD-SOCKETS :USOCKET)
 (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE) (:SB-POSIX :CL-FAD)
 (:BORDEAUX-THREADS :CL-FAD :HOUSE) (:CL-JSON :HOUSE)
 (:CL-PPCRE :PARENSCRIPT :HOUSE) (:CL-BASE64 :HOUSE)
 (:ANAPHORA :PARENSCRIPT :FACT-BASE :HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA :FACT-BASE :OPTIMA :CL-FAD :BORDEAUX-THREADS :HOUSE :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 53600 557862000) :DELETE
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
             (->key (s) (intern (if (stringp s) (string-upcase s) (symbol-name s)) :keyword))
		     (rec (sys) 
		       (loop with deps = (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  for dep in deps for dep-k = (->key dep)
                  when (null deps) do (setf (gethash (->key sys) res) nil)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew (->key sys) (gethash dep-k res)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 53600 557885000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:PARENSCRIPT :CL-NOTEBOOK)
 (:NAMED-READTABLES :PARENSCRIPT) (:FACT-BASE :CL-NOTEBOOK)
 (:LOCAL-TIME :FACT-BASE) (:HOUSE :CL-NOTEBOOK) (:FLEXI-STREAMS :HOUSE)
 (:TRIVIAL-GRAY-STREAMS :FLEXI-STREAMS) (:OPTIMA :FACT-BASE :HOUSE)
 (:CLOSER-MOP :OPTIMA) (:USOCKET :HOUSE) (:SB-BSD-SOCKETS :USOCKET)
 (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE) (:SB-POSIX :CL-FAD)
 (:BORDEAUX-THREADS :CL-FAD :HOUSE) (:CL-JSON :HOUSE)
 (:CL-PPCRE :PARENSCRIPT :HOUSE) (:CL-BASE64 :HOUSE)
 (:ANAPHORA :PARENSCRIPT :FACT-BASE :HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA :FACT-BASE :OPTIMA :CL-FAD :BORDEAUX-THREADS :HOUSE :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 53600 557892000) :INSERT
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
             (->key (s) (intern (if (stringp s) (string-upcase s) (symbol-name s)) :keyword))
		     (rec (sys) 
		       (loop for dep in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  for dep-k = (->key dep)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew (->key sys) (gethash dep-k res)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 53600 557899000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:PARENSCRIPT :CL-NOTEBOOK)
 (:NAMED-READTABLES :PARENSCRIPT) (:FACT-BASE :CL-NOTEBOOK)
 (:LOCAL-TIME :FACT-BASE) (:HOUSE :CL-NOTEBOOK) (:FLEXI-STREAMS :HOUSE)
 (:TRIVIAL-GRAY-STREAMS :FLEXI-STREAMS) (:OPTIMA :FACT-BASE :HOUSE)
 (:CLOSER-MOP :OPTIMA) (:USOCKET :HOUSE) (:SB-BSD-SOCKETS :USOCKET)
 (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE) (:SB-POSIX :CL-FAD)
 (:BORDEAUX-THREADS :CL-FAD :HOUSE) (:CL-JSON :HOUSE)
 (:CL-PPCRE :PARENSCRIPT :HOUSE) (:CL-BASE64 :HOUSE)
 (:ANAPHORA :PARENSCRIPT :FACT-BASE :HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA :FACT-BASE :OPTIMA :CL-FAD :BORDEAUX-THREADS :HOUSE :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 53863 794960000) :DELETE
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
             (->key (s) (intern (if (stringp s) (string-upcase s) (symbol-name s)) :keyword))
		     (rec (sys) 
		       (loop for dep in (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  for dep-k = (->key dep)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew (->key sys) (gethash dep-k res)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 53863 794994000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:PARENSCRIPT :CL-NOTEBOOK)
 (:NAMED-READTABLES :PARENSCRIPT) (:FACT-BASE :CL-NOTEBOOK)
 (:LOCAL-TIME :FACT-BASE) (:HOUSE :CL-NOTEBOOK) (:FLEXI-STREAMS :HOUSE)
 (:TRIVIAL-GRAY-STREAMS :FLEXI-STREAMS) (:OPTIMA :FACT-BASE :HOUSE)
 (:CLOSER-MOP :OPTIMA) (:USOCKET :HOUSE) (:SB-BSD-SOCKETS :USOCKET)
 (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE) (:SB-POSIX :CL-FAD)
 (:BORDEAUX-THREADS :CL-FAD :HOUSE) (:CL-JSON :HOUSE)
 (:CL-PPCRE :PARENSCRIPT :HOUSE) (:CL-BASE64 :HOUSE)
 (:ANAPHORA :PARENSCRIPT :FACT-BASE :HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA :FACT-BASE :OPTIMA :CL-FAD :BORDEAUX-THREADS :HOUSE :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 53863 795000000) :INSERT
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table))
        (deps (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
             (->key (s) (intern (if (stringp s) (string-upcase s) (symbol-name s)) :keyword))
		     (rec (sys) 
		       (loop with deps = (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  for dep in deps for dep-k = (->key dep) for sys-k = (->key sys)
                  do (setf (gethash sys-k deps) deps)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew sys-k (gethash dep-k res)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 53863 795009000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((STANDARD-GENERIC-FUNCTION
      "#<STANDARD-GENERIC-FUNCTION DEPENDENCY-TREE (1)>"))
    ((ERROR
      ((ERROR-TYPE . SB-INT:SIMPLE-STYLE-WARNING)
       (:ERROR-MESSAGE . "The variable DEPS is defined but never used.")
       (:FORM . "(DEFMETHOD DEPENDENCY-TREE ((SYSTEM SYMBOL))
  (LET ((RES (MAKE-HASH-TABLE)) (DEPS (MAKE-HASH-TABLE)))
    (LABELS ((FIND-SYS (SYS-NAME)
               (ASDF/SYSTEM:FIND-SYSTEM SYS-NAME))
             (->KEY (S)
               (INTERN
                (IF (STRINGP S)
                    (STRING-UPCASE S)
                    (SYMBOL-NAME S))
                :KEYWORD))
             (REC (SYS)
               (LOOP WITH DEPS = (SLOT-VALUE (FIND-SYS SYS)
                                             'ASDF/COMPONENT:SIDEWAY-DEPENDENCIES)
                     FOR DEP IN DEPS
                     FOR DEP-K = (->KEY DEP)
                     FOR SYS-K = (->KEY SYS)
                     DO (SETF (GETHASH SYS-K DEPS) DEPS)
                     UNLESS (GETHASH DEP-K RES)
                     DO (REC DEP)
                     DO (PUSHNEW SYS-K (GETHASH DEP-K RES)))))
      (REC SYSTEM))
    (ALEXANDRIA.0.DEV:HASH-TABLE-ALIST RES)))")))))
   (:STDOUT . ""))))
((5141 53886 763765000) :DELETE
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table))
        (deps (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
             (->key (s) (intern (if (stringp s) (string-upcase s) (symbol-name s)) :keyword))
		     (rec (sys) 
		       (loop with deps = (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  for dep in deps for dep-k = (->key dep) for sys-k = (->key sys)
                  do (setf (gethash sys-k deps) deps)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew sys-k (gethash dep-k res)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 53886 763790000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((STANDARD-GENERIC-FUNCTION
      "#<STANDARD-GENERIC-FUNCTION DEPENDENCY-TREE (1)>"))
    ((ERROR
      ((ERROR-TYPE . SB-INT:SIMPLE-STYLE-WARNING)
       (:ERROR-MESSAGE . "The variable DEPS is defined but never used.")
       (:FORM . "(DEFMETHOD DEPENDENCY-TREE ((SYSTEM SYMBOL))
  (LET ((RES (MAKE-HASH-TABLE)) (DEPS (MAKE-HASH-TABLE)))
    (LABELS ((FIND-SYS (SYS-NAME)
               (ASDF/SYSTEM:FIND-SYSTEM SYS-NAME))
             (->KEY (S)
               (INTERN
                (IF (STRINGP S)
                    (STRING-UPCASE S)
                    (SYMBOL-NAME S))
                :KEYWORD))
             (REC (SYS)
               (LOOP WITH DEPS = (SLOT-VALUE (FIND-SYS SYS)
                                             'ASDF/COMPONENT:SIDEWAY-DEPENDENCIES)
                     FOR DEP IN DEPS
                     FOR DEP-K = (->KEY DEP)
                     FOR SYS-K = (->KEY SYS)
                     DO (SETF (GETHASH SYS-K DEPS) DEPS)
                     UNLESS (GETHASH DEP-K RES)
                     DO (REC DEP)
                     DO (PUSHNEW SYS-K (GETHASH DEP-K RES)))))
      (REC SYSTEM))
    (ALEXANDRIA.0.DEV:HASH-TABLE-ALIST RES)))")))))
   (:STDOUT . ""))))
((5141 53886 763796000) :INSERT
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table))
        (dep-table (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
             (->key (s) (intern (if (stringp s) (string-upcase s) (symbol-name s)) :keyword))
		     (rec (sys) 
		       (loop with deps = (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  for dep in deps for dep-k = (->key dep) for sys-k = (->key sys)
                  do (setf (gethash sys-k dep-table) deps)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew sys-k (gethash dep-k res)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 53886 763804000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:PARENSCRIPT :CL-NOTEBOOK)
 (:NAMED-READTABLES :PARENSCRIPT) (:FACT-BASE :CL-NOTEBOOK)
 (:LOCAL-TIME :FACT-BASE) (:HOUSE :CL-NOTEBOOK) (:FLEXI-STREAMS :HOUSE)
 (:TRIVIAL-GRAY-STREAMS :FLEXI-STREAMS) (:OPTIMA :FACT-BASE :HOUSE)
 (:CLOSER-MOP :OPTIMA) (:USOCKET :HOUSE) (:SB-BSD-SOCKETS :USOCKET)
 (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE) (:SB-POSIX :CL-FAD)
 (:BORDEAUX-THREADS :CL-FAD :HOUSE) (:CL-JSON :HOUSE)
 (:CL-PPCRE :PARENSCRIPT :HOUSE) (:CL-BASE64 :HOUSE)
 (:ANAPHORA :PARENSCRIPT :FACT-BASE :HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA :FACT-BASE :OPTIMA :CL-FAD :BORDEAUX-THREADS :HOUSE :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 54105 854180000) :DELETE
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table))
        (dep-table (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
             (->key (s) (intern (if (stringp s) (string-upcase s) (symbol-name s)) :keyword))
		     (rec (sys) 
		       (loop with deps = (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  for dep in deps for dep-k = (->key dep) for sys-k = (->key sys)
                  do (setf (gethash sys-k dep-table) deps)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew sys-k (gethash dep-k res)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 54105 854213000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:PARENSCRIPT :CL-NOTEBOOK)
 (:NAMED-READTABLES :PARENSCRIPT) (:FACT-BASE :CL-NOTEBOOK)
 (:LOCAL-TIME :FACT-BASE) (:HOUSE :CL-NOTEBOOK) (:FLEXI-STREAMS :HOUSE)
 (:TRIVIAL-GRAY-STREAMS :FLEXI-STREAMS) (:OPTIMA :FACT-BASE :HOUSE)
 (:CLOSER-MOP :OPTIMA) (:USOCKET :HOUSE) (:SB-BSD-SOCKETS :USOCKET)
 (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE) (:SB-POSIX :CL-FAD)
 (:BORDEAUX-THREADS :CL-FAD :HOUSE) (:CL-JSON :HOUSE)
 (:CL-PPCRE :PARENSCRIPT :HOUSE) (:CL-BASE64 :HOUSE)
 (:ANAPHORA :PARENSCRIPT :FACT-BASE :HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA :FACT-BASE :OPTIMA :CL-FAD :BORDEAUX-THREADS :HOUSE :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 54105 854219000) :INSERT
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table))
        (dep-table (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
             (->key (s) (intern (if (stringp s) (string-upcase s) (symbol-name s)) :keyword))
		     (rec (sys) 
		       (loop with deps = (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  for dep in deps for dep-k = (->key dep) for sys-k = (->key sys)
                  do (setf (gethash sys-k dep-table) deps)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew sys-k (gethash dep-k res)))))
      (rec system))
     (sort (alexandria:hash-table-alist res)
           #'< :key (lambda (d) (length (gethash d dep-table))))))

(dependency-tree :cl-notebook)"))
((5141 54105 854228000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:PARENSCRIPT :CL-NOTEBOOK)
 (:NAMED-READTABLES :PARENSCRIPT) (:FACT-BASE :CL-NOTEBOOK)
 (:LOCAL-TIME :FACT-BASE) (:HOUSE :CL-NOTEBOOK) (:FLEXI-STREAMS :HOUSE)
 (:TRIVIAL-GRAY-STREAMS :FLEXI-STREAMS) (:OPTIMA :FACT-BASE :HOUSE)
 (:CLOSER-MOP :OPTIMA) (:USOCKET :HOUSE) (:SB-BSD-SOCKETS :USOCKET)
 (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE) (:SB-POSIX :CL-FAD)
 (:BORDEAUX-THREADS :CL-FAD :HOUSE) (:CL-JSON :HOUSE)
 (:CL-PPCRE :PARENSCRIPT :HOUSE) (:CL-BASE64 :HOUSE)
 (:ANAPHORA :PARENSCRIPT :FACT-BASE :HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA :FACT-BASE :OPTIMA :CL-FAD :BORDEAUX-THREADS :HOUSE :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 54141 702104000) :DELETE
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table))
        (dep-table (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
             (->key (s) (intern (if (stringp s) (string-upcase s) (symbol-name s)) :keyword))
		     (rec (sys) 
		       (loop with deps = (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  for dep in deps for dep-k = (->key dep) for sys-k = (->key sys)
                  do (setf (gethash sys-k dep-table) deps)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew sys-k (gethash dep-k res)))))
      (rec system))
     (sort (alexandria:hash-table-alist res)
           #'< :key (lambda (d) (length (gethash d dep-table))))))

(dependency-tree :cl-notebook)"))
((5141 54141 702129000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:PARENSCRIPT :CL-NOTEBOOK)
 (:NAMED-READTABLES :PARENSCRIPT) (:FACT-BASE :CL-NOTEBOOK)
 (:LOCAL-TIME :FACT-BASE) (:HOUSE :CL-NOTEBOOK) (:FLEXI-STREAMS :HOUSE)
 (:TRIVIAL-GRAY-STREAMS :FLEXI-STREAMS) (:OPTIMA :FACT-BASE :HOUSE)
 (:CLOSER-MOP :OPTIMA) (:USOCKET :HOUSE) (:SB-BSD-SOCKETS :USOCKET)
 (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE) (:SB-POSIX :CL-FAD)
 (:BORDEAUX-THREADS :CL-FAD :HOUSE) (:CL-JSON :HOUSE)
 (:CL-PPCRE :PARENSCRIPT :HOUSE) (:CL-BASE64 :HOUSE)
 (:ANAPHORA :PARENSCRIPT :FACT-BASE :HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA :FACT-BASE :OPTIMA :CL-FAD :BORDEAUX-THREADS :HOUSE :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 54141 702135000) :INSERT
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table))
        (dep-table (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
             (->key (s) (intern (if (stringp s) (string-upcase s) (symbol-name s)) :keyword))
		     (rec (sys) 
		       (loop with deps = (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  for dep in deps for dep-k = (->key dep) for sys-k = (->key sys)
                  do (setf (gethash sys-k dep-table) deps)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew sys-k (gethash dep-k res)))))
      (rec system))
     (sort (alexandria:hash-table-alist res)
           #'> :key (lambda (d) (length (gethash d dep-table))))))

(dependency-tree :cl-notebook)"))
((5141 54141 702143000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:PARENSCRIPT :CL-NOTEBOOK)
 (:NAMED-READTABLES :PARENSCRIPT) (:FACT-BASE :CL-NOTEBOOK)
 (:LOCAL-TIME :FACT-BASE) (:HOUSE :CL-NOTEBOOK) (:FLEXI-STREAMS :HOUSE)
 (:TRIVIAL-GRAY-STREAMS :FLEXI-STREAMS) (:OPTIMA :FACT-BASE :HOUSE)
 (:CLOSER-MOP :OPTIMA) (:USOCKET :HOUSE) (:SB-BSD-SOCKETS :USOCKET)
 (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE) (:SB-POSIX :CL-FAD)
 (:BORDEAUX-THREADS :CL-FAD :HOUSE) (:CL-JSON :HOUSE)
 (:CL-PPCRE :PARENSCRIPT :HOUSE) (:CL-BASE64 :HOUSE)
 (:ANAPHORA :PARENSCRIPT :FACT-BASE :HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA :FACT-BASE :OPTIMA :CL-FAD :BORDEAUX-THREADS :HOUSE :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 54161 344758000) :DELETE
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table))
        (dep-table (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
             (->key (s) (intern (if (stringp s) (string-upcase s) (symbol-name s)) :keyword))
		     (rec (sys) 
		       (loop with deps = (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  for dep in deps for dep-k = (->key dep) for sys-k = (->key sys)
                  do (setf (gethash sys-k dep-table) deps)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew sys-k (gethash dep-k res)))))
      (rec system))
     (sort (alexandria:hash-table-alist res)
           #'> :key (lambda (d) (length (gethash d dep-table))))))

(dependency-tree :cl-notebook)"))
((5141 54161 344783000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:PARENSCRIPT :CL-NOTEBOOK)
 (:NAMED-READTABLES :PARENSCRIPT) (:FACT-BASE :CL-NOTEBOOK)
 (:LOCAL-TIME :FACT-BASE) (:HOUSE :CL-NOTEBOOK) (:FLEXI-STREAMS :HOUSE)
 (:TRIVIAL-GRAY-STREAMS :FLEXI-STREAMS) (:OPTIMA :FACT-BASE :HOUSE)
 (:CLOSER-MOP :OPTIMA) (:USOCKET :HOUSE) (:SB-BSD-SOCKETS :USOCKET)
 (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE) (:SB-POSIX :CL-FAD)
 (:BORDEAUX-THREADS :CL-FAD :HOUSE) (:CL-JSON :HOUSE)
 (:CL-PPCRE :PARENSCRIPT :HOUSE) (:CL-BASE64 :HOUSE)
 (:ANAPHORA :PARENSCRIPT :FACT-BASE :HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA :FACT-BASE :OPTIMA :CL-FAD :BORDEAUX-THREADS :HOUSE :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 54161 344789000) :INSERT
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table))
        (dep-table (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
             (->key (s) (intern (if (stringp s) (string-upcase s) (symbol-name s)) :keyword))
		     (rec (sys) 
		       (loop with deps = (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  for dep in deps for dep-k = (->key dep) for sys-k = (->key sys)
                  do (setf (gethash sys-k dep-table) deps)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew sys-k (gethash dep-k res)))))
      (rec system))
     (sort (alexandria:hash-table-alist res)
           #'> :key (lambda (d) (length (gethash (car d) dep-table))))))

(dependency-tree :cl-notebook)"))
((5141 54161 344798000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:HOUSE :CL-NOTEBOOK) (:FACT-BASE :CL-NOTEBOOK) (:PARENSCRIPT :CL-NOTEBOOK)
 (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE) (:OPTIMA :FACT-BASE :HOUSE)
 (:LOCAL-TIME :FACT-BASE) (:FLEXI-STREAMS :HOUSE) (:USOCKET :HOUSE)
 (:BORDEAUX-THREADS :CL-FAD :HOUSE) (:CL-CSS :CL-NOTEBOOK)
 (:CL-WHO :CL-NOTEBOOK) (:NAMED-READTABLES :PARENSCRIPT)
 (:TRIVIAL-GRAY-STREAMS :FLEXI-STREAMS) (:CLOSER-MOP :OPTIMA)
 (:SB-BSD-SOCKETS :USOCKET) (:SB-POSIX :CL-FAD) (:CL-JSON :HOUSE)
 (:CL-PPCRE :PARENSCRIPT :HOUSE) (:CL-BASE64 :HOUSE)
 (:ANAPHORA :PARENSCRIPT :FACT-BASE :HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA :FACT-BASE :OPTIMA :CL-FAD :BORDEAUX-THREADS :HOUSE :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 54168 858852000) :DELETE
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table))
        (dep-table (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
             (->key (s) (intern (if (stringp s) (string-upcase s) (symbol-name s)) :keyword))
		     (rec (sys) 
		       (loop with deps = (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  for dep in deps for dep-k = (->key dep) for sys-k = (->key sys)
                  do (setf (gethash sys-k dep-table) deps)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew sys-k (gethash dep-k res)))))
      (rec system))
     (sort (alexandria:hash-table-alist res)
           #'> :key (lambda (d) (length (gethash (car d) dep-table))))))

(dependency-tree :cl-notebook)"))
((5141 54168 858877000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:HOUSE :CL-NOTEBOOK) (:FACT-BASE :CL-NOTEBOOK) (:PARENSCRIPT :CL-NOTEBOOK)
 (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE) (:OPTIMA :FACT-BASE :HOUSE)
 (:LOCAL-TIME :FACT-BASE) (:FLEXI-STREAMS :HOUSE) (:USOCKET :HOUSE)
 (:BORDEAUX-THREADS :CL-FAD :HOUSE) (:CL-CSS :CL-NOTEBOOK)
 (:CL-WHO :CL-NOTEBOOK) (:NAMED-READTABLES :PARENSCRIPT)
 (:TRIVIAL-GRAY-STREAMS :FLEXI-STREAMS) (:CLOSER-MOP :OPTIMA)
 (:SB-BSD-SOCKETS :USOCKET) (:SB-POSIX :CL-FAD) (:CL-JSON :HOUSE)
 (:CL-PPCRE :PARENSCRIPT :HOUSE) (:CL-BASE64 :HOUSE)
 (:ANAPHORA :PARENSCRIPT :FACT-BASE :HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA :FACT-BASE :OPTIMA :CL-FAD :BORDEAUX-THREADS :HOUSE :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 54168 858883000) :INSERT
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table))
        (dep-table (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
             (->key (s) (intern (if (stringp s) (string-upcase s) (symbol-name s)) :keyword))
		     (rec (sys) 
		       (loop with deps = (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  for dep in deps for dep-k = (->key dep) for sys-k = (->key sys)
                  do (setf (gethash sys-k dep-table) deps)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew sys-k (gethash dep-k res)))))
      (rec system))
     (sort (alexandria:hash-table-alist res)
           #'< :key (lambda (d) (length (gethash (car d) dep-table))))))

(dependency-tree :cl-notebook)"))
((5141 54168 858892000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:NAMED-READTABLES :PARENSCRIPT)
 (:TRIVIAL-GRAY-STREAMS :FLEXI-STREAMS) (:CLOSER-MOP :OPTIMA)
 (:SB-BSD-SOCKETS :USOCKET) (:SB-POSIX :CL-FAD) (:CL-JSON :HOUSE)
 (:CL-PPCRE :PARENSCRIPT :HOUSE) (:CL-BASE64 :HOUSE)
 (:ANAPHORA :PARENSCRIPT :FACT-BASE :HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA :FACT-BASE :OPTIMA :CL-FAD :BORDEAUX-THREADS :HOUSE :CL-NOTEBOOK)
 (:LOCAL-TIME :FACT-BASE) (:FLEXI-STREAMS :HOUSE) (:USOCKET :HOUSE)
 (:BORDEAUX-THREADS :CL-FAD :HOUSE) (:OPTIMA :FACT-BASE :HOUSE)
 (:PARENSCRIPT :CL-NOTEBOOK) (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE)
 (:FACT-BASE :CL-NOTEBOOK) (:HOUSE :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 54174 925929000) :DELETE (81 :CELL-ORDER (23 2 15 1 7 10 51 75 76)))
((5141 54174 926085000) :INSERT (82 :CELL-ORDER (23 2 15 1 7 10 51 75)))
((5141 54238 854058000) :DELETE
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table))
        (dep-table (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
             (->key (s) (intern (if (stringp s) (string-upcase s) (symbol-name s)) :keyword))
		     (rec (sys) 
		       (loop with deps = (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  for dep in deps for dep-k = (->key dep) for sys-k = (->key sys)
                  do (setf (gethash sys-k dep-table) deps)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew sys-k (gethash dep-k res)))))
      (rec system))
     (sort (alexandria:hash-table-alist res)
           #'< :key (lambda (d) (length (gethash (car d) dep-table))))))

(dependency-tree :cl-notebook)"))
((5141 54238 854084000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:NAMED-READTABLES :PARENSCRIPT)
 (:TRIVIAL-GRAY-STREAMS :FLEXI-STREAMS) (:CLOSER-MOP :OPTIMA)
 (:SB-BSD-SOCKETS :USOCKET) (:SB-POSIX :CL-FAD) (:CL-JSON :HOUSE)
 (:CL-PPCRE :PARENSCRIPT :HOUSE) (:CL-BASE64 :HOUSE)
 (:ANAPHORA :PARENSCRIPT :FACT-BASE :HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA :FACT-BASE :OPTIMA :CL-FAD :BORDEAUX-THREADS :HOUSE :CL-NOTEBOOK)
 (:LOCAL-TIME :FACT-BASE) (:FLEXI-STREAMS :HOUSE) (:USOCKET :HOUSE)
 (:BORDEAUX-THREADS :CL-FAD :HOUSE) (:OPTIMA :FACT-BASE :HOUSE)
 (:PARENSCRIPT :CL-NOTEBOOK) (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE)
 (:FACT-BASE :CL-NOTEBOOK) (:HOUSE :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 54238 854090000) :INSERT
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table))
        (dep-table (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
             (->key (s) (intern (if (stringp s) (string-upcase s) (symbol-name s)) :keyword))
		     (rec (sys) 
		       (loop with deps = (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  for dep in deps for dep-k = (->key dep) for sys-k = (->key sys)
                  do (setf (gethash sys-k dep-table) deps)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew sys-k (gethash dep-k res)))))
      (rec system))
     (sort (alexandria:hash-table-alist res)
           #'< :key (lambda (d) (length (gethash (car d) dep-table))))))

(dependency-tree :cl-notebook)"))
((5141 54238 854099000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:NAMED-READTABLES :PARENSCRIPT)
 (:TRIVIAL-GRAY-STREAMS :FLEXI-STREAMS) (:CLOSER-MOP :CL-NOTEBOOK :OPTIMA)
 (:SB-BSD-SOCKETS :USOCKET) (:SB-POSIX :CL-FAD) (:CL-JSON :HOUSE)
 (:CL-PPCRE :PARENSCRIPT :HOUSE) (:CL-BASE64 :HOUSE)
 (:ANAPHORA :PARENSCRIPT :FACT-BASE :HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA :FACT-BASE :OPTIMA :CL-FAD :BORDEAUX-THREADS :HOUSE :CL-NOTEBOOK)
 (:LOCAL-TIME :FACT-BASE) (:FLEXI-STREAMS :HOUSE) (:USOCKET :HOUSE)
 (:BORDEAUX-THREADS :CL-FAD :HOUSE) (:OPTIMA :FACT-BASE :HOUSE)
 (:PARENSCRIPT :CL-NOTEBOOK) (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE)
 (:FACT-BASE :CL-NOTEBOOK) (:HOUSE :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 58738 104295000) :DELETE
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table))
        (dep-table (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
             (->key (s) (intern (if (stringp s) (string-upcase s) (symbol-name s)) :keyword))
		     (rec (sys) 
		       (loop with deps = (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  for dep in deps for dep-k = (->key dep) for sys-k = (->key sys)
                  do (setf (gethash sys-k dep-table) deps)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew sys-k (gethash dep-k res)))))
      (rec system))
     (sort (alexandria:hash-table-alist res)
           #'< :key (lambda (d) (length (gethash (car d) dep-table))))))

(dependency-tree :cl-notebook)"))
((5141 58738 104329000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:NAMED-READTABLES :PARENSCRIPT)
 (:TRIVIAL-GRAY-STREAMS :FLEXI-STREAMS) (:CLOSER-MOP :CL-NOTEBOOK :OPTIMA)
 (:SB-BSD-SOCKETS :USOCKET) (:SB-POSIX :CL-FAD) (:CL-JSON :HOUSE)
 (:CL-PPCRE :PARENSCRIPT :HOUSE) (:CL-BASE64 :HOUSE)
 (:ANAPHORA :PARENSCRIPT :FACT-BASE :HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA :FACT-BASE :OPTIMA :CL-FAD :BORDEAUX-THREADS :HOUSE :CL-NOTEBOOK)
 (:LOCAL-TIME :FACT-BASE) (:FLEXI-STREAMS :HOUSE) (:USOCKET :HOUSE)
 (:BORDEAUX-THREADS :CL-FAD :HOUSE) (:OPTIMA :FACT-BASE :HOUSE)
 (:PARENSCRIPT :CL-NOTEBOOK) (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE)
 (:FACT-BASE :CL-NOTEBOOK) (:HOUSE :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 58738 104335000) :INSERT
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table))
        (dep-table (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
             (->key (s) (intern (if (stringp s) (string-upcase s) (symbol-name s)) :keyword))
		     (rec (sys) 
		       (loop with deps = (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  for dep in deps for dep-k = (->key dep) for sys-k = (->key sys)
                  do (setf (gethash sys-k dep-table) deps)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew sys-k (gethash dep-k res)))))
      (rec system))
     (sort (alexandria:hash-table-alist res)
           #'< :key (lambda (d) (length (gethash (car d) dep-table))))))

(dependency-tree :cl-notebook)"))
((5141 58738 104344000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:NAMED-READTABLES :PARENSCRIPT)
 (:TRIVIAL-GRAY-STREAMS :FLEXI-STREAMS) (:CLOSER-MOP :CL-NOTEBOOK :OPTIMA)
 (:SB-BSD-SOCKETS :USOCKET) (:SB-POSIX :CL-FAD) (:CL-JSON :HOUSE)
 (:CL-PPCRE :PARENSCRIPT :HOUSE) (:CL-BASE64 :HOUSE)
 (:ANAPHORA :PARENSCRIPT :FACT-BASE :HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA :FACT-BASE :OPTIMA :CL-FAD :BORDEAUX-THREADS :HOUSE :CL-NOTEBOOK)
 (:LOCAL-TIME :FACT-BASE) (:FLEXI-STREAMS :HOUSE) (:USOCKET :HOUSE)
 (:BORDEAUX-THREADS :CL-FAD :HOUSE) (:OPTIMA :FACT-BASE :HOUSE)
 (:PARENSCRIPT :CL-NOTEBOOK) (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE)
 (:FACT-BASE :CL-NOTEBOOK) (:HOUSE :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 58915 843891000) :INSERT (83 :CELL NIL))
((5141 58915 843917000) :INSERT (83 :CELL-TYPE :COMMON-LISP))
((5141 58915 843920000) :INSERT (83 :CONTENTS ""))
((5141 58915 843922000) :INSERT (83 :VALUE ""))
((5141 58981 793009000) :DELETE
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table))
        (dep-table (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
             (->key (s) (intern (if (stringp s) (string-upcase s) (symbol-name s)) :keyword))
		     (rec (sys) 
		       (loop with deps = (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  for dep in deps for dep-k = (->key dep) for sys-k = (->key sys)
                  do (setf (gethash sys-k dep-table) deps)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew sys-k (gethash dep-k res)))))
      (rec system))
     (sort (alexandria:hash-table-alist res)
           #'< :key (lambda (d) (length (gethash (car d) dep-table))))))

(dependency-tree :cl-notebook)"))
((5141 58981 793035000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:NAMED-READTABLES :PARENSCRIPT)
 (:TRIVIAL-GRAY-STREAMS :FLEXI-STREAMS) (:CLOSER-MOP :CL-NOTEBOOK :OPTIMA)
 (:SB-BSD-SOCKETS :USOCKET) (:SB-POSIX :CL-FAD) (:CL-JSON :HOUSE)
 (:CL-PPCRE :PARENSCRIPT :HOUSE) (:CL-BASE64 :HOUSE)
 (:ANAPHORA :PARENSCRIPT :FACT-BASE :HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA :FACT-BASE :OPTIMA :CL-FAD :BORDEAUX-THREADS :HOUSE :CL-NOTEBOOK)
 (:LOCAL-TIME :FACT-BASE) (:FLEXI-STREAMS :HOUSE) (:USOCKET :HOUSE)
 (:BORDEAUX-THREADS :CL-FAD :HOUSE) (:OPTIMA :FACT-BASE :HOUSE)
 (:PARENSCRIPT :CL-NOTEBOOK) (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE)
 (:FACT-BASE :CL-NOTEBOOK) (:HOUSE :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 58981 793041000) :INSERT
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
             (->key (s) (intern (if (stringp s) (string-upcase s) (symbol-name s)) :keyword))
		     (rec (sys) 
		       (loop with deps = (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  for dep in deps for dep-k = (->key dep)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew (->key sys) (gethash dep-k res)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 58981 793049000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:PARENSCRIPT :CL-NOTEBOOK)
 (:NAMED-READTABLES :PARENSCRIPT) (:FACT-BASE :CL-NOTEBOOK)
 (:LOCAL-TIME :FACT-BASE) (:HOUSE :CL-NOTEBOOK) (:FLEXI-STREAMS :HOUSE)
 (:TRIVIAL-GRAY-STREAMS :FLEXI-STREAMS) (:OPTIMA :FACT-BASE :HOUSE)
 (:CLOSER-MOP :CL-NOTEBOOK :OPTIMA) (:USOCKET :HOUSE)
 (:SB-BSD-SOCKETS :USOCKET) (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE)
 (:SB-POSIX :CL-FAD) (:BORDEAUX-THREADS :CL-FAD :HOUSE) (:CL-JSON :HOUSE)
 (:CL-PPCRE :PARENSCRIPT :HOUSE) (:CL-BASE64 :HOUSE)
 (:ANAPHORA :PARENSCRIPT :FACT-BASE :HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA :FACT-BASE :OPTIMA :CL-FAD :BORDEAUX-THREADS :HOUSE :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 59016 160581000) :DELETE (83 :CONTENTS ""))
((5141 59016 160596000) :DELETE (83 :VALUE ""))
((5141 59016 160601000) :INSERT
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree) dep-tree)

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 59016 160606000) :INSERT
 (83 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:PARENSCRIPT :CL-NOTEBOOK)
 (:NAMED-READTABLES :PARENSCRIPT) (:FACT-BASE :CL-NOTEBOOK)
 (:LOCAL-TIME :FACT-BASE) (:HOUSE :CL-NOTEBOOK) (:FLEXI-STREAMS :HOUSE)
 (:TRIVIAL-GRAY-STREAMS :FLEXI-STREAMS) (:OPTIMA :FACT-BASE :HOUSE)
 (:CLOSER-MOP :CL-NOTEBOOK :OPTIMA) (:USOCKET :HOUSE)
 (:SB-BSD-SOCKETS :USOCKET) (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE)
 (:SB-POSIX :CL-FAD) (:BORDEAUX-THREADS :CL-FAD :HOUSE) (:CL-JSON :HOUSE)
 (:CL-PPCRE :PARENSCRIPT :HOUSE) (:CL-BASE64 :HOUSE)
 (:ANAPHORA :PARENSCRIPT :FACT-BASE :HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA :FACT-BASE :OPTIMA :CL-FAD :BORDEAUX-THREADS :HOUSE :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 59085 927394000) :DELETE
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree) dep-tree)

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 59085 927410000) :DELETE
 (83 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:PARENSCRIPT :CL-NOTEBOOK)
 (:NAMED-READTABLES :PARENSCRIPT) (:FACT-BASE :CL-NOTEBOOK)
 (:LOCAL-TIME :FACT-BASE) (:HOUSE :CL-NOTEBOOK) (:FLEXI-STREAMS :HOUSE)
 (:TRIVIAL-GRAY-STREAMS :FLEXI-STREAMS) (:OPTIMA :FACT-BASE :HOUSE)
 (:CLOSER-MOP :CL-NOTEBOOK :OPTIMA) (:USOCKET :HOUSE)
 (:SB-BSD-SOCKETS :USOCKET) (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE)
 (:SB-POSIX :CL-FAD) (:BORDEAUX-THREADS :CL-FAD :HOUSE) (:CL-JSON :HOUSE)
 (:CL-PPCRE :PARENSCRIPT :HOUSE) (:CL-BASE64 :HOUSE)
 (:ANAPHORA :PARENSCRIPT :FACT-BASE :HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA :FACT-BASE :OPTIMA :CL-FAD :BORDEAUX-THREADS :HOUSE :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 59085 927432000) :INSERT
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree) 
  (mapcar (lambda (d) (slot-value (find-sys (car d)) 'asdf/component:sideway-dependencies)) dep-tree))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 59085 927437000) :INSERT
 (83 :VALUE
  ((:RESULT
    ((ERROR
      ((ERROR-TYPE . SB-INT:SIMPLE-STYLE-WARNING)
       (:ERROR-MESSAGE . "undefined function: FIND-SYS")
       (:FORM . "(DEFUN ORDERED-DEP-TREE (DEP-TREE)
  (MAPCAR
   (LAMBDA (D)
     (SLOT-VALUE (FIND-SYS (CAR D)) 'ASDF/COMPONENT:SIDEWAY-DEPENDENCIES))
   DEP-TREE))")))))
   (:STDOUT . ""))))
((5141 59122 984822000) :DELETE
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree) 
  (mapcar (lambda (d) (slot-value (find-sys (car d)) 'asdf/component:sideway-dependencies)) dep-tree))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 59122 984838000) :DELETE
 (83 :VALUE
  ((:RESULT
    ((ERROR
      ((ERROR-TYPE . SB-INT:SIMPLE-STYLE-WARNING)
       (:ERROR-MESSAGE . "undefined function: FIND-SYS")
       (:FORM . "(DEFUN ORDERED-DEP-TREE (DEP-TREE)
  (MAPCAR
   (LAMBDA (D)
     (SLOT-VALUE (FIND-SYS (CAR D)) 'ASDF/COMPONENT:SIDEWAY-DEPENDENCIES))
   DEP-TREE))")))))
   (:STDOUT . ""))))
((5141 59122 984844000) :INSERT
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree) 
  (mapcar (lambda (d) (slot-value (asdf/system:find-system (car d)) 'asdf/component:sideway-dependencies)) dep-tree))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 59122 984850000) :INSERT
 (83 :VALUE
  ((:RESULT
    ((CONS "(NIL NIL (:CL-PPCRE :ANAPHORA :NAMED-READTABLES) NIL
 (#:ALEXANDRIA #:ANAPHORA #:LOCAL-TIME #:OPTIMA #:CL-FAD) (:CL-FAD)
 (#:ALEXANDRIA #:ANAPHORA #:CL-BASE64 #:CL-PPCRE #:CL-JSON #:BORDEAUX-THREADS
  #:CL-FAD #:USOCKET #:CL-PPCRE #:OPTIMA #:FLEXI-STREAMS)
 (:TRIVIAL-GRAY-STREAMS) NIL (:ALEXANDRIA :CLOSER-MOP) NIL (:SB-BSD-SOCKETS)
 NIL (:SB-POSIX :BORDEAUX-THREADS :ALEXANDRIA) NIL (:ALEXANDRIA) NIL NIL NIL
 NIL NIL)")))
   (:STDOUT . ""))))
((5141 59225 932153000) :DELETE
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
             (->key (s) (intern (if (stringp s) (string-upcase s) (symbol-name s)) :keyword))
		     (rec (sys) 
		       (loop with deps = (slot-value (find-sys sys) 'asdf/component:sideway-dependencies)
                  for dep in deps for dep-k = (->key dep)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew (->key sys) (gethash dep-k res)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 59225 932176000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:PARENSCRIPT :CL-NOTEBOOK)
 (:NAMED-READTABLES :PARENSCRIPT) (:FACT-BASE :CL-NOTEBOOK)
 (:LOCAL-TIME :FACT-BASE) (:HOUSE :CL-NOTEBOOK) (:FLEXI-STREAMS :HOUSE)
 (:TRIVIAL-GRAY-STREAMS :FLEXI-STREAMS) (:OPTIMA :FACT-BASE :HOUSE)
 (:CLOSER-MOP :CL-NOTEBOOK :OPTIMA) (:USOCKET :HOUSE)
 (:SB-BSD-SOCKETS :USOCKET) (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE)
 (:SB-POSIX :CL-FAD) (:BORDEAUX-THREADS :CL-FAD :HOUSE) (:CL-JSON :HOUSE)
 (:CL-PPCRE :PARENSCRIPT :HOUSE) (:CL-BASE64 :HOUSE)
 (:ANAPHORA :PARENSCRIPT :FACT-BASE :HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA :FACT-BASE :OPTIMA :CL-FAD :BORDEAUX-THREADS :HOUSE :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 59225 932184000) :INSERT
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependencies-of ((system symbol))
  (slot-value (asdf/system:find-system system) 'asdf/component:sideway-dependencies))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
             (->key (s) (intern (if (stringp s) (string-upcase s) (symbol-name s)) :keyword))
		     (rec (sys) 
		       (loop with deps = (dependencies-of sys)
                  for dep in deps for dep-k = (->key dep)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew (->key sys) (gethash dep-k res)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 59225 932192000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((STANDARD-GENERIC-FUNCTION
      "#<STANDARD-GENERIC-FUNCTION DEPENDENCY-TREE (1)>"))
    ((ERROR
      ((ERROR-TYPE . SB-EXT:IMPLICIT-GENERIC-FUNCTION-WARNING)
       (:FORM . "(DEFMETHOD DEPENDENCIES-OF ((SYSTEM SYMBOL))
  (SLOT-VALUE (ASDF/SYSTEM:FIND-SYSTEM SYSTEM)
              'ASDF/COMPONENT:SIDEWAY-DEPENDENCIES))")
       (:NAME . DEPENDENCIES-OF)))))
   (:STDOUT . ""))))
((5141 59258 983059000) :DELETE
 (75 :CONTENTS "(defgeneric dependency-tree (system))

(defmethod dependencies-of ((system symbol))
  (slot-value (asdf/system:find-system system) 'asdf/component:sideway-dependencies))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
             (->key (s) (intern (if (stringp s) (string-upcase s) (symbol-name s)) :keyword))
		     (rec (sys) 
		       (loop with deps = (dependencies-of sys)
                  for dep in deps for dep-k = (->key dep)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew (->key sys) (gethash dep-k res)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 59258 983094000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((STANDARD-GENERIC-FUNCTION
      "#<STANDARD-GENERIC-FUNCTION DEPENDENCY-TREE (1)>"))
    ((ERROR
      ((ERROR-TYPE . SB-EXT:IMPLICIT-GENERIC-FUNCTION-WARNING)
       (:FORM . "(DEFMETHOD DEPENDENCIES-OF ((SYSTEM SYMBOL))
  (SLOT-VALUE (ASDF/SYSTEM:FIND-SYSTEM SYSTEM)
              'ASDF/COMPONENT:SIDEWAY-DEPENDENCIES))")
       (:NAME . DEPENDENCIES-OF)))))
   (:STDOUT . ""))))
((5141 59258 983099000) :INSERT
 (75 :CONTENTS "(defgeneric dependencies-of (system))

(defmethod dependencies-of ((system symbol))
  (slot-value (asdf/system:find-system system) 'asdf/component:sideway-dependencies))

(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
             (->key (s) (intern (if (stringp s) (string-upcase s) (symbol-name s)) :keyword))
		     (rec (sys) 
		       (loop with deps = (dependencies-of sys)
                  for dep in deps for dep-k = (->key dep)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew (->key sys) (gethash dep-k res)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 59258 983108000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:PARENSCRIPT :CL-NOTEBOOK)
 (:NAMED-READTABLES :PARENSCRIPT) (:FACT-BASE :CL-NOTEBOOK)
 (:LOCAL-TIME :FACT-BASE) (:HOUSE :CL-NOTEBOOK) (:FLEXI-STREAMS :HOUSE)
 (:TRIVIAL-GRAY-STREAMS :FLEXI-STREAMS) (:OPTIMA :FACT-BASE :HOUSE)
 (:CLOSER-MOP :CL-NOTEBOOK :OPTIMA) (:USOCKET :HOUSE)
 (:SB-BSD-SOCKETS :USOCKET) (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE)
 (:SB-POSIX :CL-FAD) (:BORDEAUX-THREADS :CL-FAD :HOUSE) (:CL-JSON :HOUSE)
 (:CL-PPCRE :PARENSCRIPT :HOUSE) (:CL-BASE64 :HOUSE)
 (:ANAPHORA :PARENSCRIPT :FACT-BASE :HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA :FACT-BASE :OPTIMA :CL-FAD :BORDEAUX-THREADS :HOUSE :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 59273 335153000) :DELETE
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree) 
  (mapcar (lambda (d) (slot-value (asdf/system:find-system (car d)) 'asdf/component:sideway-dependencies)) dep-tree))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 59273 335172000) :DELETE
 (83 :VALUE
  ((:RESULT
    ((CONS "(NIL NIL (:CL-PPCRE :ANAPHORA :NAMED-READTABLES) NIL
 (#:ALEXANDRIA #:ANAPHORA #:LOCAL-TIME #:OPTIMA #:CL-FAD) (:CL-FAD)
 (#:ALEXANDRIA #:ANAPHORA #:CL-BASE64 #:CL-PPCRE #:CL-JSON #:BORDEAUX-THREADS
  #:CL-FAD #:USOCKET #:CL-PPCRE #:OPTIMA #:FLEXI-STREAMS)
 (:TRIVIAL-GRAY-STREAMS) NIL (:ALEXANDRIA :CLOSER-MOP) NIL (:SB-BSD-SOCKETS)
 NIL (:SB-POSIX :BORDEAUX-THREADS :ALEXANDRIA) NIL (:ALEXANDRIA) NIL NIL NIL
 NIL NIL)")))
   (:STDOUT . ""))))
((5141 59273 335180000) :INSERT
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree) 
  (mapcar #'dependencies-of dep-tree))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 59273 335185000) :INSERT
 (83 :VALUE
  ((:RESULT ((SYMBOL "ORDERED-DEP-TREE"))
    ((ERROR
      ((ERROR-TYPE . SIMPLE-ERROR)
       (:ERROR-MESSAGE . "There is no applicable method for the generic function
  #<STANDARD-GENERIC-FUNCTION DEPENDENCIES-OF (1)>
when called with arguments
  ((:CL-CSS :CL-NOTEBOOK)).")
       (:FORM . "(ORDERED-DEP-TREE (DEPENDENCY-TREE :CL-NOTEBOOK))")))))
   (:STDOUT . ""))))
((5141 59293 984383000) :DELETE
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree) 
  (mapcar #'dependencies-of dep-tree))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 59293 984399000) :DELETE
 (83 :VALUE
  ((:RESULT ((SYMBOL "ORDERED-DEP-TREE"))
    ((ERROR
      ((ERROR-TYPE . SIMPLE-ERROR)
       (:ERROR-MESSAGE . "There is no applicable method for the generic function
  #<STANDARD-GENERIC-FUNCTION DEPENDENCIES-OF (1)>
when called with arguments
  ((:CL-CSS :CL-NOTEBOOK)).")
       (:FORM . "(ORDERED-DEP-TREE (DEPENDENCY-TREE :CL-NOTEBOOK))")))))
   (:STDOUT . ""))))
((5141 59293 984405000) :INSERT
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree) 
  (mapcar (lambda (d) (dependencies-of (car d))) dep-tree))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 59293 984410000) :INSERT
 (83 :VALUE
  ((:RESULT
    ((CONS "(NIL NIL (:CL-PPCRE :ANAPHORA :NAMED-READTABLES) NIL
 (#:ALEXANDRIA #:ANAPHORA #:LOCAL-TIME #:OPTIMA #:CL-FAD) (:CL-FAD)
 (#:ALEXANDRIA #:ANAPHORA #:CL-BASE64 #:CL-PPCRE #:CL-JSON #:BORDEAUX-THREADS
  #:CL-FAD #:USOCKET #:CL-PPCRE #:OPTIMA #:FLEXI-STREAMS)
 (:TRIVIAL-GRAY-STREAMS) NIL (:ALEXANDRIA :CLOSER-MOP) NIL (:SB-BSD-SOCKETS)
 NIL (:SB-POSIX :BORDEAUX-THREADS :ALEXANDRIA) NIL (:ALEXANDRIA) NIL NIL NIL
 NIL NIL)")))
   (:STDOUT . ""))))
((5141 59410 143925000) :DELETE
 (75 :CONTENTS "(defgeneric dependencies-of (system))

(defmethod dependencies-of ((system symbol))
  (slot-value (asdf/system:find-system system) 'asdf/component:sideway-dependencies))

(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
             (->key (s) (intern (if (stringp s) (string-upcase s) (symbol-name s)) :keyword))
		     (rec (sys) 
		       (loop with deps = (dependencies-of sys)
                  for dep in deps for dep-k = (->key dep)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew (->key sys) (gethash dep-k res)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 59410 143949000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:PARENSCRIPT :CL-NOTEBOOK)
 (:NAMED-READTABLES :PARENSCRIPT) (:FACT-BASE :CL-NOTEBOOK)
 (:LOCAL-TIME :FACT-BASE) (:HOUSE :CL-NOTEBOOK) (:FLEXI-STREAMS :HOUSE)
 (:TRIVIAL-GRAY-STREAMS :FLEXI-STREAMS) (:OPTIMA :FACT-BASE :HOUSE)
 (:CLOSER-MOP :CL-NOTEBOOK :OPTIMA) (:USOCKET :HOUSE)
 (:SB-BSD-SOCKETS :USOCKET) (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE)
 (:SB-POSIX :CL-FAD) (:BORDEAUX-THREADS :CL-FAD :HOUSE) (:CL-JSON :HOUSE)
 (:CL-PPCRE :PARENSCRIPT :HOUSE) (:CL-BASE64 :HOUSE)
 (:ANAPHORA :PARENSCRIPT :FACT-BASE :HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA :FACT-BASE :OPTIMA :CL-FAD :BORDEAUX-THREADS :HOUSE :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 59410 143957000) :INSERT
 (75 :CONTENTS "(defgeneric ->key (thing))
(defmethod ->key ((thing string))
  (intern (string-upcase thing) :keyword))
(defmethod ->key ((thing symbol))
  (if (keywordp thing)
      thing
  	  (intern (symbol-name thing) :keyword)))

(defgeneric dependencies-of (system))

(defmethod dependencies-of ((system symbol))
  (loop for dep in (slot-value (asdf/system:find-system system) 'asdf/component:sideway-dependencies))

(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
             (->key (s) (intern (if (stringp s) (string-upcase s) (symbol-name s)) :keyword))
		     (rec (sys) 
		       (loop with deps = (dependencies-of sys)
                  for dep in deps for dep-k = (->key dep)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew (->key sys) (gethash dep-k res)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 59410 143967000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((STANDARD-GENERIC-FUNCTION "#<STANDARD-GENERIC-FUNCTION ->KEY (0)>"))
    ((STANDARD-METHOD "#<STANDARD-METHOD ->KEY (STRING) {1004C2D343}>"))
    ((STANDARD-METHOD "#<STANDARD-METHOD ->KEY (SYMBOL) {1004C7A7D3}>"))
    ((STANDARD-GENERIC-FUNCTION
      "#<STANDARD-GENERIC-FUNCTION DEPENDENCIES-OF (1)>"))
    ((ERROR ((ERROR-TYPE . END-OF-FILE)))))
   (:STDOUT . ""))))
((5141 59449 922312000) :DELETE
 (75 :CONTENTS "(defgeneric ->key (thing))
(defmethod ->key ((thing string))
  (intern (string-upcase thing) :keyword))
(defmethod ->key ((thing symbol))
  (if (keywordp thing)
      thing
  	  (intern (symbol-name thing) :keyword)))

(defgeneric dependencies-of (system))

(defmethod dependencies-of ((system symbol))
  (loop for dep in (slot-value (asdf/system:find-system system) 'asdf/component:sideway-dependencies))

(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
             (->key (s) (intern (if (stringp s) (string-upcase s) (symbol-name s)) :keyword))
		     (rec (sys) 
		       (loop with deps = (dependencies-of sys)
                  for dep in deps for dep-k = (->key dep)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew (->key sys) (gethash dep-k res)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 59449 922341000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((STANDARD-GENERIC-FUNCTION "#<STANDARD-GENERIC-FUNCTION ->KEY (0)>"))
    ((STANDARD-METHOD "#<STANDARD-METHOD ->KEY (STRING) {1004C2D343}>"))
    ((STANDARD-METHOD "#<STANDARD-METHOD ->KEY (SYMBOL) {1004C7A7D3}>"))
    ((STANDARD-GENERIC-FUNCTION
      "#<STANDARD-GENERIC-FUNCTION DEPENDENCIES-OF (1)>"))
    ((ERROR ((ERROR-TYPE . END-OF-FILE)))))
   (:STDOUT . ""))))
((5141 59449 922347000) :INSERT
 (75 :CONTENTS "(defgeneric ->key (thing))

(defmethod ->key ((thing string))
  (intern (string-upcase thing) :keyword))

(defmethod ->key ((thing symbol))
  (if (keywordp thing)
      thing
  	  (intern (symbol-name thing) :keyword)))

(defgeneric dependencies-of (system))

(defmethod dependencies-of ((system symbol))
  (mapcar #'->key (slot-value (asdf/system:find-system system) 'asdf/component:sideway-dependencies)))

(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
             (->key (s) (intern (if (stringp s) (string-upcase s) (symbol-name s)) :keyword))
		     (rec (sys) 
		       (loop with deps = (dependencies-of sys)
                  for dep in deps for dep-k = (->key dep)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew (->key sys) (gethash dep-k res)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 59449 922358000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:PARENSCRIPT :CL-NOTEBOOK)
 (:NAMED-READTABLES :PARENSCRIPT) (:FACT-BASE :CL-NOTEBOOK)
 (:LOCAL-TIME :FACT-BASE) (:HOUSE :CL-NOTEBOOK) (:FLEXI-STREAMS :HOUSE)
 (:TRIVIAL-GRAY-STREAMS :FLEXI-STREAMS) (:OPTIMA :FACT-BASE :HOUSE)
 (:CLOSER-MOP :CL-NOTEBOOK :OPTIMA) (:USOCKET :HOUSE)
 (:SB-BSD-SOCKETS :USOCKET) (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE)
 (:SB-POSIX :CL-FAD) (:BORDEAUX-THREADS :CL-FAD :HOUSE) (:CL-JSON :HOUSE)
 (:CL-PPCRE :PARENSCRIPT :HOUSE) (:CL-BASE64 :HOUSE)
 (:ANAPHORA :PARENSCRIPT :FACT-BASE :HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA :FACT-BASE :OPTIMA :CL-FAD :BORDEAUX-THREADS :HOUSE :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 59493 298641000) :DELETE
 (75 :CONTENTS "(defgeneric ->key (thing))

(defmethod ->key ((thing string))
  (intern (string-upcase thing) :keyword))

(defmethod ->key ((thing symbol))
  (if (keywordp thing)
      thing
  	  (intern (symbol-name thing) :keyword)))

(defgeneric dependencies-of (system))

(defmethod dependencies-of ((system symbol))
  (mapcar #'->key (slot-value (asdf/system:find-system system) 'asdf/component:sideway-dependencies)))

(defgeneric dependency-tree (system))

(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((find-sys (sys-name) (asdf/system:find-system sys-name))
             (->key (s) (intern (if (stringp s) (string-upcase s) (symbol-name s)) :keyword))
		     (rec (sys) 
		       (loop with deps = (dependencies-of sys)
                  for dep in deps for dep-k = (->key dep)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew (->key sys) (gethash dep-k res)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 59493 298669000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:PARENSCRIPT :CL-NOTEBOOK)
 (:NAMED-READTABLES :PARENSCRIPT) (:FACT-BASE :CL-NOTEBOOK)
 (:LOCAL-TIME :FACT-BASE) (:HOUSE :CL-NOTEBOOK) (:FLEXI-STREAMS :HOUSE)
 (:TRIVIAL-GRAY-STREAMS :FLEXI-STREAMS) (:OPTIMA :FACT-BASE :HOUSE)
 (:CLOSER-MOP :CL-NOTEBOOK :OPTIMA) (:USOCKET :HOUSE)
 (:SB-BSD-SOCKETS :USOCKET) (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE)
 (:SB-POSIX :CL-FAD) (:BORDEAUX-THREADS :CL-FAD :HOUSE) (:CL-JSON :HOUSE)
 (:CL-PPCRE :PARENSCRIPT :HOUSE) (:CL-BASE64 :HOUSE)
 (:ANAPHORA :PARENSCRIPT :FACT-BASE :HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA :FACT-BASE :OPTIMA :CL-FAD :BORDEAUX-THREADS :HOUSE :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 59493 298674000) :INSERT
 (75 :CONTENTS "(defgeneric ->key (thing))

(defmethod ->key ((thing string))
  (intern (string-upcase thing) :keyword))

(defmethod ->key ((thing symbol))
  (if (keywordp thing)
      thing
  	  (intern (symbol-name thing) :keyword)))

(defgeneric dependencies-of (system))
(defmethod dependencies-of ((system symbol))
  (mapcar #'->key (slot-value (asdf/system:find-system system) 'asdf/component:sideway-dependencies)))


(defgeneric dependency-tree (system))
(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((rec (sys) 
		       (loop with deps = (dependencies-of sys)
                  for dep in deps for dep-k = (->key dep)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew (->key sys) (gethash dep-k res)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 59493 298684000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:PARENSCRIPT :CL-NOTEBOOK)
 (:NAMED-READTABLES :PARENSCRIPT) (:FACT-BASE :CL-NOTEBOOK)
 (:LOCAL-TIME :FACT-BASE) (:HOUSE :CL-NOTEBOOK) (:FLEXI-STREAMS :HOUSE)
 (:TRIVIAL-GRAY-STREAMS :FLEXI-STREAMS) (:OPTIMA :FACT-BASE :HOUSE)
 (:CLOSER-MOP :CL-NOTEBOOK :OPTIMA) (:USOCKET :HOUSE)
 (:SB-BSD-SOCKETS :USOCKET) (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE)
 (:SB-POSIX :CL-FAD) (:BORDEAUX-THREADS :CL-FAD :HOUSE) (:CL-JSON :HOUSE)
 (:CL-PPCRE :PARENSCRIPT :HOUSE) (:CL-BASE64 :HOUSE)
 (:ANAPHORA :PARENSCRIPT :FACT-BASE :HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA :FACT-BASE :OPTIMA :CL-FAD :BORDEAUX-THREADS :HOUSE :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 59499 513571000) :DELETE
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree) 
  (mapcar (lambda (d) (dependencies-of (car d))) dep-tree))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 59499 513589000) :DELETE
 (83 :VALUE
  ((:RESULT
    ((CONS "(NIL NIL (:CL-PPCRE :ANAPHORA :NAMED-READTABLES) NIL
 (#:ALEXANDRIA #:ANAPHORA #:LOCAL-TIME #:OPTIMA #:CL-FAD) (:CL-FAD)
 (#:ALEXANDRIA #:ANAPHORA #:CL-BASE64 #:CL-PPCRE #:CL-JSON #:BORDEAUX-THREADS
  #:CL-FAD #:USOCKET #:CL-PPCRE #:OPTIMA #:FLEXI-STREAMS)
 (:TRIVIAL-GRAY-STREAMS) NIL (:ALEXANDRIA :CLOSER-MOP) NIL (:SB-BSD-SOCKETS)
 NIL (:SB-POSIX :BORDEAUX-THREADS :ALEXANDRIA) NIL (:ALEXANDRIA) NIL NIL NIL
 NIL NIL)")))
   (:STDOUT . ""))))
((5141 59499 513597000) :INSERT
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree) 
  (mapcar (lambda (d) (dependencies-of (car d))) dep-tree))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 59499 513602000) :INSERT
 (83 :VALUE
  ((:RESULT
    ((CONS "(NIL NIL (:CL-PPCRE :ANAPHORA :NAMED-READTABLES) NIL
 (:ALEXANDRIA :ANAPHORA :LOCAL-TIME :OPTIMA :CL-FAD) (:CL-FAD)
 (:ALEXANDRIA :ANAPHORA :CL-BASE64 :CL-PPCRE :CL-JSON :BORDEAUX-THREADS :CL-FAD
  :USOCKET :CL-PPCRE :OPTIMA :FLEXI-STREAMS)
 (:TRIVIAL-GRAY-STREAMS) NIL (:ALEXANDRIA :CLOSER-MOP) NIL (:SB-BSD-SOCKETS)
 NIL (:SB-POSIX :BORDEAUX-THREADS :ALEXANDRIA) NIL (:ALEXANDRIA) NIL NIL NIL
 NIL NIL)")))
   (:STDOUT . ""))))
((5141 59570 20180000) :DELETE
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree) 
  (mapcar (lambda (d) (dependencies-of (car d))) dep-tree))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 59570 20197000) :DELETE
 (83 :VALUE
  ((:RESULT
    ((CONS "(NIL NIL (:CL-PPCRE :ANAPHORA :NAMED-READTABLES) NIL
 (:ALEXANDRIA :ANAPHORA :LOCAL-TIME :OPTIMA :CL-FAD) (:CL-FAD)
 (:ALEXANDRIA :ANAPHORA :CL-BASE64 :CL-PPCRE :CL-JSON :BORDEAUX-THREADS :CL-FAD
  :USOCKET :CL-PPCRE :OPTIMA :FLEXI-STREAMS)
 (:TRIVIAL-GRAY-STREAMS) NIL (:ALEXANDRIA :CLOSER-MOP) NIL (:SB-BSD-SOCKETS)
 NIL (:SB-POSIX :BORDEAUX-THREADS :ALEXANDRIA) NIL (:ALEXANDRIA) NIL NIL NIL
 NIL NIL)")))
   (:STDOUT . ""))))
((5141 59570 20203000) :INSERT
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (loop for (dep . callers) in dep-tree
        when (null (dependencies-of dep)) collect dep))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 59570 20208000) :INSERT
 (83 :VALUE
  ((:RESULT
    ((CONS "(:CL-CSS :CL-WHO :NAMED-READTABLES :TRIVIAL-GRAY-STREAMS :CLOSER-MOP
 :SB-BSD-SOCKETS :SB-POSIX :CL-JSON :CL-PPCRE :CL-BASE64 :ANAPHORA :ALEXANDRIA)")))
   (:STDOUT . ""))))
((5141 59628 329424000) :DELETE
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (loop for (dep . callers) in dep-tree
        when (null (dependencies-of dep)) collect dep))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 59628 329441000) :DELETE
 (83 :VALUE
  ((:RESULT
    ((CONS "(:CL-CSS :CL-WHO :NAMED-READTABLES :TRIVIAL-GRAY-STREAMS :CLOSER-MOP
 :SB-BSD-SOCKETS :SB-POSIX :CL-JSON :CL-PPCRE :CL-BASE64 :ANAPHORA :ALEXANDRIA)")))
   (:STDOUT . ""))))
((5141 59628 329451000) :INSERT
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (loop for (dep . callers) in dep-tree
        if (null (dependencies-of dep)) collect dep into zeros
        else collect dep into non-zeros
        finally (values zeros non-zeros)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 59628 329456000) :INSERT
 (83 :VALUE ((:RESULT ((NULL "NIL"))) (:STDOUT . ""))))
((5141 59636 697896000) :DELETE
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (loop for (dep . callers) in dep-tree
        if (null (dependencies-of dep)) collect dep into zeros
        else collect dep into non-zeros
        finally (values zeros non-zeros)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 59636 697915000) :DELETE
 (83 :VALUE ((:RESULT ((NULL "NIL"))) (:STDOUT . ""))))
((5141 59636 697920000) :INSERT
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (loop for (dep . callers) in dep-tree
        if (null (dependencies-of dep)) collect dep into zeros
        else collect dep into non-zeros
        finally (return (values zeros non-zeros))))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 59636 697926000) :INSERT
 (83 :VALUE
  ((:RESULT
    ((CONS "(:CL-CSS :CL-WHO :NAMED-READTABLES :TRIVIAL-GRAY-STREAMS :CLOSER-MOP
 :SB-BSD-SOCKETS :SB-POSIX :CL-JSON :CL-PPCRE :CL-BASE64 :ANAPHORA :ALEXANDRIA)")
     (CONS
      "(:PARENSCRIPT :FACT-BASE :LOCAL-TIME :HOUSE :FLEXI-STREAMS :OPTIMA :USOCKET
 :CL-FAD :BORDEAUX-THREADS)")))
   (:STDOUT . ""))))
((5141 60514 359237000) :DELETE
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (loop for (dep . callers) in dep-tree
        if (null (dependencies-of dep)) collect dep into zeros
        else collect dep into non-zeros
        finally (return (values zeros non-zeros))))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 60514 359254000) :DELETE
 (83 :VALUE
  ((:RESULT
    ((CONS "(:CL-CSS :CL-WHO :NAMED-READTABLES :TRIVIAL-GRAY-STREAMS :CLOSER-MOP
 :SB-BSD-SOCKETS :SB-POSIX :CL-JSON :CL-PPCRE :CL-BASE64 :ANAPHORA :ALEXANDRIA)")
     (CONS
      "(:PARENSCRIPT :FACT-BASE :LOCAL-TIME :HOUSE :FLEXI-STREAMS :OPTIMA :USOCKET
 :CL-FAD :BORDEAUX-THREADS)")))
   (:STDOUT . ""))))
((5141 60514 359259000) :INSERT
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
	  (loop for (dep . callers) in dep-tree
	        if (null (dependencies-of dep)) do (push dep res)
	        else collect into non-zeros
	        finally (return (values zeros non-zeros)))
      res))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 60514 359265000) :INSERT
 (83 :VALUE
  ((:RESULT
    ((ERROR
      ((ERROR-TYPE . SB-C:COMPILER-ERROR)
       (:FORM . "(DEFUN ORDERED-DEP-TREE (DEP-TREE)
  (LET ((RES))
    (LOOP FOR (DEP . CALLERS) IN DEP-TREE
          IF (NULL (DEPENDENCIES-OF DEP))
          DO (PUSH DEP RES) ELSE
          COLLECT INTO NON-ZEROS
          FINALLY (RETURN (VALUES ZEROS NON-ZEROS)))
    RES))")
       (:CONDITION
        . "#<SB-INT:SIMPLE-PROGRAM-ERROR \"~@<~A~@:_ ~A~:>\" {10037FB5D3}>")))))
   (:STDOUT . ""))))
((5141 60515 860595000) :DELETE
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
	  (loop for (dep . callers) in dep-tree
	        if (null (dependencies-of dep)) do (push dep res)
	        else collect into non-zeros
	        finally (return (values zeros non-zeros)))
      res))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 60515 860612000) :DELETE
 (83 :VALUE
  ((:RESULT
    ((ERROR
      ((ERROR-TYPE . SB-C:COMPILER-ERROR)
       (:FORM . "(DEFUN ORDERED-DEP-TREE (DEP-TREE)
  (LET ((RES))
    (LOOP FOR (DEP . CALLERS) IN DEP-TREE
          IF (NULL (DEPENDENCIES-OF DEP))
          DO (PUSH DEP RES) ELSE
          COLLECT INTO NON-ZEROS
          FINALLY (RETURN (VALUES ZEROS NON-ZEROS)))
    RES))")
       (:CONDITION
        . "#<SB-INT:SIMPLE-PROGRAM-ERROR \"~@<~A~@:_ ~A~:>\" {10037FB5D3}>")))))
   (:STDOUT . ""))))
((5141 60515 860617000) :INSERT
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
	  (loop for (dep . callers) in dep-tree
	        if (null (dependencies-of dep)) do (push dep res)
	        else collect into non-zeros
	        finally (return (values zeros non-zeros)))
      res))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 60515 860623000) :INSERT
 (83 :VALUE
  ((:RESULT
    ((ERROR
      ((ERROR-TYPE . SB-C:COMPILER-ERROR)
       (:FORM . "(DEFUN ORDERED-DEP-TREE (DEP-TREE)
  (LET ((RES))
    (LOOP FOR (DEP . CALLERS) IN DEP-TREE
          IF (NULL (DEPENDENCIES-OF DEP))
          DO (PUSH DEP RES) ELSE
          COLLECT INTO NON-ZEROS
          FINALLY (RETURN (VALUES ZEROS NON-ZEROS)))
    RES))")
       (:CONDITION
        . "#<SB-INT:SIMPLE-PROGRAM-ERROR \"~@<~A~@:_ ~A~:>\" {1008122333}>")))))
   (:STDOUT . ""))))
((5141 60517 886419000) :DELETE
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
	  (loop for (dep . callers) in dep-tree
	        if (null (dependencies-of dep)) do (push dep res)
	        else collect into non-zeros
	        finally (return (values zeros non-zeros)))
      res))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 60517 886436000) :DELETE
 (83 :VALUE
  ((:RESULT
    ((ERROR
      ((ERROR-TYPE . SB-C:COMPILER-ERROR)
       (:FORM . "(DEFUN ORDERED-DEP-TREE (DEP-TREE)
  (LET ((RES))
    (LOOP FOR (DEP . CALLERS) IN DEP-TREE
          IF (NULL (DEPENDENCIES-OF DEP))
          DO (PUSH DEP RES) ELSE
          COLLECT INTO NON-ZEROS
          FINALLY (RETURN (VALUES ZEROS NON-ZEROS)))
    RES))")
       (:CONDITION
        . "#<SB-INT:SIMPLE-PROGRAM-ERROR \"~@<~A~@:_ ~A~:>\" {1008122333}>")))))
   (:STDOUT . ""))))
((5141 60517 886442000) :INSERT
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
	  (loop for (dep . callers) in dep-tree
	        if (null (dependencies-of dep)) do (push dep res)
	        else collect into non-zeros
	        finally (return (values zeros non-zeros)))
      res))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 60517 886447000) :INSERT
 (83 :VALUE
  ((:RESULT
    ((ERROR
      ((ERROR-TYPE . SB-C:COMPILER-ERROR)
       (:FORM . "(DEFUN ORDERED-DEP-TREE (DEP-TREE)
  (LET ((RES))
    (LOOP FOR (DEP . CALLERS) IN DEP-TREE
          IF (NULL (DEPENDENCIES-OF DEP))
          DO (PUSH DEP RES) ELSE
          COLLECT INTO NON-ZEROS
          FINALLY (RETURN (VALUES ZEROS NON-ZEROS)))
    RES))")
       (:CONDITION
        . "#<SB-INT:SIMPLE-PROGRAM-ERROR \"~@<~A~@:_ ~A~:>\" {100378EBF3}>")))))
   (:STDOUT . ""))))
((5141 60522 241291000) :DELETE
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
	  (loop for (dep . callers) in dep-tree
	        if (null (dependencies-of dep)) do (push dep res)
	        else collect into non-zeros
	        finally (return (values zeros non-zeros)))
      res))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 60522 241308000) :DELETE
 (83 :VALUE
  ((:RESULT
    ((ERROR
      ((ERROR-TYPE . SB-C:COMPILER-ERROR)
       (:FORM . "(DEFUN ORDERED-DEP-TREE (DEP-TREE)
  (LET ((RES))
    (LOOP FOR (DEP . CALLERS) IN DEP-TREE
          IF (NULL (DEPENDENCIES-OF DEP))
          DO (PUSH DEP RES) ELSE
          COLLECT INTO NON-ZEROS
          FINALLY (RETURN (VALUES ZEROS NON-ZEROS)))
    RES))")
       (:CONDITION
        . "#<SB-INT:SIMPLE-PROGRAM-ERROR \"~@<~A~@:_ ~A~:>\" {1009DD95F3}>")))))
   (:STDOUT . ""))))
((5141 60522 241314000) :INSERT
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
	  (loop for (dep . callers) in dep-tree
	        if (null (dependencies-of dep)) do (push dep res)
	        else collect into non-zeros
	        finally (return (values zeros non-zeros)))
      res))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 60522 241319000) :INSERT
 (83 :VALUE
  ((:RESULT
    ((ERROR
      ((ERROR-TYPE . SB-C:COMPILER-ERROR)
       (:FORM . "(DEFUN ORDERED-DEP-TREE (DEP-TREE)
  (LET ((RES))
    (LOOP FOR (DEP . CALLERS) IN DEP-TREE
          IF (NULL (DEPENDENCIES-OF DEP))
          DO (PUSH DEP RES) ELSE
          COLLECT INTO NON-ZEROS
          FINALLY (RETURN (VALUES ZEROS NON-ZEROS)))
    RES))")
       (:CONDITION
        . "#<SB-INT:SIMPLE-PROGRAM-ERROR \"~@<~A~@:_ ~A~:>\" {10052B3833}>")))))
   (:STDOUT . ""))))
((5141 60552 900509000) :DELETE
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
	  (loop for (dep . callers) in dep-tree
	        if (null (dependencies-of dep)) do (push dep res)
	        else collect into non-zeros
	        finally (return (values zeros non-zeros)))
      res))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 60552 900528000) :DELETE
 (83 :VALUE
  ((:RESULT
    ((ERROR
      ((ERROR-TYPE . SB-C:COMPILER-ERROR)
       (:FORM . "(DEFUN ORDERED-DEP-TREE (DEP-TREE)
  (LET ((RES))
    (LOOP FOR (DEP . CALLERS) IN DEP-TREE
          IF (NULL (DEPENDENCIES-OF DEP))
          DO (PUSH DEP RES) ELSE
          COLLECT INTO NON-ZEROS
          FINALLY (RETURN (VALUES ZEROS NON-ZEROS)))
    RES))")
       (:CONDITION
        . "#<SB-INT:SIMPLE-PROGRAM-ERROR \"~@<~A~@:_ ~A~:>\" {10052B3833}>")))))
   (:STDOUT . ""))))
((5141 60552 900533000) :INSERT
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
	  (loop for (dep . callers) in dep-tree
	        if (null (dependencies-of dep)) do (push dep res)
	        else collect (cons dep callers) into non-zeros
	        finally (return (values zeros non-zeros)))
      res))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 60552 900539000) :INSERT
 (83 :VALUE
  ((:RESULT
    ((ERROR
      ((ERROR-TYPE . SIMPLE-WARNING)
       (:ERROR-MESSAGE . "undefined variable: ZEROS")
       (:FORM . "(DEFUN ORDERED-DEP-TREE (DEP-TREE)
  (LET ((RES))
    (LOOP FOR (DEP . CALLERS) IN DEP-TREE
          IF (NULL (DEPENDENCIES-OF DEP))
          DO (PUSH DEP RES) ELSE
          COLLECT (CONS DEP CALLERS) INTO NON-ZEROS
          FINALLY (RETURN (VALUES ZEROS NON-ZEROS)))
    RES))")))))
   (:STDOUT . ""))))
((5141 60569 813077000) :DELETE
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
	  (loop for (dep . callers) in dep-tree
	        if (null (dependencies-of dep)) do (push dep res)
	        else collect (cons dep callers) into non-zeros
	        finally (return (values zeros non-zeros)))
      res))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 60569 813096000) :DELETE
 (83 :VALUE
  ((:RESULT
    ((ERROR
      ((ERROR-TYPE . SIMPLE-WARNING)
       (:ERROR-MESSAGE . "undefined variable: ZEROS")
       (:FORM . "(DEFUN ORDERED-DEP-TREE (DEP-TREE)
  (LET ((RES))
    (LOOP FOR (DEP . CALLERS) IN DEP-TREE
          IF (NULL (DEPENDENCIES-OF DEP))
          DO (PUSH DEP RES) ELSE
          COLLECT (CONS DEP CALLERS) INTO NON-ZEROS
          FINALLY (RETURN (VALUES ZEROS NON-ZEROS)))
    RES))")))))
   (:STDOUT . ""))))
((5141 60569 813102000) :INSERT
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
	  (loop for (dep . callers) in dep-tree
	        if (null (dependencies-of dep)) do (push dep res)
	        else collect (cons dep callers) into non-zeros)
      res))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 60569 813107000) :INSERT
 (83 :VALUE
  ((:RESULT
    ((CONS
      "(:ALEXANDRIA :ANAPHORA :CL-BASE64 :CL-PPCRE :CL-JSON :SB-POSIX :SB-BSD-SOCKETS
 :CLOSER-MOP :TRIVIAL-GRAY-STREAMS :NAMED-READTABLES :CL-WHO :CL-CSS)")))
   (:STDOUT . ""))))
((5141 60594 695868000) :DELETE
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
	  (loop for (dep . callers) in dep-tree
	        if (null (dependencies-of dep)) do (push dep res)
	        else collect (cons dep callers) into non-zeros)
      res))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 60594 695886000) :DELETE
 (83 :VALUE
  ((:RESULT
    ((CONS
      "(:ALEXANDRIA :ANAPHORA :CL-BASE64 :CL-PPCRE :CL-JSON :SB-POSIX :SB-BSD-SOCKETS
 :CLOSER-MOP :TRIVIAL-GRAY-STREAMS :NAMED-READTABLES :CL-WHO :CL-CSS)")))
   (:STDOUT . ""))))
((5141 60594 695892000) :INSERT
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
	  (loop for (dep . callers) in dep-tree
	        if (null (dependencies-of dep)) do (push dep res)
	        else collect (cons dep callers) into non-zeros)
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 60594 695898000) :INSERT
 (83 :VALUE
  ((:RESULT
    ((CONS "(:CL-CSS :CL-WHO :NAMED-READTABLES :TRIVIAL-GRAY-STREAMS :CLOSER-MOP
 :SB-BSD-SOCKETS :SB-POSIX :CL-JSON :CL-PPCRE :CL-BASE64 :ANAPHORA :ALEXANDRIA)")))
   (:STDOUT . ""))))
((5141 60628 266860000) :DELETE
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
	  (loop for (dep . callers) in dep-tree
	        if (null (dependencies-of dep)) do (push dep res)
	        else collect (cons dep callers) into non-zeros)
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 60628 266878000) :DELETE
 (83 :VALUE
  ((:RESULT
    ((CONS "(:CL-CSS :CL-WHO :NAMED-READTABLES :TRIVIAL-GRAY-STREAMS :CLOSER-MOP
 :SB-BSD-SOCKETS :SB-POSIX :CL-JSON :CL-PPCRE :CL-BASE64 :ANAPHORA :ALEXANDRIA)")))
   (:STDOUT . ""))))
((5141 60628 266884000) :INSERT
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
	  (loop for (dep . callers) in dep-tree
	        if (null (dependencies-of dep)) do (push dep res)
	        else collect (cons dep callers) into non-zeros
            finally (loop for dep in non-zeros
                          do (push dep res)))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 60628 266890000) :INSERT
 (83 :VALUE
  ((:RESULT
    ((CONS "(:CL-CSS :CL-WHO :NAMED-READTABLES :TRIVIAL-GRAY-STREAMS :CLOSER-MOP
 :SB-BSD-SOCKETS :SB-POSIX :CL-JSON :CL-PPCRE :CL-BASE64 :ANAPHORA :ALEXANDRIA
 (:PARENSCRIPT :CL-NOTEBOOK) (:FACT-BASE :CL-NOTEBOOK) (:LOCAL-TIME :FACT-BASE)
 (:HOUSE :CL-NOTEBOOK) (:FLEXI-STREAMS :HOUSE) (:OPTIMA :FACT-BASE :HOUSE)
 (:USOCKET :HOUSE) (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE)
 (:BORDEAUX-THREADS :CL-FAD :HOUSE))")))
   (:STDOUT . ""))))
((5141 60641 493228000) :DELETE
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
	  (loop for (dep . callers) in dep-tree
	        if (null (dependencies-of dep)) do (push dep res)
	        else collect (cons dep callers) into non-zeros
            finally (loop for dep in non-zeros
                          do (push dep res)))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 60641 493247000) :DELETE
 (83 :VALUE
  ((:RESULT
    ((CONS "(:CL-CSS :CL-WHO :NAMED-READTABLES :TRIVIAL-GRAY-STREAMS :CLOSER-MOP
 :SB-BSD-SOCKETS :SB-POSIX :CL-JSON :CL-PPCRE :CL-BASE64 :ANAPHORA :ALEXANDRIA
 (:PARENSCRIPT :CL-NOTEBOOK) (:FACT-BASE :CL-NOTEBOOK) (:LOCAL-TIME :FACT-BASE)
 (:HOUSE :CL-NOTEBOOK) (:FLEXI-STREAMS :HOUSE) (:OPTIMA :FACT-BASE :HOUSE)
 (:USOCKET :HOUSE) (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE)
 (:BORDEAUX-THREADS :CL-FAD :HOUSE))")))
   (:STDOUT . ""))))
((5141 60641 493253000) :INSERT
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
	  (loop for (dep . callers) in dep-tree
	        if (null (dependencies-of dep)) do (push dep res)
	        else collect (cons dep callers) into non-zeros
            finally (loop for (dep . callers) in non-zeros
                          do (push dep res)))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 60641 493259000) :INSERT
 (83 :VALUE
  ((:RESULT
    ((CONS "(:CL-CSS :CL-WHO :NAMED-READTABLES :TRIVIAL-GRAY-STREAMS :CLOSER-MOP
 :SB-BSD-SOCKETS :SB-POSIX :CL-JSON :CL-PPCRE :CL-BASE64 :ANAPHORA :ALEXANDRIA
 :PARENSCRIPT :FACT-BASE :LOCAL-TIME :HOUSE :FLEXI-STREAMS :OPTIMA :USOCKET
 :CL-FAD :BORDEAUX-THREADS)")))
   (:STDOUT . ""))))
((5141 61116 209180000) :DELETE
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
	  (loop for (dep . callers) in dep-tree
	        if (null (dependencies-of dep)) do (push dep res)
	        else collect (cons dep callers) into non-zeros
            finally (loop for (dep . callers) in non-zeros
                          do (push dep res)))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 61116 209203000) :DELETE
 (83 :VALUE
  ((:RESULT
    ((CONS "(:CL-CSS :CL-WHO :NAMED-READTABLES :TRIVIAL-GRAY-STREAMS :CLOSER-MOP
 :SB-BSD-SOCKETS :SB-POSIX :CL-JSON :CL-PPCRE :CL-BASE64 :ANAPHORA :ALEXANDRIA
 :PARENSCRIPT :FACT-BASE :LOCAL-TIME :HOUSE :FLEXI-STREAMS :OPTIMA :USOCKET
 :CL-FAD :BORDEAUX-THREADS)")))
   (:STDOUT . ""))))
((5141 61116 209209000) :INSERT
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . callers) in remaining
                	  if (every #'in-res? callers) do (push dep res)
                      else collect (cons dep callers) into next-rems
                      finally (when next-rems (insert-pass next-rems)))))
	  (loop for (dep . callers) in dep-tree
	        if (null (dependencies-of dep)) do (push dep res)
	        else collect (cons dep callers) into non-zeros
            finally (insert-pass non-zeros)))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 61116 209218000) :INSERT
 (83 :VALUE
  ((:RESULT ((SYMBOL "ORDERED-DEP-TREE"))
    ((ERROR
      ((ERROR-TYPE . SB-KERNEL::CONTROL-STACK-EXHAUSTED)
       (:FORM . "(ORDERED-DEP-TREE (DEPENDENCY-TREE :CL-NOTEBOOK))")))))
   (:STDOUT . ""))))
((5141 61159 41667000) :DELETE
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . callers) in remaining
                	  if (every #'in-res? callers) do (push dep res)
                      else collect (cons dep callers) into next-rems
                      finally (when next-rems (insert-pass next-rems)))))
	  (loop for (dep . callers) in dep-tree
	        if (null (dependencies-of dep)) do (push dep res)
	        else collect (cons dep callers) into non-zeros
            finally (insert-pass non-zeros)))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 61159 41688000) :DELETE
 (83 :VALUE
  ((:RESULT ((SYMBOL "ORDERED-DEP-TREE"))
    ((ERROR
      ((ERROR-TYPE . SB-KERNEL::CONTROL-STACK-EXHAUSTED)
       (:FORM . "(ORDERED-DEP-TREE (DEPENDENCY-TREE :CL-NOTEBOOK))")))))
   (:STDOUT . ""))))
((5141 61159 41694000) :INSERT
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . callers) in remaining
                	  if (every #'in-res? callers) do (push dep res)
                      else collect (cons dep callers) into next-rems
                      finally (return rems)))
	  (loop for (dep . callers) in dep-tree
	        if (null (dependencies-of dep)) do (push dep res)
	        else collect (cons dep callers) into non-zeros
            finally (insert-pass non-zeros)))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 61159 41701000) :INSERT
 (83 :VALUE ((:RESULT ((ERROR ((ERROR-TYPE . END-OF-FILE))))) (:STDOUT . ""))))
((5141 61172 199135000) :DELETE
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . callers) in remaining
                	  if (every #'in-res? callers) do (push dep res)
                      else collect (cons dep callers) into next-rems
                      finally (return rems)))
	  (loop for (dep . callers) in dep-tree
	        if (null (dependencies-of dep)) do (push dep res)
	        else collect (cons dep callers) into non-zeros
            finally (insert-pass non-zeros)))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 61172 199157000) :DELETE
 (83 :VALUE ((:RESULT ((ERROR ((ERROR-TYPE . END-OF-FILE))))) (:STDOUT . ""))))
((5141 61172 199163000) :INSERT
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . callers) in remaining
                	  if (every #'in-res? callers) do (push dep res)
                      else collect (cons dep callers) into next-rems
                      finally (return rems))))
	  (loop for (dep . callers) in dep-tree
	        if (null (dependencies-of dep)) do (push dep res)
	        else collect (cons dep callers) into non-zeros
            finally (insert-pass non-zeros)))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 61172 199171000) :INSERT
 (83 :VALUE
  ((:RESULT
    ((ERROR
      ((ERROR-TYPE . SIMPLE-WARNING)
       (:ERROR-MESSAGE . "undefined variable: REMS")
       (:FORM . "(DEFUN ORDERED-DEP-TREE (DEP-TREE)
  (LET ((RES))
    (LABELS ((IN-RES? (DEP-NAME)
               (MEMBER DEP-NAME RES))
             (INSERT-PASS (REMAINING)
               (LOOP FOR (DEP . CALLERS) IN REMAINING
                     IF (EVERY #'IN-RES? CALLERS)
                     DO (PUSH DEP RES) ELSE
                     COLLECT (CONS DEP CALLERS) INTO NEXT-REMS
                     FINALLY (RETURN REMS))))
      (LOOP FOR (DEP . CALLERS) IN DEP-TREE
            IF (NULL (DEPENDENCIES-OF DEP))
            DO (PUSH DEP RES) ELSE
            COLLECT (CONS DEP CALLERS) INTO NON-ZEROS
            FINALLY (INSERT-PASS NON-ZEROS)))
    (REVERSE RES)))")))))
   (:STDOUT . ""))))
((5141 61181 957079000) :DELETE
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . callers) in remaining
                	  if (every #'in-res? callers) do (push dep res)
                      else collect (cons dep callers) into next-rems
                      finally (return rems))))
	  (loop for (dep . callers) in dep-tree
	        if (null (dependencies-of dep)) do (push dep res)
	        else collect (cons dep callers) into non-zeros
            finally (insert-pass non-zeros)))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 61181 957126000) :DELETE
 (83 :VALUE
  ((:RESULT
    ((ERROR
      ((ERROR-TYPE . SIMPLE-WARNING)
       (:ERROR-MESSAGE . "undefined variable: REMS")
       (:FORM . "(DEFUN ORDERED-DEP-TREE (DEP-TREE)
  (LET ((RES))
    (LABELS ((IN-RES? (DEP-NAME)
               (MEMBER DEP-NAME RES))
             (INSERT-PASS (REMAINING)
               (LOOP FOR (DEP . CALLERS) IN REMAINING
                     IF (EVERY #'IN-RES? CALLERS)
                     DO (PUSH DEP RES) ELSE
                     COLLECT (CONS DEP CALLERS) INTO NEXT-REMS
                     FINALLY (RETURN REMS))))
      (LOOP FOR (DEP . CALLERS) IN DEP-TREE
            IF (NULL (DEPENDENCIES-OF DEP))
            DO (PUSH DEP RES) ELSE
            COLLECT (CONS DEP CALLERS) INTO NON-ZEROS
            FINALLY (INSERT-PASS NON-ZEROS)))
    (REVERSE RES)))")))))
   (:STDOUT . ""))))
((5141 61181 957132000) :INSERT
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . callers) in remaining
                	  if (every #'in-res? callers) do (push dep res)
                      else collect (cons dep callers) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree
	        if (null (dependencies-of dep)) do (push dep res)
	        else collect (cons dep callers) into non-zeros
            finally (insert-pass non-zeros)))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 61181 957140000) :INSERT
 (83 :VALUE
  ((:RESULT
    ((CONS "(:CL-CSS :CL-WHO :NAMED-READTABLES :TRIVIAL-GRAY-STREAMS :CLOSER-MOP
 :SB-BSD-SOCKETS :SB-POSIX :CL-JSON :CL-PPCRE :CL-BASE64 :ANAPHORA :ALEXANDRIA)")))
   (:STDOUT . ""))))
((5141 61207 741333000) :DELETE
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . callers) in remaining
                	  if (every #'in-res? callers) do (push dep res)
                      else collect (cons dep callers) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree
	        if (null (dependencies-of dep)) do (push dep res)
	        else collect (cons dep callers) into non-zeros
            finally (insert-pass non-zeros)))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 61207 741356000) :DELETE
 (83 :VALUE
  ((:RESULT
    ((CONS "(:CL-CSS :CL-WHO :NAMED-READTABLES :TRIVIAL-GRAY-STREAMS :CLOSER-MOP
 :SB-BSD-SOCKETS :SB-POSIX :CL-JSON :CL-PPCRE :CL-BASE64 :ANAPHORA :ALEXANDRIA)")))
   (:STDOUT . ""))))
((5141 61207 741362000) :INSERT
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . callers) in remaining
                      do (format t \"Trying ~a [~s]\" dep callers)
                	  if (every #'in-res? callers) do (push dep res)
                      else collect (cons dep callers) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree
	        if (null (dependencies-of dep)) do (push dep res)
	        else collect (cons dep callers) into non-zeros
            finally (insert-pass non-zeros)))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 61207 741370000) :INSERT
 (83 :VALUE
  ((:RESULT
    ((CONS "(:CL-CSS :CL-WHO :NAMED-READTABLES :TRIVIAL-GRAY-STREAMS :CLOSER-MOP
 :SB-BSD-SOCKETS :SB-POSIX :CL-JSON :CL-PPCRE :CL-BASE64 :ANAPHORA :ALEXANDRIA)")))
   (:STDOUT
    . "Trying PARENSCRIPT [(:CL-NOTEBOOK)]Trying FACT-BASE [(:CL-NOTEBOOK)]Trying LOCAL-TIME [(:FACT-BASE)]Trying HOUSE [(:CL-NOTEBOOK)]Trying FLEXI-STREAMS [(:HOUSE)]Trying OPTIMA [(:FACT-BASE
                                                                                                                                                                                :HOUSE)]Trying USOCKET [(:HOUSE)]Trying CL-FAD [(:FACT-BASE
                                                                                                                                                                                                                                 :LOCAL-TIME
                                                                                                                                                                                                                                 :HOUSE)]Trying BORDEAUX-THREADS [(:CL-FAD
                                                                                                                                                                                                                                                                   :HOUSE)]"))))
((5141 61212 57770000) :DELETE
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . callers) in remaining
                      do (format t \"Trying ~a [~s]\" dep callers)
                	  if (every #'in-res? callers) do (push dep res)
                      else collect (cons dep callers) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree
	        if (null (dependencies-of dep)) do (push dep res)
	        else collect (cons dep callers) into non-zeros
            finally (insert-pass non-zeros)))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 61212 57794000) :DELETE
 (83 :VALUE
  ((:RESULT
    ((CONS "(:CL-CSS :CL-WHO :NAMED-READTABLES :TRIVIAL-GRAY-STREAMS :CLOSER-MOP
 :SB-BSD-SOCKETS :SB-POSIX :CL-JSON :CL-PPCRE :CL-BASE64 :ANAPHORA :ALEXANDRIA)")))
   (:STDOUT
    . "Trying PARENSCRIPT [(:CL-NOTEBOOK)]Trying FACT-BASE [(:CL-NOTEBOOK)]Trying LOCAL-TIME [(:FACT-BASE)]Trying HOUSE [(:CL-NOTEBOOK)]Trying FLEXI-STREAMS [(:HOUSE)]Trying OPTIMA [(:FACT-BASE
                                                                                                                                                                                :HOUSE)]Trying USOCKET [(:HOUSE)]Trying CL-FAD [(:FACT-BASE
                                                                                                                                                                                                                                 :LOCAL-TIME
                                                                                                                                                                                                                                 :HOUSE)]Trying BORDEAUX-THREADS [(:CL-FAD
                                                                                                                                                                                                                                                                   :HOUSE)]"))))
((5141 61212 57815000) :INSERT
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . callers) in remaining
                      do (format t \"Trying ~a [~s]~%\" dep callers)
                	  if (every #'in-res? callers) do (push dep res)
                      else collect (cons dep callers) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree
	        if (null (dependencies-of dep)) do (push dep res)
	        else collect (cons dep callers) into non-zeros
            finally (insert-pass non-zeros)))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 61212 57823000) :INSERT
 (83 :VALUE
  ((:RESULT
    ((CONS "(:CL-CSS :CL-WHO :NAMED-READTABLES :TRIVIAL-GRAY-STREAMS :CLOSER-MOP
 :SB-BSD-SOCKETS :SB-POSIX :CL-JSON :CL-PPCRE :CL-BASE64 :ANAPHORA :ALEXANDRIA)")))
   (:STDOUT . "Trying PARENSCRIPT [(:CL-NOTEBOOK)]
Trying FACT-BASE [(:CL-NOTEBOOK)]
Trying LOCAL-TIME [(:FACT-BASE)]
Trying HOUSE [(:CL-NOTEBOOK)]
Trying FLEXI-STREAMS [(:HOUSE)]
Trying OPTIMA [(:FACT-BASE :HOUSE)]
Trying USOCKET [(:HOUSE)]
Trying CL-FAD [(:FACT-BASE :LOCAL-TIME :HOUSE)]
Trying BORDEAUX-THREADS [(:CL-FAD :HOUSE)]
"))))
((5141 61241 664923000) :DELETE
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . callers) in remaining
                      do (format t \"Trying ~a [~s]~%\" dep callers)
                	  if (every #'in-res? callers) do (push dep res)
                      else collect (cons dep callers) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree
	        if (null (dependencies-of dep)) do (push dep res)
	        else collect (cons dep callers) into non-zeros
            finally (insert-pass non-zeros)))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 61241 664944000) :DELETE
 (83 :VALUE
  ((:RESULT
    ((CONS "(:CL-CSS :CL-WHO :NAMED-READTABLES :TRIVIAL-GRAY-STREAMS :CLOSER-MOP
 :SB-BSD-SOCKETS :SB-POSIX :CL-JSON :CL-PPCRE :CL-BASE64 :ANAPHORA :ALEXANDRIA)")))
   (:STDOUT . "Trying PARENSCRIPT [(:CL-NOTEBOOK)]
Trying FACT-BASE [(:CL-NOTEBOOK)]
Trying LOCAL-TIME [(:FACT-BASE)]
Trying HOUSE [(:CL-NOTEBOOK)]
Trying FLEXI-STREAMS [(:HOUSE)]
Trying OPTIMA [(:FACT-BASE :HOUSE)]
Trying USOCKET [(:HOUSE)]
Trying CL-FAD [(:FACT-BASE :LOCAL-TIME :HOUSE)]
Trying BORDEAUX-THREADS [(:CL-FAD :HOUSE)]
"))))
((5141 61241 664954000) :INSERT
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . callers) in remaining
                      do (format t \"Trying ~a [~s]~%\" dep callers)
                	  if (every #'in-res? (dependencies-of dep) do (push dep res)
                      else collect (cons dep callers) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree
	        if (null (dependencies-of dep)) do (push dep res)
	        else collect (cons dep callers) into non-zeros
            finally (insert-pass non-zeros)))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 61241 664962000) :INSERT
 (83 :VALUE ((:RESULT ((ERROR ((ERROR-TYPE . END-OF-FILE))))) (:STDOUT . ""))))
((5141 61246 734971000) :DELETE
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . callers) in remaining
                      do (format t \"Trying ~a [~s]~%\" dep callers)
                	  if (every #'in-res? (dependencies-of dep) do (push dep res)
                      else collect (cons dep callers) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree
	        if (null (dependencies-of dep)) do (push dep res)
	        else collect (cons dep callers) into non-zeros
            finally (insert-pass non-zeros)))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 61246 735020000) :DELETE
 (83 :VALUE ((:RESULT ((ERROR ((ERROR-TYPE . END-OF-FILE))))) (:STDOUT . ""))))
((5141 61246 735026000) :INSERT
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . callers) in remaining
                      do (format t \"Trying ~a [~s]~%\" dep callers)
                	  if (every #'in-res? (dependencies-of dep)) do (push dep res)
                      else collect (cons dep callers) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree
	        if (null (dependencies-of dep)) do (push dep res)
	        else collect (cons dep callers) into non-zeros
            finally (insert-pass non-zeros)))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 61246 735035000) :INSERT
 (83 :VALUE
  ((:RESULT
    ((CONS "(:CL-CSS :CL-WHO :NAMED-READTABLES :TRIVIAL-GRAY-STREAMS :CLOSER-MOP
 :SB-BSD-SOCKETS :SB-POSIX :CL-JSON :CL-PPCRE :CL-BASE64 :ANAPHORA :ALEXANDRIA
 :PARENSCRIPT :FLEXI-STREAMS :OPTIMA :USOCKET :BORDEAUX-THREADS)")))
   (:STDOUT . "Trying PARENSCRIPT [(:CL-NOTEBOOK)]
Trying FACT-BASE [(:CL-NOTEBOOK)]
Trying LOCAL-TIME [(:FACT-BASE)]
Trying HOUSE [(:CL-NOTEBOOK)]
Trying FLEXI-STREAMS [(:HOUSE)]
Trying OPTIMA [(:FACT-BASE :HOUSE)]
Trying USOCKET [(:HOUSE)]
Trying CL-FAD [(:FACT-BASE :LOCAL-TIME :HOUSE)]
Trying BORDEAUX-THREADS [(:CL-FAD :HOUSE)]
"))))
((5141 61282 828137000) :DELETE
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . callers) in remaining
                      do (format t \"Trying ~a [~s]~%\" dep callers)
                	  if (every #'in-res? (dependencies-of dep)) do (push dep res)
                      else collect (cons dep callers) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree
	        if (null (dependencies-of dep)) do (push dep res)
	        else collect (cons dep callers) into non-zeros
            finally (insert-pass non-zeros)))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 61282 828158000) :DELETE
 (83 :VALUE
  ((:RESULT
    ((CONS "(:CL-CSS :CL-WHO :NAMED-READTABLES :TRIVIAL-GRAY-STREAMS :CLOSER-MOP
 :SB-BSD-SOCKETS :SB-POSIX :CL-JSON :CL-PPCRE :CL-BASE64 :ANAPHORA :ALEXANDRIA
 :PARENSCRIPT :FLEXI-STREAMS :OPTIMA :USOCKET :BORDEAUX-THREADS)")))
   (:STDOUT . "Trying PARENSCRIPT [(:CL-NOTEBOOK)]
Trying FACT-BASE [(:CL-NOTEBOOK)]
Trying LOCAL-TIME [(:FACT-BASE)]
Trying HOUSE [(:CL-NOTEBOOK)]
Trying FLEXI-STREAMS [(:HOUSE)]
Trying OPTIMA [(:FACT-BASE :HOUSE)]
Trying USOCKET [(:HOUSE)]
Trying CL-FAD [(:FACT-BASE :LOCAL-TIME :HOUSE)]
Trying BORDEAUX-THREADS [(:CL-FAD :HOUSE)]
"))))
((5141 61282 828168000) :INSERT
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . callers) in remaining
                      do (format t \"Trying ~a [~s]~%\" dep callers)
                	  if (every #'in-res? (dependencies-of dep)) do (push dep res)
                      else collect (cons dep callers) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree
	        if (null (dependencies-of dep)) do (push dep res)
	        else collect (cons dep callers) into non-zeros
            finally (loop while non-zeros
                          do (setf non-zeros (insert-pass non-zeros))))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 61282 828176000) :INSERT
 (83 :VALUE ((:RESULT ((ERROR ((ERROR-TYPE . END-OF-FILE))))) (:STDOUT . ""))))
((5141 61293 684051000) :DELETE
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . callers) in remaining
                      do (format t \"Trying ~a [~s]~%\" dep callers)
                	  if (every #'in-res? (dependencies-of dep)) do (push dep res)
                      else collect (cons dep callers) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree
	        if (null (dependencies-of dep)) do (push dep res)
	        else collect (cons dep callers) into non-zeros
            finally (loop while non-zeros
                          do (setf non-zeros (insert-pass non-zeros))))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 61293 684076000) :DELETE
 (83 :VALUE ((:RESULT ((ERROR ((ERROR-TYPE . END-OF-FILE))))) (:STDOUT . ""))))
((5141 61293 684082000) :INSERT
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . callers) in remaining
                      do (format t \"Trying ~a [~s]~%\" dep callers)
                	  if (every #'in-res? (dependencies-of dep)) do (push dep res)
                      else collect (cons dep callers) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree
	        if (null (dependencies-of dep)) do (push dep res)
	        else collect (cons dep callers) into non-zeros
            finally (loop while non-zeros
                          do (setf non-zeros (insert-pass non-zeros)))))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 61293 684091000) :INSERT
 (83 :VALUE
  ((:RESULT
    ((CONS "(:CL-CSS :CL-WHO :NAMED-READTABLES :TRIVIAL-GRAY-STREAMS :CLOSER-MOP
 :SB-BSD-SOCKETS :SB-POSIX :CL-JSON :CL-PPCRE :CL-BASE64 :ANAPHORA :ALEXANDRIA
 :PARENSCRIPT :FLEXI-STREAMS :OPTIMA :USOCKET :BORDEAUX-THREADS :CL-FAD
 :LOCAL-TIME :HOUSE :FACT-BASE)")))
   (:STDOUT . "Trying PARENSCRIPT [(:CL-NOTEBOOK)]
Trying FACT-BASE [(:CL-NOTEBOOK)]
Trying LOCAL-TIME [(:FACT-BASE)]
Trying HOUSE [(:CL-NOTEBOOK)]
Trying FLEXI-STREAMS [(:HOUSE)]
Trying OPTIMA [(:FACT-BASE :HOUSE)]
Trying USOCKET [(:HOUSE)]
Trying CL-FAD [(:FACT-BASE :LOCAL-TIME :HOUSE)]
Trying BORDEAUX-THREADS [(:CL-FAD :HOUSE)]
Trying FACT-BASE [(:CL-NOTEBOOK)]
Trying LOCAL-TIME [(:FACT-BASE)]
Trying HOUSE [(:CL-NOTEBOOK)]
Trying CL-FAD [(:FACT-BASE :LOCAL-TIME :HOUSE)]
Trying FACT-BASE [(:CL-NOTEBOOK)]
Trying LOCAL-TIME [(:FACT-BASE)]
Trying HOUSE [(:CL-NOTEBOOK)]
Trying FACT-BASE [(:CL-NOTEBOOK)]
"))))
((5141 61501 511475000) :DELETE
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . callers) in remaining
                      do (format t \"Trying ~a [~s]~%\" dep callers)
                	  if (every #'in-res? (dependencies-of dep)) do (push dep res)
                      else collect (cons dep callers) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree
	        if (null (dependencies-of dep)) do (push dep res)
	        else collect (cons dep callers) into non-zeros
            finally (loop while non-zeros
                          do (setf non-zeros (insert-pass non-zeros)))))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 61501 511501000) :DELETE
 (83 :VALUE
  ((:RESULT
    ((CONS "(:CL-CSS :CL-WHO :NAMED-READTABLES :TRIVIAL-GRAY-STREAMS :CLOSER-MOP
 :SB-BSD-SOCKETS :SB-POSIX :CL-JSON :CL-PPCRE :CL-BASE64 :ANAPHORA :ALEXANDRIA
 :PARENSCRIPT :FLEXI-STREAMS :OPTIMA :USOCKET :BORDEAUX-THREADS :CL-FAD
 :LOCAL-TIME :HOUSE :FACT-BASE)")))
   (:STDOUT . "Trying PARENSCRIPT [(:CL-NOTEBOOK)]
Trying FACT-BASE [(:CL-NOTEBOOK)]
Trying LOCAL-TIME [(:FACT-BASE)]
Trying HOUSE [(:CL-NOTEBOOK)]
Trying FLEXI-STREAMS [(:HOUSE)]
Trying OPTIMA [(:FACT-BASE :HOUSE)]
Trying USOCKET [(:HOUSE)]
Trying CL-FAD [(:FACT-BASE :LOCAL-TIME :HOUSE)]
Trying BORDEAUX-THREADS [(:CL-FAD :HOUSE)]
Trying FACT-BASE [(:CL-NOTEBOOK)]
Trying LOCAL-TIME [(:FACT-BASE)]
Trying HOUSE [(:CL-NOTEBOOK)]
Trying CL-FAD [(:FACT-BASE :LOCAL-TIME :HOUSE)]
Trying FACT-BASE [(:CL-NOTEBOOK)]
Trying LOCAL-TIME [(:FACT-BASE)]
Trying HOUSE [(:CL-NOTEBOOK)]
Trying FACT-BASE [(:CL-NOTEBOOK)]
"))))
((5141 61501 511514000) :INSERT
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . sub-deps) in remaining
                	  if (every #'in-res? sub-deps) do (push dep res)
                      else collect (cons dep sud-deps) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree
            for deps-of = (dependencies-of dep)
	        if (null deps-of) do (push dep res)
	        else collect (cons dep deps-of) into non-zeros
            finally (loop while non-zeros
                          do (setf non-zeros (insert-pass non-zeros)))))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 61501 511522000) :INSERT
 (83 :VALUE
  ((:RESULT
    ((ERROR
      ((ERROR-TYPE . SIMPLE-WARNING)
       (:ERROR-MESSAGE . "undefined variable: SUD-DEPS")
       (:FORM . "(DEFUN ORDERED-DEP-TREE (DEP-TREE)
  (LET ((RES))
    (LABELS ((IN-RES? (DEP-NAME)
               (MEMBER DEP-NAME RES))
             (INSERT-PASS (REMAINING)
               (LOOP FOR (DEP . SUB-DEPS) IN REMAINING
                     IF (EVERY #'IN-RES? SUB-DEPS)
                     DO (PUSH DEP RES) ELSE
                     COLLECT (CONS DEP SUD-DEPS) INTO NEXT-REMS
                     FINALLY (RETURN NEXT-REMS))))
      (LOOP FOR (DEP . CALLERS) IN DEP-TREE
            FOR DEPS-OF = (DEPENDENCIES-OF DEP)
            IF (NULL DEPS-OF)
            DO (PUSH DEP RES) ELSE
            COLLECT (CONS DEP DEPS-OF) INTO NON-ZEROS
            FINALLY (LOOP WHILE NON-ZEROS
                          DO (SETF NON-ZEROS (INSERT-PASS NON-ZEROS)))))
    (REVERSE RES)))")))))
   (:STDOUT . ""))))
((5141 61507 72593000) :DELETE
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . sub-deps) in remaining
                	  if (every #'in-res? sub-deps) do (push dep res)
                      else collect (cons dep sud-deps) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree
            for deps-of = (dependencies-of dep)
	        if (null deps-of) do (push dep res)
	        else collect (cons dep deps-of) into non-zeros
            finally (loop while non-zeros
                          do (setf non-zeros (insert-pass non-zeros)))))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 61507 72618000) :DELETE
 (83 :VALUE
  ((:RESULT
    ((ERROR
      ((ERROR-TYPE . SIMPLE-WARNING)
       (:ERROR-MESSAGE . "undefined variable: SUD-DEPS")
       (:FORM . "(DEFUN ORDERED-DEP-TREE (DEP-TREE)
  (LET ((RES))
    (LABELS ((IN-RES? (DEP-NAME)
               (MEMBER DEP-NAME RES))
             (INSERT-PASS (REMAINING)
               (LOOP FOR (DEP . SUB-DEPS) IN REMAINING
                     IF (EVERY #'IN-RES? SUB-DEPS)
                     DO (PUSH DEP RES) ELSE
                     COLLECT (CONS DEP SUD-DEPS) INTO NEXT-REMS
                     FINALLY (RETURN NEXT-REMS))))
      (LOOP FOR (DEP . CALLERS) IN DEP-TREE
            FOR DEPS-OF = (DEPENDENCIES-OF DEP)
            IF (NULL DEPS-OF)
            DO (PUSH DEP RES) ELSE
            COLLECT (CONS DEP DEPS-OF) INTO NON-ZEROS
            FINALLY (LOOP WHILE NON-ZEROS
                          DO (SETF NON-ZEROS (INSERT-PASS NON-ZEROS)))))
    (REVERSE RES)))")))))
   (:STDOUT . ""))))
((5141 61507 72624000) :INSERT
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . sub-deps) in remaining
                	  if (every #'in-res? sub-deps) do (push dep res)
                      else collect (cons dep sub-deps) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree
            for deps-of = (dependencies-of dep)
	        if (null deps-of) do (push dep res)
	        else collect (cons dep deps-of) into non-zeros
            finally (loop while non-zeros
                          do (setf non-zeros (insert-pass non-zeros)))))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 61507 72633000) :INSERT
 (83 :VALUE
  ((:RESULT
    ((CONS "(:CL-CSS :CL-WHO :NAMED-READTABLES :TRIVIAL-GRAY-STREAMS :CLOSER-MOP
 :SB-BSD-SOCKETS :SB-POSIX :CL-JSON :CL-PPCRE :CL-BASE64 :ANAPHORA :ALEXANDRIA
 :PARENSCRIPT :FLEXI-STREAMS :OPTIMA :USOCKET :BORDEAUX-THREADS :CL-FAD
 :LOCAL-TIME :HOUSE :FACT-BASE)")))
   (:STDOUT . ""))))
((5141 61826 258237000) :DELETE
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . sub-deps) in remaining
                	  if (every #'in-res? sub-deps) do (push dep res)
                      else collect (cons dep sub-deps) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree
            for deps-of = (dependencies-of dep)
	        if (null deps-of) do (push dep res)
	        else collect (cons dep deps-of) into non-zeros
            finally (loop while non-zeros
                          do (setf non-zeros (insert-pass non-zeros)))))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 61826 258260000) :DELETE
 (83 :VALUE
  ((:RESULT
    ((CONS "(:CL-CSS :CL-WHO :NAMED-READTABLES :TRIVIAL-GRAY-STREAMS :CLOSER-MOP
 :SB-BSD-SOCKETS :SB-POSIX :CL-JSON :CL-PPCRE :CL-BASE64 :ANAPHORA :ALEXANDRIA
 :PARENSCRIPT :FLEXI-STREAMS :OPTIMA :USOCKET :BORDEAUX-THREADS :CL-FAD
 :LOCAL-TIME :HOUSE :FACT-BASE)")))
   (:STDOUT . ""))))
((5141 61826 258265000) :INSERT
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . sub-deps) in remaining
                      unmet-sub-deps = (remove-if #'in-res? sub-deps)
                	  if unmet-sub-daps do (push dep res)
                      else collect (cons dep unmet-sub-deps) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree for deps-of = (dependencies-of dep)
	        if (null deps-of) do (push dep res)
	        else collect (cons dep deps-of) into non-zeros
            finally (loop while non-zeros
                          do (setf non-zeros (insert-pass non-zeros)))))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 61826 258274000) :INSERT
 (83 :VALUE
  ((:RESULT
    ((ERROR
      ((ERROR-TYPE . SB-C:COMPILER-ERROR)
       (:FORM . "(DEFUN ORDERED-DEP-TREE (DEP-TREE)
  (LET ((RES))
    (LABELS ((IN-RES? (DEP-NAME)
               (MEMBER DEP-NAME RES))
             (INSERT-PASS (REMAINING)
               (LOOP FOR (DEP
                          . SUB-DEPS) IN REMAINING UNMET-SUB-DEPS = (REMOVE-IF
                                                                     #'IN-RES?
                                                                     SUB-DEPS)
                     IF UNMET-SUB-DAPS
                     DO (PUSH DEP RES) ELSE
                     COLLECT (CONS DEP UNMET-SUB-DEPS) INTO NEXT-REMS
                     FINALLY (RETURN NEXT-REMS))))
      (LOOP FOR (DEP . CALLERS) IN DEP-TREE
            FOR DEPS-OF = (DEPENDENCIES-OF DEP)
            IF (NULL DEPS-OF)
            DO (PUSH DEP RES) ELSE
            COLLECT (CONS DEP DEPS-OF) INTO NON-ZEROS
            FINALLY (LOOP WHILE NON-ZEROS
                          DO (SETF NON-ZEROS (INSERT-PASS NON-ZEROS)))))
    (REVERSE RES)))")
       (:CONDITION
        . "#<SB-INT:SIMPLE-PROGRAM-ERROR \"~@<~A~@:_ ~A~:>\" {1004E639A3}>")))))
   (:STDOUT . ""))))
((5141 61830 507778000) :DELETE
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . sub-deps) in remaining
                      unmet-sub-deps = (remove-if #'in-res? sub-deps)
                	  if unmet-sub-daps do (push dep res)
                      else collect (cons dep unmet-sub-deps) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree for deps-of = (dependencies-of dep)
	        if (null deps-of) do (push dep res)
	        else collect (cons dep deps-of) into non-zeros
            finally (loop while non-zeros
                          do (setf non-zeros (insert-pass non-zeros)))))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 61830 507802000) :DELETE
 (83 :VALUE
  ((:RESULT
    ((ERROR
      ((ERROR-TYPE . SB-C:COMPILER-ERROR)
       (:FORM . "(DEFUN ORDERED-DEP-TREE (DEP-TREE)
  (LET ((RES))
    (LABELS ((IN-RES? (DEP-NAME)
               (MEMBER DEP-NAME RES))
             (INSERT-PASS (REMAINING)
               (LOOP FOR (DEP
                          . SUB-DEPS) IN REMAINING UNMET-SUB-DEPS = (REMOVE-IF
                                                                     #'IN-RES?
                                                                     SUB-DEPS)
                     IF UNMET-SUB-DAPS
                     DO (PUSH DEP RES) ELSE
                     COLLECT (CONS DEP UNMET-SUB-DEPS) INTO NEXT-REMS
                     FINALLY (RETURN NEXT-REMS))))
      (LOOP FOR (DEP . CALLERS) IN DEP-TREE
            FOR DEPS-OF = (DEPENDENCIES-OF DEP)
            IF (NULL DEPS-OF)
            DO (PUSH DEP RES) ELSE
            COLLECT (CONS DEP DEPS-OF) INTO NON-ZEROS
            FINALLY (LOOP WHILE NON-ZEROS
                          DO (SETF NON-ZEROS (INSERT-PASS NON-ZEROS)))))
    (REVERSE RES)))")
       (:CONDITION
        . "#<SB-INT:SIMPLE-PROGRAM-ERROR \"~@<~A~@:_ ~A~:>\" {1008E95B93}>")))))
   (:STDOUT . ""))))
((5141 61830 507808000) :INSERT
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . sub-deps) in remaining
                      unmet-sub-deps = (remove-if #'in-res? sub-deps)
                	  if unmet-sub-daps do (push dep res)
                      else collect (cons dep unmet-sub-deps) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree for deps-of = (dependencies-of dep)
	        if (null deps-of) do (push dep res)
	        else collect (cons dep deps-of) into non-zeros
            finally (loop while non-zeros
                          do (setf non-zeros (insert-pass non-zeros)))))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 61830 507817000) :INSERT
 (83 :VALUE
  ((:RESULT
    ((ERROR
      ((ERROR-TYPE . SB-C:COMPILER-ERROR)
       (:FORM . "(DEFUN ORDERED-DEP-TREE (DEP-TREE)
  (LET ((RES))
    (LABELS ((IN-RES? (DEP-NAME)
               (MEMBER DEP-NAME RES))
             (INSERT-PASS (REMAINING)
               (LOOP FOR (DEP
                          . SUB-DEPS) IN REMAINING UNMET-SUB-DEPS = (REMOVE-IF
                                                                     #'IN-RES?
                                                                     SUB-DEPS)
                     IF UNMET-SUB-DAPS
                     DO (PUSH DEP RES) ELSE
                     COLLECT (CONS DEP UNMET-SUB-DEPS) INTO NEXT-REMS
                     FINALLY (RETURN NEXT-REMS))))
      (LOOP FOR (DEP . CALLERS) IN DEP-TREE
            FOR DEPS-OF = (DEPENDENCIES-OF DEP)
            IF (NULL DEPS-OF)
            DO (PUSH DEP RES) ELSE
            COLLECT (CONS DEP DEPS-OF) INTO NON-ZEROS
            FINALLY (LOOP WHILE NON-ZEROS
                          DO (SETF NON-ZEROS (INSERT-PASS NON-ZEROS)))))
    (REVERSE RES)))")
       (:CONDITION
        . "#<SB-INT:SIMPLE-PROGRAM-ERROR \"~@<~A~@:_ ~A~:>\" {1007C4E2B3}>")))))
   (:STDOUT . ""))))
((5141 61833 539340000) :DELETE
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . sub-deps) in remaining
                      unmet-sub-deps = (remove-if #'in-res? sub-deps)
                	  if unmet-sub-daps do (push dep res)
                      else collect (cons dep unmet-sub-deps) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree for deps-of = (dependencies-of dep)
	        if (null deps-of) do (push dep res)
	        else collect (cons dep deps-of) into non-zeros
            finally (loop while non-zeros
                          do (setf non-zeros (insert-pass non-zeros)))))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 61833 539365000) :DELETE
 (83 :VALUE
  ((:RESULT
    ((ERROR
      ((ERROR-TYPE . SB-C:COMPILER-ERROR)
       (:FORM . "(DEFUN ORDERED-DEP-TREE (DEP-TREE)
  (LET ((RES))
    (LABELS ((IN-RES? (DEP-NAME)
               (MEMBER DEP-NAME RES))
             (INSERT-PASS (REMAINING)
               (LOOP FOR (DEP
                          . SUB-DEPS) IN REMAINING UNMET-SUB-DEPS = (REMOVE-IF
                                                                     #'IN-RES?
                                                                     SUB-DEPS)
                     IF UNMET-SUB-DAPS
                     DO (PUSH DEP RES) ELSE
                     COLLECT (CONS DEP UNMET-SUB-DEPS) INTO NEXT-REMS
                     FINALLY (RETURN NEXT-REMS))))
      (LOOP FOR (DEP . CALLERS) IN DEP-TREE
            FOR DEPS-OF = (DEPENDENCIES-OF DEP)
            IF (NULL DEPS-OF)
            DO (PUSH DEP RES) ELSE
            COLLECT (CONS DEP DEPS-OF) INTO NON-ZEROS
            FINALLY (LOOP WHILE NON-ZEROS
                          DO (SETF NON-ZEROS (INSERT-PASS NON-ZEROS)))))
    (REVERSE RES)))")
       (:CONDITION
        . "#<SB-INT:SIMPLE-PROGRAM-ERROR \"~@<~A~@:_ ~A~:>\" {1008F795D3}>")))))
   (:STDOUT . ""))))
((5141 61833 539371000) :INSERT
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . sub-deps) in remaining
                      for unmet-sub-deps = (remove-if #'in-res? sub-deps)
                	  if unmet-sub-daps do (push dep res)
                      else collect (cons dep unmet-sub-deps) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree for deps-of = (dependencies-of dep)
	        if (null deps-of) do (push dep res)
	        else collect (cons dep deps-of) into non-zeros
            finally (loop while non-zeros
                          do (setf non-zeros (insert-pass non-zeros)))))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 61833 539379000) :INSERT
 (83 :VALUE
  ((:RESULT
    ((ERROR
      ((ERROR-TYPE . SIMPLE-WARNING)
       (:ERROR-MESSAGE . "undefined variable: UNMET-SUB-DAPS")
       (:FORM . "(DEFUN ORDERED-DEP-TREE (DEP-TREE)
  (LET ((RES))
    (LABELS ((IN-RES? (DEP-NAME)
               (MEMBER DEP-NAME RES))
             (INSERT-PASS (REMAINING)
               (LOOP FOR (DEP . SUB-DEPS) IN REMAINING
                     FOR UNMET-SUB-DEPS = (REMOVE-IF #'IN-RES? SUB-DEPS)
                     IF UNMET-SUB-DAPS
                     DO (PUSH DEP RES) ELSE
                     COLLECT (CONS DEP UNMET-SUB-DEPS) INTO NEXT-REMS
                     FINALLY (RETURN NEXT-REMS))))
      (LOOP FOR (DEP . CALLERS) IN DEP-TREE
            FOR DEPS-OF = (DEPENDENCIES-OF DEP)
            IF (NULL DEPS-OF)
            DO (PUSH DEP RES) ELSE
            COLLECT (CONS DEP DEPS-OF) INTO NON-ZEROS
            FINALLY (LOOP WHILE NON-ZEROS
                          DO (SETF NON-ZEROS (INSERT-PASS NON-ZEROS)))))
    (REVERSE RES)))")))))
   (:STDOUT . ""))))
((5141 62163 992712000) :DELETE
 (75 :CONTENTS "(defgeneric ->key (thing))

(defmethod ->key ((thing string))
  (intern (string-upcase thing) :keyword))

(defmethod ->key ((thing symbol))
  (if (keywordp thing)
      thing
  	  (intern (symbol-name thing) :keyword)))

(defgeneric dependencies-of (system))
(defmethod dependencies-of ((system symbol))
  (mapcar #'->key (slot-value (asdf/system:find-system system) 'asdf/component:sideway-dependencies)))


(defgeneric dependency-tree (system))
(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((rec (sys) 
		       (loop with deps = (dependencies-of sys)
                  for dep in deps for dep-k = (->key dep)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew (->key sys) (gethash dep-k res)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 62163 992849000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:PARENSCRIPT :CL-NOTEBOOK)
 (:NAMED-READTABLES :PARENSCRIPT) (:FACT-BASE :CL-NOTEBOOK)
 (:LOCAL-TIME :FACT-BASE) (:HOUSE :CL-NOTEBOOK) (:FLEXI-STREAMS :HOUSE)
 (:TRIVIAL-GRAY-STREAMS :FLEXI-STREAMS) (:OPTIMA :FACT-BASE :HOUSE)
 (:CLOSER-MOP :CL-NOTEBOOK :OPTIMA) (:USOCKET :HOUSE)
 (:SB-BSD-SOCKETS :USOCKET) (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE)
 (:SB-POSIX :CL-FAD) (:BORDEAUX-THREADS :CL-FAD :HOUSE) (:CL-JSON :HOUSE)
 (:CL-PPCRE :PARENSCRIPT :HOUSE) (:CL-BASE64 :HOUSE)
 (:ANAPHORA :PARENSCRIPT :FACT-BASE :HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA :FACT-BASE :OPTIMA :CL-FAD :BORDEAUX-THREADS :HOUSE :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 62163 992868000) :INSERT
 (75 :CONTENTS "(defgeneric ->key (thing))

(defmethod ->key ((thing string))
  (intern (string-upcase thing) :keyword))

(defmethod ->key ((thing symbol))
  (if (keywordp thing)
      thing
  	  (intern (symbol-name thing) :keyword)))

(defgeneric dependencies-of (system))
(defmethod dependencies-of ((system symbol))
  (mapcar #'->key (slot-value (asdf/system:find-system system) 'asdf/component:sideway-dependencies)))


(defgeneric dependency-tree (system))
(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((rec (sys) 
		       (loop with deps = (dependencies-of sys)
                  for dep in deps for dep-k = (->key dep)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew (->key sys) (gethash dep-k res)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 62163 992926000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:PARENSCRIPT :CL-NOTEBOOK)
 (:NAMED-READTABLES :PARENSCRIPT) (:FACT-BASE :CL-NOTEBOOK)
 (:LOCAL-TIME :FACT-BASE) (:HOUSE :CL-NOTEBOOK) (:FLEXI-STREAMS :HOUSE)
 (:TRIVIAL-GRAY-STREAMS :FLEXI-STREAMS) (:OPTIMA :FACT-BASE :HOUSE)
 (:CLOSER-MOP :CL-NOTEBOOK :OPTIMA) (:USOCKET :HOUSE)
 (:SB-BSD-SOCKETS :USOCKET) (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE)
 (:SB-POSIX :CL-FAD) (:BORDEAUX-THREADS :CL-FAD :HOUSE) (:CL-JSON :HOUSE)
 (:CL-PPCRE :PARENSCRIPT :HOUSE) (:CL-BASE64 :HOUSE)
 (:ANAPHORA :PARENSCRIPT :FACT-BASE :HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA :FACT-BASE :OPTIMA :CL-FAD :BORDEAUX-THREADS :HOUSE :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 62166 711934000) :DELETE
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . sub-deps) in remaining
                      for unmet-sub-deps = (remove-if #'in-res? sub-deps)
                	  if unmet-sub-daps do (push dep res)
                      else collect (cons dep unmet-sub-deps) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree for deps-of = (dependencies-of dep)
	        if (null deps-of) do (push dep res)
	        else collect (cons dep deps-of) into non-zeros
            finally (loop while non-zeros
                          do (setf non-zeros (insert-pass non-zeros)))))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 62166 711974000) :DELETE
 (83 :VALUE
  ((:RESULT
    ((ERROR
      ((ERROR-TYPE . SB-C:COMPILER-ERROR)
       (:FORM . "(DEFUN ORDERED-DEP-TREE (DEP-TREE)
  (LET ((RES))
    (LOOP FOR (DEP . CALLERS) IN DEP-TREE
          IF (NULL (DEPENDENCIES-OF DEP))
          DO (PUSH DEP RES) ELSE
          COLLECT INTO NON-ZEROS
          FINALLY (RETURN (VALUES ZEROS NON-ZEROS)))
    RES))")
       (:CONDITION
        . "#<SB-INT:SIMPLE-PROGRAM-ERROR \"~@<~A~@:_ ~A~:>\" {100378EBF3}>")))))
   (:STDOUT . ""))))
((5141 62166 711992000) :INSERT
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . sub-deps) in remaining
                      for unmet-sub-deps = (remove-if #'in-res? sub-deps)
                	  if unmet-sub-daps do (push dep res)
                      else collect (cons dep unmet-sub-deps) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree for deps-of = (dependencies-of dep)
	        if (null deps-of) do (push dep res)
	        else collect (cons dep deps-of) into non-zeros
            finally (loop while non-zeros
                          do (setf non-zeros (insert-pass non-zeros)))))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 62166 712004000) :INSERT
 (83 :VALUE
  ((:RESULT
    ((ERROR
      ((ERROR-TYPE . SIMPLE-WARNING)
       (:ERROR-MESSAGE . "undefined variable: UNMET-SUB-DAPS")
       (:FORM . "(DEFUN ORDERED-DEP-TREE (DEP-TREE)
  (LET ((RES))
    (LABELS ((IN-RES? (DEP-NAME)
               (MEMBER DEP-NAME RES))
             (INSERT-PASS (REMAINING)
               (LOOP FOR (DEP . SUB-DEPS) IN REMAINING
                     FOR UNMET-SUB-DEPS = (REMOVE-IF #'IN-RES? SUB-DEPS)
                     IF UNMET-SUB-DAPS
                     DO (PUSH DEP RES) ELSE
                     COLLECT (CONS DEP UNMET-SUB-DEPS) INTO NEXT-REMS
                     FINALLY (RETURN NEXT-REMS))))
      (LOOP FOR (DEP . CALLERS) IN DEP-TREE
            FOR DEPS-OF = (DEPENDENCIES-OF DEP)
            IF (NULL DEPS-OF)
            DO (PUSH DEP RES) ELSE
            COLLECT (CONS DEP DEPS-OF) INTO NON-ZEROS
            FINALLY (LOOP WHILE NON-ZEROS
                          DO (SETF NON-ZEROS (INSERT-PASS NON-ZEROS)))))
    (REVERSE RES)))")))))
   (:STDOUT . ""))))
((5141 62478 666365000) :DELETE
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . sub-deps) in remaining
                      for unmet-sub-deps = (remove-if #'in-res? sub-deps)
                	  if unmet-sub-daps do (push dep res)
                      else collect (cons dep unmet-sub-deps) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree for deps-of = (dependencies-of dep)
	        if (null deps-of) do (push dep res)
	        else collect (cons dep deps-of) into non-zeros
            finally (loop while non-zeros
                          do (setf non-zeros (insert-pass non-zeros)))))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 62478 666568000) :DELETE
 (83 :VALUE
  ((:RESULT
    ((ERROR
      ((ERROR-TYPE . SB-C:COMPILER-ERROR)
       (:FORM . "(DEFUN ORDERED-DEP-TREE (DEP-TREE)
  (LET ((RES))
    (LABELS ((IN-RES? (DEP-NAME)
               (MEMBER DEP-NAME RES))
             (INSERT-PASS (REMAINING)
               (LOOP FOR (DEP
                          . SUB-DEPS) IN REMAINING UNMET-SUB-DEPS = (REMOVE-IF
                                                                     #'IN-RES?
                                                                     SUB-DEPS)
                     IF UNMET-SUB-DAPS
                     DO (PUSH DEP RES) ELSE
                     COLLECT (CONS DEP UNMET-SUB-DEPS) INTO NEXT-REMS
                     FINALLY (RETURN NEXT-REMS))))
      (LOOP FOR (DEP . CALLERS) IN DEP-TREE
            FOR DEPS-OF = (DEPENDENCIES-OF DEP)
            IF (NULL DEPS-OF)
            DO (PUSH DEP RES) ELSE
            COLLECT (CONS DEP DEPS-OF) INTO NON-ZEROS
            FINALLY (LOOP WHILE NON-ZEROS
                          DO (SETF NON-ZEROS (INSERT-PASS NON-ZEROS)))))
    (REVERSE RES)))")
       (:CONDITION
        . "#<SB-INT:SIMPLE-PROGRAM-ERROR \"~@<~A~@:_ ~A~:>\" {1004E639A3}>")))))
   (:STDOUT . ""))))
((5141 62478 666618000) :INSERT
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . sub-deps) in remaining
                      for unmet-sub-deps = (remove-if #'in-res? sub-deps)
                	  if unmet-sub-daps do (push dep res)
                      else collect (cons dep unmet-sub-deps) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree for deps-of = (dependencies-of dep)
	        if (null deps-of) do (push dep res)
	        else collect (cons dep deps-of) into non-zeros
            finally (loop while non-zeros
                          do (setf non-zeros (insert-pass non-zeros)))))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 62478 666644000) :INSERT
 (83 :VALUE
  ((:RESULT
    ((ERROR
      ((ERROR-TYPE . SB-INT:SIMPLE-STYLE-WARNING)
       (:ERROR-MESSAGE . "undefined function: DEPENDENCIES-OF")
       (:FORM . "(DEFUN ORDERED-DEP-TREE (DEP-TREE)
  (LET ((RES))
    (LABELS ((IN-RES? (DEP-NAME)
               (MEMBER DEP-NAME RES))
             (INSERT-PASS (REMAINING)
               (LOOP FOR (DEP . SUB-DEPS) IN REMAINING
                     FOR UNMET-SUB-DEPS = (REMOVE-IF #'IN-RES? SUB-DEPS)
                     IF UNMET-SUB-DAPS
                     DO (PUSH DEP RES) ELSE
                     COLLECT (CONS DEP UNMET-SUB-DEPS) INTO NEXT-REMS
                     FINALLY (RETURN NEXT-REMS))))
      (LOOP FOR (DEP . CALLERS) IN DEP-TREE
            FOR DEPS-OF = (DEPENDENCIES-OF DEP)
            IF (NULL DEPS-OF)
            DO (PUSH DEP RES) ELSE
            COLLECT (CONS DEP DEPS-OF) INTO NON-ZEROS
            FINALLY (LOOP WHILE NON-ZEROS
                          DO (SETF NON-ZEROS (INSERT-PASS NON-ZEROS)))))
    (REVERSE RES)))")))))
   (:STDOUT . ""))))
((5141 62483 680348000) :DELETE
 (75 :CONTENTS "(defgeneric ->key (thing))

(defmethod ->key ((thing string))
  (intern (string-upcase thing) :keyword))

(defmethod ->key ((thing symbol))
  (if (keywordp thing)
      thing
  	  (intern (symbol-name thing) :keyword)))

(defgeneric dependencies-of (system))
(defmethod dependencies-of ((system symbol))
  (mapcar #'->key (slot-value (asdf/system:find-system system) 'asdf/component:sideway-dependencies)))


(defgeneric dependency-tree (system))
(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((rec (sys) 
		       (loop with deps = (dependencies-of sys)
                  for dep in deps for dep-k = (->key dep)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew (->key sys) (gethash dep-k res)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 62483 680375000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:PARENSCRIPT :CL-NOTEBOOK)
 (:NAMED-READTABLES :PARENSCRIPT) (:FACT-BASE :CL-NOTEBOOK)
 (:LOCAL-TIME :FACT-BASE) (:HOUSE :CL-NOTEBOOK) (:FLEXI-STREAMS :HOUSE)
 (:TRIVIAL-GRAY-STREAMS :FLEXI-STREAMS) (:OPTIMA :FACT-BASE :HOUSE)
 (:CLOSER-MOP :CL-NOTEBOOK :OPTIMA) (:USOCKET :HOUSE)
 (:SB-BSD-SOCKETS :USOCKET) (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE)
 (:SB-POSIX :CL-FAD) (:BORDEAUX-THREADS :CL-FAD :HOUSE) (:CL-JSON :HOUSE)
 (:CL-PPCRE :PARENSCRIPT :HOUSE) (:CL-BASE64 :HOUSE)
 (:ANAPHORA :PARENSCRIPT :FACT-BASE :HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA :FACT-BASE :OPTIMA :CL-FAD :BORDEAUX-THREADS :HOUSE :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 62483 680384000) :INSERT
 (75 :CONTENTS "(defgeneric ->key (thing))

(defmethod ->key ((thing string))
  (intern (string-upcase thing) :keyword))

(defmethod ->key ((thing symbol))
  (if (keywordp thing)
      thing
  	  (intern (symbol-name thing) :keyword)))

(defgeneric dependencies-of (system))
(defmethod dependencies-of ((system symbol))
  (mapcar #'->key (slot-value (asdf/system:find-system system) 'asdf/component:sideway-dependencies)))


(defgeneric dependency-tree (system))
(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((rec (sys) 
		       (loop with deps = (dependencies-of sys)
                  for dep in deps for dep-k = (->key dep)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew (->key sys) (gethash dep-k res)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 62483 680393000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:PARENSCRIPT :CL-NOTEBOOK)
 (:NAMED-READTABLES :PARENSCRIPT) (:FACT-BASE :CL-NOTEBOOK)
 (:LOCAL-TIME :FACT-BASE) (:HOUSE :CL-NOTEBOOK) (:FLEXI-STREAMS :HOUSE)
 (:TRIVIAL-GRAY-STREAMS :FLEXI-STREAMS) (:OPTIMA :FACT-BASE :HOUSE)
 (:CLOSER-MOP :CL-NOTEBOOK :OPTIMA) (:USOCKET :HOUSE)
 (:SB-BSD-SOCKETS :USOCKET) (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE)
 (:SB-POSIX :CL-FAD) (:BORDEAUX-THREADS :CL-FAD :HOUSE) (:CL-JSON :HOUSE)
 (:CL-PPCRE :PARENSCRIPT :HOUSE) (:CL-BASE64 :HOUSE)
 (:ANAPHORA :PARENSCRIPT :FACT-BASE :HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA :FACT-BASE :OPTIMA :CL-FAD :BORDEAUX-THREADS :HOUSE :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 62495 651343000) :DELETE
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . sub-deps) in remaining
                      for unmet-sub-deps = (remove-if #'in-res? sub-deps)
                	  if unmet-sub-daps do (push dep res)
                      else collect (cons dep unmet-sub-deps) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree for deps-of = (dependencies-of dep)
	        if (null deps-of) do (push dep res)
	        else collect (cons dep deps-of) into non-zeros
            finally (loop while non-zeros
                          do (setf non-zeros (insert-pass non-zeros)))))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 62495 651382000) :DELETE
 (83 :VALUE
  ((:RESULT
    ((ERROR
      ((ERROR-TYPE . SB-INT:SIMPLE-STYLE-WARNING)
       (:ERROR-MESSAGE . "undefined function: DEPENDENCIES-OF")
       (:FORM . "(DEFUN ORDERED-DEP-TREE (DEP-TREE)
  (LET ((RES))
    (LABELS ((IN-RES? (DEP-NAME)
               (MEMBER DEP-NAME RES))
             (INSERT-PASS (REMAINING)
               (LOOP FOR (DEP . SUB-DEPS) IN REMAINING
                     FOR UNMET-SUB-DEPS = (REMOVE-IF #'IN-RES? SUB-DEPS)
                     IF UNMET-SUB-DAPS
                     DO (PUSH DEP RES) ELSE
                     COLLECT (CONS DEP UNMET-SUB-DEPS) INTO NEXT-REMS
                     FINALLY (RETURN NEXT-REMS))))
      (LOOP FOR (DEP . CALLERS) IN DEP-TREE
            FOR DEPS-OF = (DEPENDENCIES-OF DEP)
            IF (NULL DEPS-OF)
            DO (PUSH DEP RES) ELSE
            COLLECT (CONS DEP DEPS-OF) INTO NON-ZEROS
            FINALLY (LOOP WHILE NON-ZEROS
                          DO (SETF NON-ZEROS (INSERT-PASS NON-ZEROS)))))
    (REVERSE RES)))")))))
   (:STDOUT . ""))))
((5141 62495 651392000) :INSERT
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . sub-deps) in remaining
                      for unmet-sub-deps = (remove-if #'in-res? sub-deps)
                	  if (not unmet-sub-daps) do (push dep res)
                      else collect (cons dep unmet-sub-deps) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree for deps-of = (dependencies-of dep)
	        if (null deps-of) do (push dep res)
	        else collect (cons dep deps-of) into non-zeros
            finally (loop while non-zeros
                          do (setf non-zeros (insert-pass non-zeros)))))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 62495 651405000) :INSERT
 (83 :VALUE
  ((:RESULT
    ((ERROR
      ((ERROR-TYPE . SIMPLE-WARNING)
       (:ERROR-MESSAGE . "undefined variable: UNMET-SUB-DAPS")
       (:FORM . "(DEFUN ORDERED-DEP-TREE (DEP-TREE)
  (LET ((RES))
    (LABELS ((IN-RES? (DEP-NAME)
               (MEMBER DEP-NAME RES))
             (INSERT-PASS (REMAINING)
               (LOOP FOR (DEP . SUB-DEPS) IN REMAINING
                     FOR UNMET-SUB-DEPS = (REMOVE-IF #'IN-RES? SUB-DEPS)
                     IF (NOT UNMET-SUB-DAPS)
                     DO (PUSH DEP RES) ELSE
                     COLLECT (CONS DEP UNMET-SUB-DEPS) INTO NEXT-REMS
                     FINALLY (RETURN NEXT-REMS))))
      (LOOP FOR (DEP . CALLERS) IN DEP-TREE
            FOR DEPS-OF = (DEPENDENCIES-OF DEP)
            IF (NULL DEPS-OF)
            DO (PUSH DEP RES) ELSE
            COLLECT (CONS DEP DEPS-OF) INTO NON-ZEROS
            FINALLY (LOOP WHILE NON-ZEROS
                          DO (SETF NON-ZEROS (INSERT-PASS NON-ZEROS)))))
    (REVERSE RES)))")))))
   (:STDOUT . ""))))
((5141 62501 712012000) :DELETE
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . sub-deps) in remaining
                      for unmet-sub-deps = (remove-if #'in-res? sub-deps)
                	  if (not unmet-sub-daps) do (push dep res)
                      else collect (cons dep unmet-sub-deps) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree for deps-of = (dependencies-of dep)
	        if (null deps-of) do (push dep res)
	        else collect (cons dep deps-of) into non-zeros
            finally (loop while non-zeros
                          do (setf non-zeros (insert-pass non-zeros)))))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 62501 712051000) :DELETE
 (83 :VALUE
  ((:RESULT
    ((ERROR
      ((ERROR-TYPE . SIMPLE-WARNING)
       (:ERROR-MESSAGE . "undefined variable: UNMET-SUB-DAPS")
       (:FORM . "(DEFUN ORDERED-DEP-TREE (DEP-TREE)
  (LET ((RES))
    (LABELS ((IN-RES? (DEP-NAME)
               (MEMBER DEP-NAME RES))
             (INSERT-PASS (REMAINING)
               (LOOP FOR (DEP . SUB-DEPS) IN REMAINING
                     FOR UNMET-SUB-DEPS = (REMOVE-IF #'IN-RES? SUB-DEPS)
                     IF (NOT UNMET-SUB-DAPS)
                     DO (PUSH DEP RES) ELSE
                     COLLECT (CONS DEP UNMET-SUB-DEPS) INTO NEXT-REMS
                     FINALLY (RETURN NEXT-REMS))))
      (LOOP FOR (DEP . CALLERS) IN DEP-TREE
            FOR DEPS-OF = (DEPENDENCIES-OF DEP)
            IF (NULL DEPS-OF)
            DO (PUSH DEP RES) ELSE
            COLLECT (CONS DEP DEPS-OF) INTO NON-ZEROS
            FINALLY (LOOP WHILE NON-ZEROS
                          DO (SETF NON-ZEROS (INSERT-PASS NON-ZEROS)))))
    (REVERSE RES)))")))))
   (:STDOUT . ""))))
((5141 62501 712057000) :INSERT
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . sub-deps) in remaining
                      for unmet-sub-deps = (remove-if #'in-res? sub-deps)
                	  if (not unmet-sub-deps) do (push dep res)
                      else collect (cons dep unmet-sub-deps) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree for deps-of = (dependencies-of dep)
	        if (null deps-of) do (push dep res)
	        else collect (cons dep deps-of) into non-zeros
            finally (loop while non-zeros
                          do (setf non-zeros (insert-pass non-zeros)))))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 62501 712068000) :INSERT
 (83 :VALUE
  ((:RESULT
    ((CONS "(:CL-CSS :CL-WHO :NAMED-READTABLES :TRIVIAL-GRAY-STREAMS :CLOSER-MOP
 :SB-BSD-SOCKETS :SB-POSIX :CL-JSON :CL-PPCRE :CL-BASE64 :ANAPHORA :ALEXANDRIA
 :PARENSCRIPT :FLEXI-STREAMS :OPTIMA :USOCKET :BORDEAUX-THREADS :CL-FAD
 :LOCAL-TIME :HOUSE :FACT-BASE)")))
   (:STDOUT . ""))))
((5141 62530 45271000) :DELETE
 (75 :CONTENTS "(defgeneric ->key (thing))

(defmethod ->key ((thing string))
  (intern (string-upcase thing) :keyword))

(defmethod ->key ((thing symbol))
  (if (keywordp thing)
      thing
  	  (intern (symbol-name thing) :keyword)))

(defgeneric dependencies-of (system))
(defmethod dependencies-of ((system symbol))
  (mapcar #'->key (slot-value (asdf/system:find-system system) 'asdf/component:sideway-dependencies)))


(defgeneric dependency-tree (system))
(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((rec (sys) 
		       (loop with deps = (dependencies-of sys)
                  for dep in deps for dep-k = (->key dep)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew (->key sys) (gethash dep-k res)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 62530 45470000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:PARENSCRIPT :CL-NOTEBOOK)
 (:NAMED-READTABLES :PARENSCRIPT) (:FACT-BASE :CL-NOTEBOOK)
 (:LOCAL-TIME :FACT-BASE) (:HOUSE :CL-NOTEBOOK) (:FLEXI-STREAMS :HOUSE)
 (:TRIVIAL-GRAY-STREAMS :FLEXI-STREAMS) (:OPTIMA :FACT-BASE :HOUSE)
 (:CLOSER-MOP :CL-NOTEBOOK :OPTIMA) (:USOCKET :HOUSE)
 (:SB-BSD-SOCKETS :USOCKET) (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE)
 (:SB-POSIX :CL-FAD) (:BORDEAUX-THREADS :CL-FAD :HOUSE) (:CL-JSON :HOUSE)
 (:CL-PPCRE :PARENSCRIPT :HOUSE) (:CL-BASE64 :HOUSE)
 (:ANAPHORA :PARENSCRIPT :FACT-BASE :HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA :FACT-BASE :OPTIMA :CL-FAD :BORDEAUX-THREADS :HOUSE :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 62530 45499000) :INSERT
 (75 :CONTENTS "(defgeneric ->key (thing))

(defmethod ->key ((thing string))
  (intern (string-upcase thing) :keyword))

(defmethod ->key ((thing symbol))
  (if (keywordp thing)
      thing
  	  (intern (symbol-name thing) :keyword)))

(defgeneric dependencies-of (system))
(defmethod dependencies-of ((system symbol))
  (mapcar #'->key (slot-value (asdf/system:find-system system) 'asdf/component:sideway-dependencies)))


(defgeneric dependency-tree (system))
(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((rec (sys) 
		       (loop with deps = (dependencies-of sys)
                  for dep in deps for dep-k = (->key dep)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew (->key sys) (gethash dep-k res)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 62530 45528000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:PARENSCRIPT :CL-NOTEBOOK)
 (:NAMED-READTABLES :PARENSCRIPT) (:FACT-BASE :CL-NOTEBOOK)
 (:LOCAL-TIME :FACT-BASE) (:HOUSE :CL-NOTEBOOK) (:FLEXI-STREAMS :HOUSE)
 (:TRIVIAL-GRAY-STREAMS :FLEXI-STREAMS) (:OPTIMA :FACT-BASE :HOUSE)
 (:CLOSER-MOP :CL-NOTEBOOK :OPTIMA) (:USOCKET :HOUSE)
 (:SB-BSD-SOCKETS :USOCKET) (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE)
 (:SB-POSIX :CL-FAD) (:BORDEAUX-THREADS :CL-FAD :HOUSE) (:CL-JSON :HOUSE)
 (:CL-PPCRE :PARENSCRIPT :HOUSE) (:CL-BASE64 :HOUSE)
 (:ANAPHORA :PARENSCRIPT :FACT-BASE :HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA :FACT-BASE :OPTIMA :CL-FAD :BORDEAUX-THREADS :HOUSE :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 62535 624427000) :DELETE
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . sub-deps) in remaining
                      for unmet-sub-deps = (remove-if #'in-res? sub-deps)
                	  if (not unmet-sub-deps) do (push dep res)
                      else collect (cons dep unmet-sub-deps) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree for deps-of = (dependencies-of dep)
	        if (null deps-of) do (push dep res)
	        else collect (cons dep deps-of) into non-zeros
            finally (loop while non-zeros
                          do (setf non-zeros (insert-pass non-zeros)))))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 62535 624456000) :DELETE
 (83 :VALUE
  ((:RESULT
    ((ERROR
      ((ERROR-TYPE . SB-C:COMPILER-ERROR)
       (:FORM . "(DEFUN ORDERED-DEP-TREE (DEP-TREE)
  (LET ((RES))
    (LABELS ((IN-RES? (DEP-NAME)
               (MEMBER DEP-NAME RES))
             (INSERT-PASS (REMAINING)
               (LOOP FOR (DEP
                          . SUB-DEPS) IN REMAINING UNMET-SUB-DEPS = (REMOVE-IF
                                                                     #'IN-RES?
                                                                     SUB-DEPS)
                     IF UNMET-SUB-DAPS
                     DO (PUSH DEP RES) ELSE
                     COLLECT (CONS DEP UNMET-SUB-DEPS) INTO NEXT-REMS
                     FINALLY (RETURN NEXT-REMS))))
      (LOOP FOR (DEP . CALLERS) IN DEP-TREE
            FOR DEPS-OF = (DEPENDENCIES-OF DEP)
            IF (NULL DEPS-OF)
            DO (PUSH DEP RES) ELSE
            COLLECT (CONS DEP DEPS-OF) INTO NON-ZEROS
            FINALLY (LOOP WHILE NON-ZEROS
                          DO (SETF NON-ZEROS (INSERT-PASS NON-ZEROS)))))
    (REVERSE RES)))")
       (:CONDITION
        . "#<SB-INT:SIMPLE-PROGRAM-ERROR \"~@<~A~@:_ ~A~:>\" {1007C4E2B3}>")))))
   (:STDOUT . ""))))
((5141 62535 624467000) :INSERT
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . sub-deps) in remaining
                      for unmet-sub-deps = (remove-if #'in-res? sub-deps)
                	  if (not unmet-sub-deps) do (push dep res)
                      else collect (cons dep unmet-sub-deps) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree for deps-of = (dependencies-of dep)
	        if (null deps-of) do (push dep res)
	        else collect (cons dep deps-of) into non-zeros
            finally (loop while non-zeros
                          do (setf non-zeros (insert-pass non-zeros)))))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 62535 624476000) :INSERT
 (83 :VALUE
  ((:RESULT
    ((CONS "(:CL-CSS :CL-WHO :NAMED-READTABLES :TRIVIAL-GRAY-STREAMS :CLOSER-MOP
 :SB-BSD-SOCKETS :SB-POSIX :CL-JSON :CL-PPCRE :CL-BASE64 :ANAPHORA :ALEXANDRIA
 :PARENSCRIPT :FLEXI-STREAMS :OPTIMA :USOCKET :BORDEAUX-THREADS :CL-FAD
 :LOCAL-TIME :HOUSE :FACT-BASE)")))
   (:STDOUT . ""))))
((5141 62545 867951000) :DELETE
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . sub-deps) in remaining
                      for unmet-sub-deps = (remove-if #'in-res? sub-deps)
                	  if (not unmet-sub-deps) do (push dep res)
                      else collect (cons dep unmet-sub-deps) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree for deps-of = (dependencies-of dep)
	        if (null deps-of) do (push dep res)
	        else collect (cons dep deps-of) into non-zeros
            finally (loop while non-zeros
                          do (setf non-zeros (insert-pass non-zeros)))))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 62545 867982000) :DELETE
 (83 :VALUE
  ((:RESULT
    ((CONS "(:CL-CSS :CL-WHO :NAMED-READTABLES :TRIVIAL-GRAY-STREAMS :CLOSER-MOP
 :SB-BSD-SOCKETS :SB-POSIX :CL-JSON :CL-PPCRE :CL-BASE64 :ANAPHORA :ALEXANDRIA
 :PARENSCRIPT :FLEXI-STREAMS :OPTIMA :USOCKET :BORDEAUX-THREADS :CL-FAD
 :LOCAL-TIME :HOUSE :FACT-BASE)")))
   (:STDOUT . ""))))
((5141 62545 867998000) :INSERT
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . sub-deps) in remaining
                      for unmet-sub-deps = (remove-if #'in-res? sub-deps)
                	  if (null unmet-sub-deps) do (push dep res)
                      else collect (cons dep unmet-sub-deps) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree for deps-of = (dependencies-of dep)
	        if (null deps-of) do (push dep res)
	        else collect (cons dep deps-of) into non-zeros
            finally (loop while non-zeros
                          do (setf non-zeros (insert-pass non-zeros)))))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 62545 868007000) :INSERT
 (83 :VALUE
  ((:RESULT
    ((CONS "(:CL-CSS :CL-WHO :NAMED-READTABLES :TRIVIAL-GRAY-STREAMS :CLOSER-MOP
 :SB-BSD-SOCKETS :SB-POSIX :CL-JSON :CL-PPCRE :CL-BASE64 :ANAPHORA :ALEXANDRIA
 :PARENSCRIPT :FLEXI-STREAMS :OPTIMA :USOCKET :BORDEAUX-THREADS :CL-FAD
 :LOCAL-TIME :HOUSE :FACT-BASE)")))
   (:STDOUT . ""))))
((5141 62551 823576000) :DELETE (82 :CELL-ORDER (23 2 15 1 7 10 51 75)))
((5141 62551 823795000) :INSERT (84 :CELL-ORDER (23 2 15 1 7 10 51 75 83)))
((5141 62732 193925000) :DELETE
 (75 :CONTENTS "(defgeneric ->key (thing))

(defmethod ->key ((thing string))
  (intern (string-upcase thing) :keyword))

(defmethod ->key ((thing symbol))
  (if (keywordp thing)
      thing
  	  (intern (symbol-name thing) :keyword)))

(defgeneric dependencies-of (system))
(defmethod dependencies-of ((system symbol))
  (mapcar #'->key (slot-value (asdf/system:find-system system) 'asdf/component:sideway-dependencies)))


(defgeneric dependency-tree (system))
(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((rec (sys) 
		       (loop with deps = (dependencies-of sys)
                  for dep in deps for dep-k = (->key dep)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew (->key sys) (gethash dep-k res)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 62732 194137000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:PARENSCRIPT :CL-NOTEBOOK)
 (:NAMED-READTABLES :PARENSCRIPT) (:FACT-BASE :CL-NOTEBOOK)
 (:LOCAL-TIME :FACT-BASE) (:HOUSE :CL-NOTEBOOK) (:FLEXI-STREAMS :HOUSE)
 (:TRIVIAL-GRAY-STREAMS :FLEXI-STREAMS) (:OPTIMA :FACT-BASE :HOUSE)
 (:CLOSER-MOP :CL-NOTEBOOK :OPTIMA) (:USOCKET :HOUSE)
 (:SB-BSD-SOCKETS :USOCKET) (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE)
 (:SB-POSIX :CL-FAD) (:BORDEAUX-THREADS :CL-FAD :HOUSE) (:CL-JSON :HOUSE)
 (:CL-PPCRE :PARENSCRIPT :HOUSE) (:CL-BASE64 :HOUSE)
 (:ANAPHORA :PARENSCRIPT :FACT-BASE :HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA :FACT-BASE :OPTIMA :CL-FAD :BORDEAUX-THREADS :HOUSE :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 62732 194158000) :INSERT
 (75 :CONTENTS "(defgeneric ->key (thing))

(defmethod ->key ((thing string))
  (intern (string-upcase thing) :keyword))

(defmethod ->key ((thing symbol))
  (if (keywordp thing)
      thing
  	  (intern (symbol-name thing) :keyword)))

(defgeneric dependencies-of (system))
(defmethod dependencies-of ((system symbol))
  (mapcar #'->key (slot-value (asdf/system:find-system system) 'asdf/component:sideway-dependencies)))


(defgeneric dependency-tree (system))
(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((rec (sys) 
		       (loop with deps = (dependencies-of sys)
                  for dep in deps for dep-k = (->key dep)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew (->key sys) (gethash dep-k res)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 62732 194186000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:PARENSCRIPT :CL-NOTEBOOK)
 (:NAMED-READTABLES :PARENSCRIPT) (:FACT-BASE :CL-NOTEBOOK)
 (:LOCAL-TIME :FACT-BASE) (:HOUSE :CL-NOTEBOOK) (:FLEXI-STREAMS :HOUSE)
 (:TRIVIAL-GRAY-STREAMS :FLEXI-STREAMS) (:OPTIMA :FACT-BASE :HOUSE)
 (:CLOSER-MOP :CL-NOTEBOOK :OPTIMA) (:USOCKET :HOUSE)
 (:SB-BSD-SOCKETS :USOCKET) (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE)
 (:SB-POSIX :CL-FAD) (:BORDEAUX-THREADS :CL-FAD :HOUSE) (:CL-JSON :HOUSE)
 (:CL-PPCRE :PARENSCRIPT :HOUSE) (:CL-BASE64 :HOUSE)
 (:ANAPHORA :PARENSCRIPT :FACT-BASE :HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA :FACT-BASE :OPTIMA :CL-FAD :BORDEAUX-THREADS :HOUSE :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 62736 410081000) :DELETE
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . sub-deps) in remaining
                      for unmet-sub-deps = (remove-if #'in-res? sub-deps)
                	  if (null unmet-sub-deps) do (push dep res)
                      else collect (cons dep unmet-sub-deps) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree for deps-of = (dependencies-of dep)
	        if (null deps-of) do (push dep res)
	        else collect (cons dep deps-of) into non-zeros
            finally (loop while non-zeros
                          do (setf non-zeros (insert-pass non-zeros)))))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 62736 410119000) :DELETE
 (83 :VALUE
  ((:RESULT
    ((ERROR
      ((ERROR-TYPE . SIMPLE-WARNING)
       (:ERROR-MESSAGE . "undefined variable: UNMET-SUB-DAPS")
       (:FORM . "(DEFUN ORDERED-DEP-TREE (DEP-TREE)
  (LET ((RES))
    (LABELS ((IN-RES? (DEP-NAME)
               (MEMBER DEP-NAME RES))
             (INSERT-PASS (REMAINING)
               (LOOP FOR (DEP . SUB-DEPS) IN REMAINING
                     FOR UNMET-SUB-DEPS = (REMOVE-IF #'IN-RES? SUB-DEPS)
                     IF UNMET-SUB-DAPS
                     DO (PUSH DEP RES) ELSE
                     COLLECT (CONS DEP UNMET-SUB-DEPS) INTO NEXT-REMS
                     FINALLY (RETURN NEXT-REMS))))
      (LOOP FOR (DEP . CALLERS) IN DEP-TREE
            FOR DEPS-OF = (DEPENDENCIES-OF DEP)
            IF (NULL DEPS-OF)
            DO (PUSH DEP RES) ELSE
            COLLECT (CONS DEP DEPS-OF) INTO NON-ZEROS
            FINALLY (LOOP WHILE NON-ZEROS
                          DO (SETF NON-ZEROS (INSERT-PASS NON-ZEROS)))))
    (REVERSE RES)))")))))
   (:STDOUT . ""))))
((5141 62736 410150000) :INSERT
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . sub-deps) in remaining
                      for unmet-sub-deps = (remove-if #'in-res? sub-deps)
                	  if (null unmet-sub-deps) do (push dep res)
                      else collect (cons dep unmet-sub-deps) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree for deps-of = (dependencies-of dep)
	        if (null deps-of) do (push dep res)
	        else collect (cons dep deps-of) into non-zeros
            finally (loop while non-zeros
                          do (setf non-zeros (insert-pass non-zeros)))))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 62736 410162000) :INSERT
 (83 :VALUE
  ((:RESULT
    ((CONS "(:CL-CSS :CL-WHO :NAMED-READTABLES :TRIVIAL-GRAY-STREAMS :CLOSER-MOP
 :SB-BSD-SOCKETS :SB-POSIX :CL-JSON :CL-PPCRE :CL-BASE64 :ANAPHORA :ALEXANDRIA
 :PARENSCRIPT :FLEXI-STREAMS :OPTIMA :USOCKET :BORDEAUX-THREADS :CL-FAD
 :LOCAL-TIME :HOUSE :FACT-BASE)")))
   (:STDOUT . ""))))
((5141 62880 522493000) :DELETE
 (83 :VALUE
  ((:RESULT
    ((CONS "(:CL-CSS :CL-WHO :NAMED-READTABLES :TRIVIAL-GRAY-STREAMS :CLOSER-MOP
 :SB-BSD-SOCKETS :SB-POSIX :CL-JSON :CL-PPCRE :CL-BASE64 :ANAPHORA :ALEXANDRIA
 :PARENSCRIPT :FLEXI-STREAMS :OPTIMA :USOCKET :BORDEAUX-THREADS :CL-FAD
 :LOCAL-TIME :HOUSE :FACT-BASE)")))
   (:STDOUT . ""))))
((5141 62880 522521000) :DELETE
 (83 :CONTENTS "(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . sub-deps) in remaining
                      for unmet-sub-deps = (remove-if #'in-res? sub-deps)
                	  if (null unmet-sub-deps) do (push dep res)
                      else collect (cons dep unmet-sub-deps) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree for deps-of = (dependencies-of dep)
	        if (null deps-of) do (push dep res)
	        else collect (cons dep deps-of) into non-zeros
            finally (loop while non-zeros
                          do (setf non-zeros (insert-pass non-zeros)))))
      (reverse res)))

(ordered-dep-tree (dependency-tree :cl-notebook))"))
((5141 62880 522547000) :DELETE (83 :CELL NIL))
((5141 62880 522559000) :DELETE (83 :CELL-TYPE :COMMON-LISP))
((5141 62880 522568000) :DELETE
 (83 :VALUE
  ((:RESULT
    ((ERROR
      ((ERROR-TYPE . SIMPLE-WARNING)
       (:ERROR-MESSAGE . "undefined variable: UNMET-SUB-DAPS")
       (:FORM . "(DEFUN ORDERED-DEP-TREE (DEP-TREE)
  (LET ((RES))
    (LABELS ((IN-RES? (DEP-NAME)
               (MEMBER DEP-NAME RES))
             (INSERT-PASS (REMAINING)
               (LOOP FOR (DEP . SUB-DEPS) IN REMAINING
                     FOR UNMET-SUB-DEPS = (REMOVE-IF #'IN-RES? SUB-DEPS)
                     IF UNMET-SUB-DAPS
                     DO (PUSH DEP RES) ELSE
                     COLLECT (CONS DEP UNMET-SUB-DEPS) INTO NEXT-REMS
                     FINALLY (RETURN NEXT-REMS))))
      (LOOP FOR (DEP . CALLERS) IN DEP-TREE
            FOR DEPS-OF = (DEPENDENCIES-OF DEP)
            IF (NULL DEPS-OF)
            DO (PUSH DEP RES) ELSE
            COLLECT (CONS DEP DEPS-OF) INTO NON-ZEROS
            FINALLY (LOOP WHILE NON-ZEROS
                          DO (SETF NON-ZEROS (INSERT-PASS NON-ZEROS)))))
    (REVERSE RES)))")))))
   (:STDOUT . ""))))
((5141 62880 522579000) :DELETE
 (83 :VALUE
  ((:RESULT
    ((CONS "(:CL-CSS :CL-WHO :NAMED-READTABLES :TRIVIAL-GRAY-STREAMS :CLOSER-MOP
 :SB-BSD-SOCKETS :SB-POSIX :CL-JSON :CL-PPCRE :CL-BASE64 :ANAPHORA :ALEXANDRIA
 :PARENSCRIPT :FLEXI-STREAMS :OPTIMA :USOCKET :BORDEAUX-THREADS :CL-FAD
 :LOCAL-TIME :HOUSE :FACT-BASE)")))
   (:STDOUT . ""))))
((5141 62884 9713000) :DELETE
 (75 :CONTENTS "(defgeneric ->key (thing))

(defmethod ->key ((thing string))
  (intern (string-upcase thing) :keyword))

(defmethod ->key ((thing symbol))
  (if (keywordp thing)
      thing
  	  (intern (symbol-name thing) :keyword)))

(defgeneric dependencies-of (system))
(defmethod dependencies-of ((system symbol))
  (mapcar #'->key (slot-value (asdf/system:find-system system) 'asdf/component:sideway-dependencies)))


(defgeneric dependency-tree (system))
(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((rec (sys) 
		       (loop with deps = (dependencies-of sys)
                  for dep in deps for dep-k = (->key dep)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew (->key sys) (gethash dep-k res)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 62884 9738000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:PARENSCRIPT :CL-NOTEBOOK)
 (:NAMED-READTABLES :PARENSCRIPT) (:FACT-BASE :CL-NOTEBOOK)
 (:LOCAL-TIME :FACT-BASE) (:HOUSE :CL-NOTEBOOK) (:FLEXI-STREAMS :HOUSE)
 (:TRIVIAL-GRAY-STREAMS :FLEXI-STREAMS) (:OPTIMA :FACT-BASE :HOUSE)
 (:CLOSER-MOP :CL-NOTEBOOK :OPTIMA) (:USOCKET :HOUSE)
 (:SB-BSD-SOCKETS :USOCKET) (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE)
 (:SB-POSIX :CL-FAD) (:BORDEAUX-THREADS :CL-FAD :HOUSE) (:CL-JSON :HOUSE)
 (:CL-PPCRE :PARENSCRIPT :HOUSE) (:CL-BASE64 :HOUSE)
 (:ANAPHORA :PARENSCRIPT :FACT-BASE :HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA :FACT-BASE :OPTIMA :CL-FAD :BORDEAUX-THREADS :HOUSE :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 62884 9747000) :INSERT
 (75 :CONTENTS "(defgeneric ->key (thing))

(defmethod ->key ((thing string))
  (intern (string-upcase thing) :keyword))

(defmethod ->key ((thing symbol))
  (if (keywordp thing)
      thing
  	  (intern (symbol-name thing) :keyword)))

(defgeneric dependencies-of (system))
(defmethod dependencies-of ((system symbol))
  (mapcar #'->key (slot-value (asdf/system:find-system system) 'asdf/component:sideway-dependencies)))


(defgeneric dependency-tree (system))
(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((rec (sys) 
		       (loop with deps = (dependencies-of sys)
                  for dep in deps for dep-k = (->key dep)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew (->key sys) (gethash dep-k res)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 62884 9756000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:PARENSCRIPT :CL-NOTEBOOK)
 (:NAMED-READTABLES :PARENSCRIPT) (:FACT-BASE :CL-NOTEBOOK)
 (:LOCAL-TIME :FACT-BASE) (:HOUSE :CL-NOTEBOOK) (:FLEXI-STREAMS :HOUSE)
 (:TRIVIAL-GRAY-STREAMS :FLEXI-STREAMS) (:OPTIMA :FACT-BASE :HOUSE)
 (:CLOSER-MOP :CL-NOTEBOOK :OPTIMA) (:USOCKET :HOUSE)
 (:SB-BSD-SOCKETS :USOCKET) (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE)
 (:SB-POSIX :CL-FAD) (:BORDEAUX-THREADS :CL-FAD :HOUSE) (:CL-JSON :HOUSE)
 (:CL-PPCRE :PARENSCRIPT :HOUSE) (:CL-BASE64 :HOUSE)
 (:ANAPHORA :PARENSCRIPT :FACT-BASE :HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA :FACT-BASE :OPTIMA :CL-FAD :BORDEAUX-THREADS :HOUSE :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 62906 251049000) :DELETE
 (75 :CONTENTS "(defgeneric ->key (thing))

(defmethod ->key ((thing string))
  (intern (string-upcase thing) :keyword))

(defmethod ->key ((thing symbol))
  (if (keywordp thing)
      thing
  	  (intern (symbol-name thing) :keyword)))

(defgeneric dependencies-of (system))
(defmethod dependencies-of ((system symbol))
  (mapcar #'->key (slot-value (asdf/system:find-system system) 'asdf/component:sideway-dependencies)))


(defgeneric dependency-tree (system))
(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((rec (sys) 
		       (loop with deps = (dependencies-of sys)
                  for dep in deps for dep-k = (->key dep)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew (->key sys) (gethash dep-k res)))))
      (rec system))
     (alexandria:hash-table-alist res)))

(dependency-tree :cl-notebook)"))
((5141 62906 251084000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((CONS
      "((:CL-CSS :CL-NOTEBOOK) (:CL-WHO :CL-NOTEBOOK) (:PARENSCRIPT :CL-NOTEBOOK)
 (:NAMED-READTABLES :PARENSCRIPT) (:FACT-BASE :CL-NOTEBOOK)
 (:LOCAL-TIME :FACT-BASE) (:HOUSE :CL-NOTEBOOK) (:FLEXI-STREAMS :HOUSE)
 (:TRIVIAL-GRAY-STREAMS :FLEXI-STREAMS) (:OPTIMA :FACT-BASE :HOUSE)
 (:CLOSER-MOP :CL-NOTEBOOK :OPTIMA) (:USOCKET :HOUSE)
 (:SB-BSD-SOCKETS :USOCKET) (:CL-FAD :FACT-BASE :LOCAL-TIME :HOUSE)
 (:SB-POSIX :CL-FAD) (:BORDEAUX-THREADS :CL-FAD :HOUSE) (:CL-JSON :HOUSE)
 (:CL-PPCRE :PARENSCRIPT :HOUSE) (:CL-BASE64 :HOUSE)
 (:ANAPHORA :PARENSCRIPT :FACT-BASE :HOUSE :CL-NOTEBOOK)
 (:ALEXANDRIA :FACT-BASE :OPTIMA :CL-FAD :BORDEAUX-THREADS :HOUSE :CL-NOTEBOOK))")))
   (:STDOUT . ""))))
((5141 62906 251093000) :INSERT
 (75 :CONTENTS "(defgeneric ->key (thing))

(defmethod ->key ((thing string))
  (intern (string-upcase thing) :keyword))

(defmethod ->key ((thing symbol))
  (if (keywordp thing)
      thing
  	  (intern (symbol-name thing) :keyword)))

(defgeneric dependencies-of (system))
(defmethod dependencies-of ((system symbol))
  (mapcar #'->key (slot-value (asdf/system:find-system system) 'asdf/component:sideway-dependencies)))

(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . sub-deps) in remaining
                      for unmet-sub-deps = (remove-if #'in-res? sub-deps)
                	  if (null unmet-sub-deps) do (push dep res)
                      else collect (cons dep unmet-sub-deps) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree for deps-of = (dependencies-of dep)
	        if (null deps-of) do (push dep res)
	        else collect (cons dep deps-of) into non-zeros
            finally (loop while non-zeros
                          do (setf non-zeros (insert-pass non-zeros)))))
      (reverse res)))

(defgeneric dependency-tree (system))
(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((rec (sys) 
		       (loop with deps = (dependencies-of sys)
                  for dep in deps for dep-k = (->key dep)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew (->key sys) (gethash dep-k res)))))
      (rec system))
     (ordered-dep-tree (alexandria:hash-table-alist res))))

(dependency-tree :cl-notebook)"))
((5141 62906 251111000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((CONS "(:CL-CSS :CL-WHO :NAMED-READTABLES :TRIVIAL-GRAY-STREAMS :CLOSER-MOP
 :SB-BSD-SOCKETS :SB-POSIX :CL-JSON :CL-PPCRE :CL-BASE64 :ANAPHORA :ALEXANDRIA
 :PARENSCRIPT :FLEXI-STREAMS :OPTIMA :USOCKET :BORDEAUX-THREADS :CL-FAD
 :LOCAL-TIME :HOUSE :FACT-BASE)")))
   (:STDOUT . ""))))
((5141 62944 235786000) :DELETE
 (75 :CONTENTS "(defgeneric ->key (thing))

(defmethod ->key ((thing string))
  (intern (string-upcase thing) :keyword))

(defmethod ->key ((thing symbol))
  (if (keywordp thing)
      thing
  	  (intern (symbol-name thing) :keyword)))

(defgeneric dependencies-of (system))
(defmethod dependencies-of ((system symbol))
  (mapcar #'->key (slot-value (asdf/system:find-system system) 'asdf/component:sideway-dependencies)))

(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . sub-deps) in remaining
                      for unmet-sub-deps = (remove-if #'in-res? sub-deps)
                	  if (null unmet-sub-deps) do (push dep res)
                      else collect (cons dep unmet-sub-deps) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree for deps-of = (dependencies-of dep)
	        if (null deps-of) do (push dep res)
	        else collect (cons dep deps-of) into non-zeros
            finally (loop while non-zeros
                          do (setf non-zeros (insert-pass non-zeros)))))
      (reverse res)))

(defgeneric dependency-tree (system))
(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((rec (sys) 
		       (loop with deps = (dependencies-of sys)
                  for dep in deps for dep-k = (->key dep)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew (->key sys) (gethash dep-k res)))))
      (rec system))
     (ordered-dep-tree (alexandria:hash-table-alist res))))

(dependency-tree :cl-notebook)"))
((5141 62944 235823000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((CONS "(:CL-CSS :CL-WHO :NAMED-READTABLES :TRIVIAL-GRAY-STREAMS :CLOSER-MOP
 :SB-BSD-SOCKETS :SB-POSIX :CL-JSON :CL-PPCRE :CL-BASE64 :ANAPHORA :ALEXANDRIA
 :PARENSCRIPT :FLEXI-STREAMS :OPTIMA :USOCKET :BORDEAUX-THREADS :CL-FAD
 :LOCAL-TIME :HOUSE :FACT-BASE)")))
   (:STDOUT . ""))))
((5141 62944 235830000) :INSERT
 (75 :CONTENTS "(defgeneric ->key (thing))

(defmethod ->key ((thing string))
  (intern (string-upcase thing) :keyword))

(defmethod ->key ((thing symbol))
  (if (keywordp thing)
      thing
  	  (intern (symbol-name thing) :keyword)))

(defgeneric dependencies-of (system))
(defmethod dependencies-of ((system symbol))
  (mapcar #'->key (slot-value (asdf/system:find-system system) 'asdf/component:sideway-dependencies)))

(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . sub-deps) in remaining
                      for unmet-sub-deps = (remove-if #'in-res? sub-deps)
                	  if (null unmet-sub-deps) do (push dep res)
                      else collect (cons dep unmet-sub-deps) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree for deps-of = (dependencies-of dep)
	        if (null deps-of) do (push dep res)
	        else collect (cons dep deps-of) into non-zeros
            finally (loop while non-zeros
                          do (setf non-zeros (insert-pass non-zeros)))))
      (reverse res)))

(defgeneric dependency-tree (system))
(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((rec (sys) 
		       (loop with deps = (dependencies-of sys)
                  for dep in deps for dep-k = (->key dep)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew (->key sys) (gethash dep-k res)))))
      (rec system))
     (ordered-dep-tree (alexandria:hash-table-alist res))))

(dependency-tree :cl-notebook)"))
((5141 62944 235844000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((CONS "(:CL-CSS :CL-WHO :NAMED-READTABLES :TRIVIAL-GRAY-STREAMS :CLOSER-MOP
 :SB-BSD-SOCKETS :SB-POSIX :CL-JSON :CL-PPCRE :CL-BASE64 :ANAPHORA :ALEXANDRIA
 :PARENSCRIPT :FLEXI-STREAMS :OPTIMA :USOCKET :BORDEAUX-THREADS :CL-FAD
 :LOCAL-TIME :HOUSE :FACT-BASE)")))
   (:STDOUT . ""))))
((5141 62992 756248000) :DELETE
 (75 :CONTENTS "(defgeneric ->key (thing))

(defmethod ->key ((thing string))
  (intern (string-upcase thing) :keyword))

(defmethod ->key ((thing symbol))
  (if (keywordp thing)
      thing
  	  (intern (symbol-name thing) :keyword)))

(defgeneric dependencies-of (system))
(defmethod dependencies-of ((system symbol))
  (mapcar #'->key (slot-value (asdf/system:find-system system) 'asdf/component:sideway-dependencies)))

(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . sub-deps) in remaining
                      for unmet-sub-deps = (remove-if #'in-res? sub-deps)
                	  if (null unmet-sub-deps) do (push dep res)
                      else collect (cons dep unmet-sub-deps) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree for deps-of = (dependencies-of dep)
	        if (null deps-of) do (push dep res)
	        else collect (cons dep deps-of) into non-zeros
            finally (loop while non-zeros
                          do (setf non-zeros (insert-pass non-zeros)))))
      (reverse res)))

(defgeneric dependency-tree (system))
(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((rec (sys) 
		       (loop with deps = (dependencies-of sys)
                  for dep in deps for dep-k = (->key dep)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew (->key sys) (gethash dep-k res)))))
      (rec system))
     (ordered-dep-tree (alexandria:hash-table-alist res))))

(dependency-tree :cl-notebook)"))
((5141 62992 756309000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((CONS "(:CL-CSS :CL-WHO :NAMED-READTABLES :TRIVIAL-GRAY-STREAMS :CLOSER-MOP
 :SB-BSD-SOCKETS :SB-POSIX :CL-JSON :CL-PPCRE :CL-BASE64 :ANAPHORA :ALEXANDRIA
 :PARENSCRIPT :FLEXI-STREAMS :OPTIMA :USOCKET :BORDEAUX-THREADS :CL-FAD
 :LOCAL-TIME :HOUSE :FACT-BASE)")))
   (:STDOUT . ""))))
((5141 62992 756318000) :INSERT
 (75 :CONTENTS "(defgeneric ->key (thing))

(defmethod ->key ((thing string))
  (intern (string-upcase thing) :keyword))

(defmethod ->key ((thing symbol))
  (if (keywordp thing)
      thing
  	  (intern (symbol-name thing) :keyword)))

(defgeneric dependencies-of (system))
(defmethod dependencies-of ((system symbol))
  (mapcar #'->key (slot-value (asdf/system:find-system system) 'asdf/component:sideway-dependencies)))

(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . sub-deps) in remaining
                      for unmet-sub-deps = (remove-if #'in-res? sub-deps)
                	  if (null unmet-sub-deps) do (push dep res)
                      else collect (cons dep unmet-sub-deps) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree for deps-of = (dependencies-of dep)
	        if (null deps-of) do (push dep res)
	        else collect (cons dep deps-of) into non-zeros
            finally (loop while non-zeros
                          do (setf non-zeros (insert-pass non-zeros)))))
      (reverse res)))

(defgeneric dependency-tree (system))
(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((rec (sys) 
		       (loop with deps = (dependencies-of sys)
                  for dep in deps for dep-k = (->key dep)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew (->key sys) (gethash dep-k res)))))
      (rec system))
     (ordered-dep-tree (alexandria:hash-table-alist res))))

(dependency-tree :hunchentoot)"))
((5141 62992 756332000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((CONS
      "(:SB-BSD-SOCKETS :TRIVIAL-BACKTRACE :RFC2388 :SB-ROTATE-BYTE :TRIVIAL-GARBAGE
 :TRIVIAL-FEATURES :CL-PPCRE :ALEXANDRIA :SB-POSIX :CL-BASE64
 :TRIVIAL-GRAY-STREAMS :USOCKET :MD5 :BABEL :FLEXI-STREAMS :BORDEAUX-THREADS
 :CHUNGA :CFFI :CL-FAD :CL+SSL)")))
   (:STDOUT . ""))))
((5141 63060 667259000) :DELETE (84 :CELL-ORDER (23 2 15 1 7 10 51 75 83)))
((5141 63060 667454000) :INSERT (85 :CELL-ORDER (23 2 15 1 7 10 51 75)))
((5141 63066 336544000) :DELETE
 (75 :CONTENTS "(defgeneric ->key (thing))

(defmethod ->key ((thing string))
  (intern (string-upcase thing) :keyword))

(defmethod ->key ((thing symbol))
  (if (keywordp thing)
      thing
  	  (intern (symbol-name thing) :keyword)))

(defgeneric dependencies-of (system))
(defmethod dependencies-of ((system symbol))
  (mapcar #'->key (slot-value (asdf/system:find-system system) 'asdf/component:sideway-dependencies)))

(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . sub-deps) in remaining
                      for unmet-sub-deps = (remove-if #'in-res? sub-deps)
                	  if (null unmet-sub-deps) do (push dep res)
                      else collect (cons dep unmet-sub-deps) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree for deps-of = (dependencies-of dep)
	        if (null deps-of) do (push dep res)
	        else collect (cons dep deps-of) into non-zeros
            finally (loop while non-zeros
                          do (setf non-zeros (insert-pass non-zeros)))))
      (reverse res)))

(defgeneric dependency-tree (system))
(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((rec (sys) 
		       (loop with deps = (dependencies-of sys)
                  for dep in deps for dep-k = (->key dep)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew (->key sys) (gethash dep-k res)))))
      (rec system))
     (ordered-dep-tree (alexandria:hash-table-alist res))))

(dependency-tree :hunchentoot)"))
((5141 63066 336580000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((CONS
      "(:SB-BSD-SOCKETS :TRIVIAL-BACKTRACE :RFC2388 :SB-ROTATE-BYTE :TRIVIAL-GARBAGE
 :TRIVIAL-FEATURES :CL-PPCRE :ALEXANDRIA :SB-POSIX :CL-BASE64
 :TRIVIAL-GRAY-STREAMS :USOCKET :MD5 :BABEL :FLEXI-STREAMS :BORDEAUX-THREADS
 :CHUNGA :CFFI :CL-FAD :CL+SSL)")))
   (:STDOUT . ""))))
((5141 63066 336585000) :INSERT
 (75 :CONTENTS "(defgeneric ->key (thing))

(defmethod ->key ((thing string))
  (intern (string-upcase thing) :keyword))

(defmethod ->key ((thing symbol))
  (if (keywordp thing)
      thing
  	  (intern (symbol-name thing) :keyword)))

(defgeneric dependencies-of (system))
(defmethod dependencies-of ((system symbol))
  (mapcar #'->key (slot-value (asdf/system:find-system system) 'asdf/component:sideway-dependencies)))

(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . sub-deps) in remaining
                      for unmet-sub-deps = (remove-if #'in-res? sub-deps)
                	  if (null unmet-sub-deps) do (push dep res)
                      else collect (cons dep unmet-sub-deps) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree for deps-of = (dependencies-of dep)
	        if (null deps-of) do (push dep res)
	        else collect (cons dep deps-of) into non-zeros
            finally (loop while non-zeros
                          do (setf non-zeros (insert-pass non-zeros)))))
      (reverse res)))

(defgeneric dependency-tree (system))
(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((rec (sys) 
		       (loop with deps = (dependencies-of sys)
                  for dep in deps for dep-k = (->key dep)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew (->key sys) (gethash dep-k res)))))
      (rec system))
     (ordered-dep-tree (alexandria:hash-table-alist res))))

(dependency-tree :cl-notebook)"))
((5141 63066 336599000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((CONS "(:CL-CSS :CL-WHO :NAMED-READTABLES :TRIVIAL-GRAY-STREAMS :CLOSER-MOP
 :SB-BSD-SOCKETS :SB-POSIX :CL-JSON :CL-PPCRE :CL-BASE64 :ANAPHORA :ALEXANDRIA
 :PARENSCRIPT :FLEXI-STREAMS :OPTIMA :USOCKET :BORDEAUX-THREADS :CL-FAD
 :LOCAL-TIME :HOUSE :FACT-BASE)")))
   (:STDOUT . ""))))
((5141 63084 138367000) :DELETE
 (75 :CONTENTS "(defgeneric ->key (thing))

(defmethod ->key ((thing string))
  (intern (string-upcase thing) :keyword))

(defmethod ->key ((thing symbol))
  (if (keywordp thing)
      thing
  	  (intern (symbol-name thing) :keyword)))

(defgeneric dependencies-of (system))
(defmethod dependencies-of ((system symbol))
  (mapcar #'->key (slot-value (asdf/system:find-system system) 'asdf/component:sideway-dependencies)))

(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . sub-deps) in remaining
                      for unmet-sub-deps = (remove-if #'in-res? sub-deps)
                	  if (null unmet-sub-deps) do (push dep res)
                      else collect (cons dep unmet-sub-deps) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree for deps-of = (dependencies-of dep)
	        if (null deps-of) do (push dep res)
	        else collect (cons dep deps-of) into non-zeros
            finally (loop while non-zeros
                          do (setf non-zeros (insert-pass non-zeros)))))
      (reverse res)))

(defgeneric dependency-tree (system))
(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((rec (sys) 
		       (loop with deps = (dependencies-of sys)
                  for dep in deps for dep-k = (->key dep)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew (->key sys) (gethash dep-k res)))))
      (rec system))
     (ordered-dep-tree (alexandria:hash-table-alist res))))

(dependency-tree :cl-notebook)"))
((5141 63084 138405000) :DELETE
 (75 :VALUE
  ((:RESULT
    ((CONS "(:CL-CSS :CL-WHO :NAMED-READTABLES :TRIVIAL-GRAY-STREAMS :CLOSER-MOP
 :SB-BSD-SOCKETS :SB-POSIX :CL-JSON :CL-PPCRE :CL-BASE64 :ANAPHORA :ALEXANDRIA
 :PARENSCRIPT :FLEXI-STREAMS :OPTIMA :USOCKET :BORDEAUX-THREADS :CL-FAD
 :LOCAL-TIME :HOUSE :FACT-BASE)")))
   (:STDOUT . ""))))
((5141 63084 138410000) :INSERT
 (75 :CONTENTS "(defgeneric ->key (thing))

(defmethod ->key ((thing string))
  (intern (string-upcase thing) :keyword))

(defmethod ->key ((thing symbol))
  (if (keywordp thing)
      thing
  	  (intern (symbol-name thing) :keyword)))

(defgeneric dependencies-of (system))
(defmethod dependencies-of ((system symbol))
  (mapcar #'->key (slot-value (asdf/system:find-system system) 'asdf/component:sideway-dependencies)))

(defun ordered-dep-tree (dep-tree)
  (let ((res))
    (labels ((in-res? (dep-name) (member dep-name res))
             (insert-pass (remaining)
             	(loop for (dep . sub-deps) in remaining
                      for unmet-sub-deps = (remove-if #'in-res? sub-deps)
                	  if (null unmet-sub-deps) do (push dep res)
                      else collect (cons dep unmet-sub-deps) into next-rems
                      finally (return next-rems))))
	  (loop for (dep . callers) in dep-tree for deps-of = (dependencies-of dep)
	        if (null deps-of) do (push dep res)
	        else collect (cons dep deps-of) into non-zeros
            finally (loop while non-zeros
                          do (setf non-zeros (insert-pass non-zeros)))))
      (reverse res)))

(defgeneric dependency-tree (system))
(defmethod dependency-tree ((system symbol))
  (let ((res (make-hash-table)))
    (labels ((rec (sys) 
		       (loop with deps = (dependencies-of sys)
                  for dep in deps for dep-k = (->key dep)
				  unless (gethash dep-k res) do (rec dep)
				  do (pushnew (->key sys) (gethash dep-k res)))))
      (rec system))
     (ordered-dep-tree (alexandria:hash-table-alist res))))

(dependency-tree :hunchentoot)"))
((5141 63084 138425000) :INSERT
 (75 :VALUE
  ((:RESULT
    ((CONS
      "(:SB-BSD-SOCKETS :TRIVIAL-BACKTRACE :RFC2388 :SB-ROTATE-BYTE :TRIVIAL-GARBAGE
 :TRIVIAL-FEATURES :CL-PPCRE :ALEXANDRIA :SB-POSIX :CL-BASE64
 :TRIVIAL-GRAY-STREAMS :USOCKET :MD5 :BABEL :FLEXI-STREAMS :BORDEAUX-THREADS
 :CHUNGA :CFFI :CL-FAD :CL+SSL)")))
   (:STDOUT . ""))))
((5141 63087 365319000) :DELETE (85 :CELL-ORDER (23 2 15 1 7 10 51 75)))
((5141 63087 365462000) :INSERT (86 :CELL-ORDER (23 2 15 1 7 10 51 75)))
((5141 63089 405261000) :DELETE (86 :CELL-ORDER (23 2 15 1 7 10 51 75)))
((5141 63089 405323000) :INSERT (87 :CELL-ORDER (23 2 15 1 7 10 51 75)))
((5141 65670 168010000) :DELETE (87 :CELL-ORDER (23 2 15 1 7 10 51 75)))
((5141 65670 168047000) :INSERT (88 :CELL-ORDER (23 2 15 1 7 10 51 75)))
((5141 65671 441455000) :DELETE (88 :CELL-ORDER (23 2 15 1 7 10 51 75)))
((5141 65671 441474000) :INSERT (89 :CELL-ORDER (23 2 15 1 7 10 51 75)))
((5141 65675 595118000) :DELETE (89 :CELL-ORDER (23 2 15 1 7 10 51 75)))
((5141 65675 595135000) :INSERT (90 :CELL-ORDER (23 2 15 1 7 10 51 75)))
((5141 65676 496894000) :DELETE (90 :CELL-ORDER (23 2 15 1 7 10 51 75)))
((5141 65676 496908000) :INSERT (91 :CELL-ORDER (23 2 15 1 7 10 51 75)))
((5141 67082 482953000) :DELETE (91 :CELL-ORDER (23 2 15 1 7 10 51 75)))
((5141 67082 482972000) :INSERT (92 :CELL-ORDER (23 2 15 1 7 10 51 75)))
((5141 67089 603184000) :DELETE (92 :CELL-ORDER (23 2 15 1 7 10 51 75)))
((5141 67089 603200000) :INSERT (93 :CELL-ORDER (23 2 15 1 7 10 51 75)))
